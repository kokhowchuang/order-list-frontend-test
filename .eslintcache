[{"/Users/zincchuang/Documents/boogizfront/src/index.js":"1","/Users/zincchuang/Documents/boogizfront/src/App.js":"2","/Users/zincchuang/Documents/boogizfront/src/serviceWorker.js":"3","/Users/zincchuang/Documents/boogizfront/src/SignIn.js":"4","/Users/zincchuang/Documents/boogizfront/src/theme.js":"5","/Users/zincchuang/Documents/boogizfront/src/useToken.js":"6","/Users/zincchuang/Documents/boogizfront/src/Home/Home.js":"7","/Users/zincchuang/Documents/boogizfront/src/AppBarAndDrawer/AppBarAndDrawer.js":"8","/Users/zincchuang/Documents/boogizfront/src/Providers/DataProvider.js":"9","/Users/zincchuang/Documents/boogizfront/src/Settings/Settings.js":"10","/Users/zincchuang/Documents/boogizfront/src/Theme/PalettePicker.js":"11","/Users/zincchuang/Documents/boogizfront/src/Components/Breadcrumbs/Breadcrumbs.js":"12","/Users/zincchuang/Documents/boogizfront/src/Components/Switches/Switches.js":"13","/Users/zincchuang/Documents/boogizfront/src/Components/Slider/Slider.js":"14","/Users/zincchuang/Documents/boogizfront/src/Components/TextField/TextField.js":"15","/Users/zincchuang/Documents/boogizfront/src/Components/Select/Select.js":"16","/Users/zincchuang/Documents/boogizfront/src/Components/RadioButtons/RadioButton.js":"17","/Users/zincchuang/Documents/boogizfront/src/Components/Checkbox/Checkbox.js":"18","/Users/zincchuang/Documents/boogizfront/src/Components/ButtonGroup/ButtonGroup.js":"19","/Users/zincchuang/Documents/boogizfront/src/Components/FloatingButton/FloatingButton.js":"20","/Users/zincchuang/Documents/boogizfront/src/Components/Buttons/Buttons.js":"21","/Users/zincchuang/Documents/boogizfront/src/Theme/colors.js":"22","/Users/zincchuang/Documents/boogizfront/src/helper.js":"23","/Users/zincchuang/Documents/boogizfront/src/Dashboard/Dashboard.js":"24","/Users/zincchuang/Documents/boogizfront/src/Dashboard/Chart.js":"25","/Users/zincchuang/Documents/boogizfront/src/Dashboard/ExpensesTable.js":"26","/Users/zincchuang/Documents/boogizfront/src/Dashboard/TotalCard.js":"27","/Users/zincchuang/Documents/boogizfront/src/Dashboard/Tools.js":"28","/Users/zincchuang/Documents/boogizfront/src/Dashboard/CovidWarning.js":"29","/Users/zincchuang/Documents/boogizfront/src/Dashboard/Content.js":"30","/Users/zincchuang/Documents/boogizfront/src/Dashboard/Title.js":"31","/Users/zincchuang/Documents/boogizfront/src/API/music/updateMusic.js":"32","/Users/zincchuang/Documents/boogizfront/src/API/Music/updateMusic.js":"33","/Users/zincchuang/Documents/boogizfront/src/API/Music/fetchSingleMusic.js":"34","/Users/zincchuang/Documents/boogizfront/src/API/Music/createMusic.js":"35","/Users/zincchuang/Documents/boogizfront/src/API/Music/fetchMusics.js":"36","/Users/zincchuang/Documents/boogizfront/src/API/Music/deleteMusic.js":"37","/Users/zincchuang/Documents/boogizfront/src/Components/Buttons/BackButton.js":"38","/Users/zincchuang/Documents/boogizfront/src/Components/Card/SummaryCard.js":"39","/Users/zincchuang/Documents/boogizfront/src/API/Genre/createGenre.js":"40","/Users/zincchuang/Documents/boogizfront/src/API/Genre/deleteGenre.js":"41","/Users/zincchuang/Documents/boogizfront/src/API/DanceGenre/fetchDanceGenre.js":"42","/Users/zincchuang/Documents/boogizfront/src/API/Genre/fetchGenre.js":"43","/Users/zincchuang/Documents/boogizfront/src/API/DanceGenre/deleteDanceGenre.js":"44","/Users/zincchuang/Documents/boogizfront/src/API/DanceGenre/createDanceGenre.js":"45","/Users/zincchuang/Documents/boogizfront/src/Components/Dialog/DeleteDialog.js":"46","/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/fetchDanceMove.js":"47","/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/fetchSingleDanceMove.js":"48","/Users/zincchuang/Documents/boogizfront/src/Components/Autocomplete/Autocomplete.js":"49","/Users/zincchuang/Documents/boogizfront/src/Components/FileUpload/FileUpload.js":"50","/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/updateDanceMove.js":"51","/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/createDanceMove.js":"52","/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/deleteDanceMove.js":"53","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceMove/Redux/danceMoveSlice.js":"54","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceGenre/Redux/danceGenre.js":"55","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceGenre/Redux/danceGenreSlice.js":"56","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/Redux/music.js":"57","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceMove/Redux/danceMove.js":"58","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/Redux/musicSlice.js":"59","/Users/zincchuang/Documents/boogizfront/src/Pages/Genre/Redux/genreSlice.js":"60","/Users/zincchuang/Documents/boogizfront/src/Pages/Genre/Redux/genre.js":"61","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceGenre/DanceGenreDialog.js":"62","/Users/zincchuang/Documents/boogizfront/src/Pages/Genre/GenreDialog.js":"63","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceMove/EditDanceMove.js":"64","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceMove/AddDanceMove.js":"65","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/EditMusic.js":"66","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/AddMusic.js":"67","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/Components/MusicFileUpload.js":"68","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/Components/Autocomplete.js":"69","/Users/zincchuang/Documents/boogizfront/src/Pages/Reason/Redux/reason.js":"70","/Users/zincchuang/Documents/boogizfront/src/Pages/Reason/Redux/reasonSlice.js":"71","/Users/zincchuang/Documents/boogizfront/src/API/Reason/fetchReason.js":"72","/Users/zincchuang/Documents/boogizfront/src/API/Reason/deleteReason.js":"73","/Users/zincchuang/Documents/boogizfront/src/API/Reason/createReason.js":"74","/Users/zincchuang/Documents/boogizfront/src/Pages/Reason/AddReason.js":"75","/Users/zincchuang/Documents/boogizfront/src/Pages/Reason/EditReason.js":"76","/Users/zincchuang/Documents/boogizfront/src/API/Reason/fetchSingleReason.js":"77","/Users/zincchuang/Documents/boogizfront/src/API/Reason/updateReason.js":"78","/Users/zincchuang/Documents/boogizfront/src/Pages/Reporting/Redux/reportingSlice.js":"79","/Users/zincchuang/Documents/boogizfront/src/Pages/Reporting/Redux/reporting.js":"80","/Users/zincchuang/Documents/boogizfront/src/API/Reporting/fetchReporting.js":"81","/Users/zincchuang/Documents/boogizfront/src/Pages/Option/Redux/optionSlice.js":"82","/Users/zincchuang/Documents/boogizfront/src/Pages/Option/Redux/option.js":"83","/Users/zincchuang/Documents/boogizfront/src/API/Option/fetchOption.js":"84","/Users/zincchuang/Documents/boogizfront/src/Pages/Option/AddOptionDialog.js":"85","/Users/zincchuang/Documents/boogizfront/src/API/Option/createOption.js":"86","/Users/zincchuang/Documents/boogizfront/src/API/Option/deleteOption.js":"87","/Users/zincchuang/Documents/boogizfront/src/Pages/Option/EditOptionDialog.js":"88","/Users/zincchuang/Documents/boogizfront/src/API/Option/updateOption.js":"89","/Users/zincchuang/Documents/boogizfront/src/Pages/Reporting/EditReporting.js":"90","/Users/zincchuang/Documents/boogizfront/src/API/Reporting/fetchSingleReporting.js":"91","/Users/zincchuang/Documents/boogizfront/src/Pages/Challenge/Redux/challengeSlice.js":"92","/Users/zincchuang/Documents/boogizfront/src/Pages/User/Redux/userSlice.js":"93","/Users/zincchuang/Documents/boogizfront/src/Pages/Challenge/AddChallenge.js":"94","/Users/zincchuang/Documents/boogizfront/src/Pages/Challenge/Redux/challenge.js":"95","/Users/zincchuang/Documents/boogizfront/src/API/Challenge/fetchChallenge.js":"96","/Users/zincchuang/Documents/boogizfront/src/API/Challenge/deleteChallenge.js":"97","/Users/zincchuang/Documents/boogizfront/src/API/Challenge/createChallenge.js":"98","/Users/zincchuang/Documents/boogizfront/src/Pages/Challenge/EditChallenge.js":"99","/Users/zincchuang/Documents/boogizfront/src/API/Challenge/fetchSingleChallenge.js":"100","/Users/zincchuang/Documents/boogizfront/src/API/Challenge/updateChallenge.js":"101","/Users/zincchuang/Documents/boogizfront/src/Pages/Video/Redux/video.js":"102","/Users/zincchuang/Documents/boogizfront/src/Pages/Video/Redux/videoSlice.js":"103","/Users/zincchuang/Documents/boogizfront/src/API/Video/deleteVideo.js":"104","/Users/zincchuang/Documents/boogizfront/src/API/Video/fetchVideo.js":"105","/Users/zincchuang/Documents/boogizfront/src/Pages/Video/EditVideo.js":"106","/Users/zincchuang/Documents/boogizfront/src/API/Video/fetchSingleVideo.js":"107","/Users/zincchuang/Documents/boogizfront/src/API/Video/updateVideo.js":"108","/Users/zincchuang/Documents/boogizfront/src/Pages/User/Redux/user.js":"109","/Users/zincchuang/Documents/boogizfront/src/API/User/deleteUser.js":"110","/Users/zincchuang/Documents/boogizfront/src/API/User/fetchUser.js":"111","/Users/zincchuang/Documents/boogizfront/src/Pages/User/EditUser.js":"112","/Users/zincchuang/Documents/boogizfront/src/API/User/fetchSingleUser.js":"113","/Users/zincchuang/Documents/boogizfront/src/API/User/updateUser.js":"114","/Users/zincchuang/Documents/boogizfront/src/Theme/sharedClasses.js":"115","/Users/zincchuang/Documents/boogizfront/src/API/Reporting/updateReporting.js":"116","/Users/zincchuang/Documents/boogizfront/src/API/Reporting/deleteReporting.js":"117","/Users/zincchuang/Documents/boogizfront/src/API/Analytic/fetchAnalytic.js":"118","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceGenre/EditDanceGenreDialog.js":"119","/Users/zincchuang/Documents/boogizfront/src/API/DanceGenre/updateDanceGenre.js":"120","/Users/zincchuang/Documents/boogizfront/src/API/Genre/updateGenre.js":"121","/Users/zincchuang/Documents/boogizfront/src/Pages/Genre/EditGenreDialog.js":"122","/Users/zincchuang/Downloads/test/aemulusfrontend/src/index.js":"123","/Users/zincchuang/Downloads/test/aemulusfrontend/src/App.js":"124","/Users/zincchuang/Downloads/test/aemulusfrontend/src/serviceWorker.js":"125","/Users/zincchuang/Downloads/test/aemulusfrontend/src/theme.js":"126","/Users/zincchuang/Downloads/test/aemulusfrontend/src/SignIn.js":"127","/Users/zincchuang/Downloads/test/aemulusfrontend/src/useToken.js":"128","/Users/zincchuang/Downloads/test/aemulusfrontend/src/AppBarAndDrawer/AppBarAndDrawer.js":"129","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Providers/DataProvider.js":"130","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Home/Home.js":"131","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Settings/Settings.js":"132","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Dashboard/Content.js":"133","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Theme/PalettePicker.js":"134","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Theme/sharedClasses.js":"135","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/Card/SummaryCard.js":"136","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/Dialog/DeleteDialog.js":"137","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/FileUpload/FileUpload.js":"138","/Users/zincchuang/Downloads/test/aemulusfrontend/src/helper.js":"139","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Theme/colors.js":"140","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/Autocomplete/Autocomplete.js":"141","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/Buttons/BackButton.js":"142","/Users/zincchuang/Downloads/test/aemulusfrontend/src/API/Filter/fetchFilter.js":"143","/Users/zincchuang/Downloads/test/aemulusfrontend/src/API/Order/fetchOrder.js":"144","/Users/zincchuang/Downloads/test/aemulusfrontend/src/API/OrderDetail/fetchOrderDetail.js":"145","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Dashboard/Chart.js":"146","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Dashboard/Title.js":"147"},{"size":464,"mtime":1621673455066,"results":"148","hashOfConfig":"149"},{"size":5738,"mtime":1625010468397,"results":"150","hashOfConfig":"149"},{"size":5140,"mtime":1621673455066,"results":"151","hashOfConfig":"149"},{"size":6074,"mtime":1628856930761,"results":"152","hashOfConfig":"149"},{"size":1764,"mtime":1625403785618,"results":"153","hashOfConfig":"149"},{"size":728,"mtime":1623842499761,"results":"154","hashOfConfig":"149"},{"size":3296,"mtime":1625436029468,"results":"155","hashOfConfig":"149"},{"size":6562,"mtime":1625370524504,"results":"156","hashOfConfig":"149"},{"size":1260,"mtime":1621673455065,"results":"157","hashOfConfig":"149"},{"size":509,"mtime":1621673455065,"results":"158","hashOfConfig":"149"},{"size":918,"mtime":1621673455065,"results":"159","hashOfConfig":"149"},{"size":742,"mtime":1621673455061,"results":"160","hashOfConfig":"149"},{"size":1391,"mtime":1621673455063,"results":"161","hashOfConfig":"149"},{"size":4618,"mtime":1621673455063,"results":"162","hashOfConfig":"149"},{"size":1680,"mtime":1621673455063,"results":"163","hashOfConfig":"149"},{"size":8561,"mtime":1621673455062,"results":"164","hashOfConfig":"149"},{"size":1279,"mtime":1621673455062,"results":"165","hashOfConfig":"149"},{"size":3064,"mtime":1621673455061,"results":"166","hashOfConfig":"149"},{"size":1224,"mtime":1621673455061,"results":"167","hashOfConfig":"149"},{"size":1136,"mtime":1621673455062,"results":"168","hashOfConfig":"149"},{"size":812,"mtime":1621673455061,"results":"169","hashOfConfig":"149"},{"size":464,"mtime":1621673455065,"results":"170","hashOfConfig":"149"},{"size":939,"mtime":1623842495237,"results":"171","hashOfConfig":"149"},{"size":3891,"mtime":1622012837361,"results":"172","hashOfConfig":"149"},{"size":1449,"mtime":1622012837359,"results":"173","hashOfConfig":"149"},{"size":1984,"mtime":1622012837361,"results":"174","hashOfConfig":"149"},{"size":2949,"mtime":1622012837364,"results":"175","hashOfConfig":"149"},{"size":2538,"mtime":1622012837363,"results":"176","hashOfConfig":"149"},{"size":939,"mtime":1622012837360,"results":"177","hashOfConfig":"149"},{"size":814,"mtime":1625178125953,"results":"178","hashOfConfig":"149"},{"size":358,"mtime":1622012837362,"results":"179","hashOfConfig":"149"},{"size":841,"mtime":1622016393228,"results":"180","hashOfConfig":"149"},{"size":1256,"mtime":1627999586437,"results":"181","hashOfConfig":"149"},{"size":393,"mtime":1623833162730,"results":"182","hashOfConfig":"149"},{"size":1248,"mtime":1627999579030,"results":"183","hashOfConfig":"149"},{"size":560,"mtime":1624498852234,"results":"184","hashOfConfig":"149"},{"size":703,"mtime":1626841541659,"results":"185","hashOfConfig":"149"},{"size":268,"mtime":1628480067930,"results":"186","hashOfConfig":"149"},{"size":845,"mtime":1625438836153,"results":"187","hashOfConfig":"149"},{"size":825,"mtime":1628141981969,"results":"188","hashOfConfig":"149"},{"size":703,"mtime":1625174598754,"results":"189","hashOfConfig":"149"},{"size":439,"mtime":1623833028255,"results":"190","hashOfConfig":"149"},{"size":418,"mtime":1623833131882,"results":"191","hashOfConfig":"149"},{"size":724,"mtime":1625174654521,"results":"192","hashOfConfig":"149"},{"size":847,"mtime":1627799816575,"results":"193","hashOfConfig":"149"},{"size":1491,"mtime":1623346108600,"results":"194","hashOfConfig":"149"},{"size":590,"mtime":1628856909601,"results":"195","hashOfConfig":"149"},{"size":535,"mtime":1628856914377,"results":"196","hashOfConfig":"149"},{"size":1765,"mtime":1625188260454,"results":"197","hashOfConfig":"149"},{"size":1747,"mtime":1626793743066,"results":"198","hashOfConfig":"149"},{"size":1812,"mtime":1628856919104,"results":"199","hashOfConfig":"149"},{"size":1795,"mtime":1628856889271,"results":"200","hashOfConfig":"149"},{"size":798,"mtime":1628856900512,"results":"201","hashOfConfig":"149"},{"size":2705,"mtime":1626845150178,"results":"202","hashOfConfig":"149"},{"size":13831,"mtime":1628482290138,"results":"203","hashOfConfig":"149"},{"size":1461,"mtime":1623831866979,"results":"204","hashOfConfig":"149"},{"size":14031,"mtime":1628482389440,"results":"205","hashOfConfig":"149"},{"size":16031,"mtime":1628482666237,"results":"206","hashOfConfig":"149"},{"size":2629,"mtime":1626851907535,"results":"207","hashOfConfig":"149"},{"size":1508,"mtime":1623831912870,"results":"208","hashOfConfig":"149"},{"size":15926,"mtime":1628482350307,"results":"209","hashOfConfig":"149"},{"size":4217,"mtime":1628141880000,"results":"210","hashOfConfig":"149"},{"size":4211,"mtime":1628141934870,"results":"211","hashOfConfig":"149"},{"size":22216,"mtime":1628777102791,"results":"212","hashOfConfig":"149"},{"size":18182,"mtime":1628777209768,"results":"213","hashOfConfig":"149"},{"size":16186,"mtime":1627999562267,"results":"214","hashOfConfig":"149"},{"size":12315,"mtime":1627999545486,"results":"215","hashOfConfig":"149"},{"size":1229,"mtime":1625439926605,"results":"216","hashOfConfig":"149"},{"size":2107,"mtime":1625394275106,"results":"217","hashOfConfig":"149"},{"size":14372,"mtime":1628482824975,"results":"218","hashOfConfig":"149"},{"size":1671,"mtime":1626852330125,"results":"219","hashOfConfig":"149"},{"size":412,"mtime":1623843797112,"results":"220","hashOfConfig":"149"},{"size":709,"mtime":1625174558803,"results":"221","hashOfConfig":"149"},{"size":728,"mtime":1623940333352,"results":"222","hashOfConfig":"149"},{"size":9046,"mtime":1625326702390,"results":"223","hashOfConfig":"149"},{"size":12624,"mtime":1626853244317,"results":"224","hashOfConfig":"149"},{"size":486,"mtime":1624094975648,"results":"225","hashOfConfig":"149"},{"size":745,"mtime":1623994522746,"results":"226","hashOfConfig":"149"},{"size":2696,"mtime":1626852751572,"results":"227","hashOfConfig":"149"},{"size":15911,"mtime":1628482873065,"results":"228","hashOfConfig":"149"},{"size":695,"mtime":1624500068573,"results":"229","hashOfConfig":"149"},{"size":2648,"mtime":1626852958799,"results":"230","hashOfConfig":"149"},{"size":16936,"mtime":1628482537625,"results":"231","hashOfConfig":"149"},{"size":655,"mtime":1624500129997,"results":"232","hashOfConfig":"149"},{"size":6930,"mtime":1625392348146,"results":"233","hashOfConfig":"149"},{"size":1152,"mtime":1624185003195,"results":"234","hashOfConfig":"149"},{"size":696,"mtime":1624185128262,"results":"235","hashOfConfig":"149"},{"size":7482,"mtime":1627700464271,"results":"236","hashOfConfig":"149"},{"size":1168,"mtime":1624197188942,"results":"237","hashOfConfig":"149"},{"size":12715,"mtime":1625434244832,"results":"238","hashOfConfig":"149"},{"size":501,"mtime":1625363866827,"results":"239","hashOfConfig":"149"},{"size":2705,"mtime":1626852118463,"results":"240","hashOfConfig":"149"},{"size":2610,"mtime":1626851794346,"results":"241","hashOfConfig":"149"},{"size":11342,"mtime":1628477489714,"results":"242","hashOfConfig":"149"},{"size":15862,"mtime":1628482551015,"results":"243","hashOfConfig":"149"},{"size":575,"mtime":1624811645765,"results":"244","hashOfConfig":"149"},{"size":719,"mtime":1625174669985,"results":"245","hashOfConfig":"149"},{"size":1196,"mtime":1628443937489,"results":"246","hashOfConfig":"149"},{"size":14724,"mtime":1628481203433,"results":"247","hashOfConfig":"149"},{"size":417,"mtime":1624811693387,"results":"248","hashOfConfig":"149"},{"size":1212,"mtime":1628480813855,"results":"249","hashOfConfig":"149"},{"size":17181,"mtime":1628482948476,"results":"250","hashOfConfig":"149"},{"size":2623,"mtime":1626851858991,"results":"251","hashOfConfig":"149"},{"size":700,"mtime":1625174522799,"results":"252","hashOfConfig":"149"},{"size":820,"mtime":1625239815611,"results":"253","hashOfConfig":"149"},{"size":15056,"mtime":1626851264568,"results":"254","hashOfConfig":"149"},{"size":477,"mtime":1625367235838,"results":"255","hashOfConfig":"149"},{"size":747,"mtime":1625375995240,"results":"256","hashOfConfig":"149"},{"size":16384,"mtime":1628482904579,"results":"257","hashOfConfig":"149"},{"size":697,"mtime":1625174512300,"results":"258","hashOfConfig":"149"},{"size":830,"mtime":1625231280884,"results":"259","hashOfConfig":"149"},{"size":11450,"mtime":1625305374832,"results":"260","hashOfConfig":"149"},{"size":387,"mtime":1624812068912,"results":"261","hashOfConfig":"149"},{"size":944,"mtime":1625011558647,"results":"262","hashOfConfig":"149"},{"size":1136,"mtime":1625411452959,"results":"263","hashOfConfig":"149"},{"size":750,"mtime":1625369099279,"results":"264","hashOfConfig":"149"},{"size":724,"mtime":1625370354990,"results":"265","hashOfConfig":"149"},{"size":527,"mtime":1625436182532,"results":"266","hashOfConfig":"149"},{"size":4598,"mtime":1628141781988,"results":"267","hashOfConfig":"149"},{"size":909,"mtime":1627994381392,"results":"268","hashOfConfig":"149"},{"size":888,"mtime":1628140656441,"results":"269","hashOfConfig":"149"},{"size":4595,"mtime":1628141708797,"results":"270","hashOfConfig":"149"},{"size":464,"mtime":1621673455066,"results":"271","hashOfConfig":"272"},{"size":1876,"mtime":1648168060358,"results":"273","hashOfConfig":"272"},{"size":5140,"mtime":1621673455066,"results":"274","hashOfConfig":"272"},{"size":1764,"mtime":1625403785618,"results":"275","hashOfConfig":"272"},{"size":6074,"mtime":1648136993433,"results":"276","hashOfConfig":"272"},{"size":728,"mtime":1623842499761,"results":"277","hashOfConfig":"272"},{"size":6027,"mtime":1648165705444,"results":"278","hashOfConfig":"272"},{"size":1260,"mtime":1621673455065,"results":"279","hashOfConfig":"272"},{"size":14825,"mtime":1648167614097,"results":"280","hashOfConfig":"272"},{"size":509,"mtime":1621673455065,"results":"281","hashOfConfig":"272"},{"size":814,"mtime":1625178125953,"results":"282","hashOfConfig":"272"},{"size":918,"mtime":1621673455065,"results":"283","hashOfConfig":"272"},{"size":1136,"mtime":1625411452959,"results":"284","hashOfConfig":"272"},{"size":845,"mtime":1625438836153,"results":"285","hashOfConfig":"272"},{"size":1491,"mtime":1623346108600,"results":"286","hashOfConfig":"272"},{"size":1747,"mtime":1626793743066,"results":"287","hashOfConfig":"272"},{"size":939,"mtime":1623842495237,"results":"288","hashOfConfig":"272"},{"size":464,"mtime":1621673455065,"results":"289","hashOfConfig":"272"},{"size":1765,"mtime":1625188260454,"results":"290","hashOfConfig":"272"},{"size":268,"mtime":1628480067930,"results":"291","hashOfConfig":"272"},{"size":401,"mtime":1648137217729,"results":"292","hashOfConfig":"272"},{"size":778,"mtime":1648140494643,"results":"293","hashOfConfig":"272"},{"size":419,"mtime":1648143231468,"results":"294","hashOfConfig":"272"},{"size":1794,"mtime":1648167915930,"results":"295","hashOfConfig":"272"},{"size":358,"mtime":1622012837362,"results":"296","hashOfConfig":"272"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},"wv1v24",{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"299"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"299"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"299"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"299"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"299"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"299"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"328"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"299"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"299"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"328"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"299"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"299"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"299"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"299"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"299"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"299"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"420","messages":"421","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"299"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"299"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"299"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"299"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"299"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"299"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"299"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"299"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"299"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"299"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"299"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"299"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"299"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"299"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"299"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"299"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"299"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"299"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"299"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"299"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"299"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"299"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"299"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"299"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"299"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"299"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"299"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"299"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"299"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"299"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"299"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"299"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"299"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"299"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"299"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"299"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"299"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"299"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"299"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577","usedDeprecatedRules":"299"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"299"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"299"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"299"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"299"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},"1gv7p7u",{"filePath":"604","messages":"605","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"603"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"603"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"603"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"603"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"603"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"603"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"631"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"631"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"631"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"603"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"603"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"631"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"631"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654","usedDeprecatedRules":"603"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"603"},"/Users/zincchuang/Documents/boogizfront/src/index.js",[],["657","658"],"/Users/zincchuang/Documents/boogizfront/src/App.js",["659","660"],"import React from \"react\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { useTheme } from \"./theme\";\nimport { DataProvider } from \"./Providers/DataProvider\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n\n// components\nimport AppBarAndDrawer from \"./AppBarAndDrawer/AppBarAndDrawer\";\n\n// routes\nimport { SignIn } from \"./SignIn\";\nimport { Home } from \"./Home/Home\";\nimport Music from \"./Pages/Music/Redux/music\";\nimport EditMusic from \"./Pages/Music/EditMusic\";\nimport AddMusic from \"./Pages/Music/AddMusic\";\nimport DanceGenre from \"./Pages/DanceGenre/Redux/danceGenre\";\nimport DanceMove from \"./Pages/DanceMove/Redux/danceMove\";\nimport Genre from \"./Pages/Genre/Redux/genre\";\nimport EditDanceMove from \"./Pages/DanceMove/EditDanceMove\";\nimport AddDanceMove from \"./Pages/DanceMove/AddDanceMove\";\nimport Reason from \"./Pages/Reason/Redux/reason\";\nimport AddReason from \"./Pages/Reason/AddReason\";\nimport EditReason from \"./Pages/Reason/EditReason\";\nimport Reporting from \"./Pages/Reporting/Redux/reporting\";\nimport Option from \"./Pages/Option/Redux/option\";\nimport EditReporting from \"./Pages/Reporting/EditReporting\";\nimport AddChallenge from \"./Pages/Challenge/AddChallenge\";\nimport Challenge from \"./Pages/Challenge/Redux/challenge\";\nimport EditChallenge from \"./Pages/Challenge/EditChallenge\";\nimport Video from \"./Pages/Video/Redux/video\";\nimport EditVideo from \"./Pages/Video/EditVideo\";\nimport User from \"./Pages/User/Redux/user\";\nimport EditUser from \"./Pages/User/EditUser\";\n\n// reducers\nimport musicReducer from \"./Pages/Music/Redux/musicSlice\";\nimport danceGenreReducer from \"./Pages/DanceGenre/Redux/danceGenreSlice\";\nimport danceMoveReducer from \"./Pages/DanceMove/Redux/danceMoveSlice\";\nimport genreReducer from \"./Pages/Genre/Redux/genreSlice\";\nimport reasonReducer from \"./Pages/Reason/Redux/reasonSlice\";\nimport reportingReducer from \"./Pages/Reporting/Redux/reportingSlice\";\nimport optionReducer from \"./Pages/Option/Redux/optionSlice\";\nimport userReducer from \"./Pages/User/Redux/userSlice\";\nimport challengeReducer from \"./Pages/Challenge/Redux/challengeSlice\";\nimport videoReducer from \"./Pages/Video/Redux/videoSlice\";\n\n// hooks\nimport useToken from \"./useToken\";\n\nimport Settings from \"./Settings/Settings\";\n\nexport default function App() {\n\tconst { token, setToken, unsetToken } = useToken();\n\tconst store = configureStore({\n\t\treducer: {\n\t\t\tmusic: musicReducer,\n\t\t\tdanceGenre: danceGenreReducer,\n\t\t\tdanceMove: danceMoveReducer,\n\t\t\tgenre: genreReducer,\n\t\t\treason: reasonReducer,\n\t\t\treporting: reportingReducer,\n\t\t\toption: optionReducer,\n\t\t\tuser: userReducer,\n\t\t\tchallenge: challengeReducer,\n\t\t\tvideo: videoReducer,\n\t\t},\n\t});\n\n\tconst [currentTheme, setCurrentTheme] = useTheme();\n\tlet i = 0;\n\n\tif (!token) {\n\t\treturn <SignIn setToken={setToken} />\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\n\t\t\t\t<ThemeProvider theme={currentTheme}>\n\t\t\t\t\t<Provider store={store}>\n\t\t\t\t\t\t<DataProvider>\n\t\t\t\t\t\t\t<Router>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<AppBarAndDrawer\n\t\t\t\t\t\t\t\t\t\tcurrentTheme={currentTheme}\n\t\t\t\t\t\t\t\t\t\tsetCurrentTheme={setCurrentTheme}\n\t\t\t\t\t\t\t\t\t\tunsetToken={unsetToken}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t{/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n\t\t\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/music\">\n\t\t\t\t\t\t\t\t\t\t\t<Music />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/music/new\">\n\t\t\t\t\t\t\t\t\t\t\t<AddMusic />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path={`/music/:musicId`}>\n\t\t\t\t\t\t\t\t\t\t\t<EditMusic />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/dance_genre\">\n\t\t\t\t\t\t\t\t\t\t\t<DanceGenre />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/dance_move\">\n\t\t\t\t\t\t\t\t\t\t\t<DanceMove />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/dance_move/new\">\n\t\t\t\t\t\t\t\t\t\t\t<AddDanceMove />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path={`/dance_move/:danceMoveId`}>\n\t\t\t\t\t\t\t\t\t\t\t<EditDanceMove />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/genre\">\n\t\t\t\t\t\t\t\t\t\t\t<Genre />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/reason\">\n\t\t\t\t\t\t\t\t\t\t\t<Reason />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/reason/new\">\n\t\t\t\t\t\t\t\t\t\t\t<AddReason />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path={`/reason/:reasonId`}>\n\t\t\t\t\t\t\t\t\t\t\t<EditReason />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/reporting\">\n\t\t\t\t\t\t\t\t\t\t\t<Reporting />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path={`/reporting/:reportingId`}>\n\t\t\t\t\t\t\t\t\t\t\t<EditReporting />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/option\">\n\t\t\t\t\t\t\t\t\t\t\t<Option />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path=\"/settings\">\n\t\t\t\t\t\t\t\t\t\t\t<Settings\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentTheme={currentTheme}\n\t\t\t\t\t\t\t\t\t\t\t\tsetCurrentTheme={setCurrentTheme}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/challenge\">\n\t\t\t\t\t\t\t\t\t\t\t<Challenge />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/challenge/new\">\n\t\t\t\t\t\t\t\t\t\t\t<AddChallenge />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path={`/challenge/:challengeId`}>\n\t\t\t\t\t\t\t\t\t\t\t<EditChallenge />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/video\">\n\t\t\t\t\t\t\t\t\t\t\t<Video />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path={`/video/:videoId`}>\n\t\t\t\t\t\t\t\t\t\t\t<EditVideo />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/user\">\n\t\t\t\t\t\t\t\t\t\t\t<User />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path={`/user/:userId`}>\n\t\t\t\t\t\t\t\t\t\t\t<EditUser />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Router>\n\t\t\t\t\t\t</DataProvider>\n\t\t\t\t\t</Provider>\n\t\t\t\t</ThemeProvider>\n\t\t\t</MuiPickersUtilsProvider>\n\t\t</>\n\t);\n}\n","/Users/zincchuang/Documents/boogizfront/src/serviceWorker.js",[],"/Users/zincchuang/Documents/boogizfront/src/SignIn.js",["661","662"],"/Users/zincchuang/Documents/boogizfront/src/theme.js",["663"],"import React, { useState } from \"react\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { blue, blueGrey } from \"@material-ui/core/colors\";\n\nconst defaultTheme = {\n  palette: {\n    primary: blue,\n    secondary: blueGrey, //ss,\n    //type: \"dark\",\n  },\n  typography: {\n    fontFamily: \"'Open Sans', Roboto;\",\n  },\n  status: {\n    danger: \"orange\",\n  },\n};\n\nexport function useTheme() {\n  const [currentTheme, setCurrentTheme] = useState({\n    palette: {\n      primary: {\n        main: '#78909c'\n      },\n      secondary: blueGrey,\n    },\n    overrides: {\n      MuiListItemIcon: {\n        root: {\n          color: '#E6E6E6',\n        },\n      },\n      MuiListItem: {\n        root: {\n          '&$selected, &$selected:hover': {\n            backgroundColor: '#6ad1df',\n            color: '#FFFFFF',\n          }\n        },\n        button: {\n          color: '#E6E6E6',\n        },\n      },\n      MuiOutlinedInput: {\n        root: {\n          borderRadius: 0\n        },\n        input: {\n          padding: '12px 10px'\n        }\n      },\n      MuiContainer: {\n        root: {\n          padding: '0px !important'\n        }\n      },\n      MuiButton: {\n        root: {\n          borderRadius: '2px !important',\n          boxShadow: 'none !important',\n        },\n        containedPrimary: {\n          color: '#FFFFFF'\n        }\n      },\n      MuiAutocomplete: {\n        root: {\n          display: 'flex',\n        },\n        inputRoot: {\n          paddingTop: '5px !important',\n          paddingBottom: '5px !important',\n        }\n      },\n      MuiMenuItem: {\n        root: {\n          color: '#4D4D4D'\n        }\n      }\n    },\n  });\n  const muiTheme = createMuiTheme({\n    ...defaultTheme,\n    ...currentTheme,\n  });\n  return [muiTheme, setCurrentTheme];\n}\n","/Users/zincchuang/Documents/boogizfront/src/useToken.js",[],"/Users/zincchuang/Documents/boogizfront/src/Home/Home.js",["664"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchAnalytic } from '../API/Analytic/fetchAnalytic';\nimport Content from \"../Dashboard/Content\";\nimport SummaryCard from \"../Components/Card/SummaryCard\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from '@material-ui/core/Grid';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://react.school\">\n        Boogiz\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  statistic: {\n    \"& .heading\": {\n      textTransform: \"uppercase\",\n      fontSize: \"1.2rem\",\n      fontWeight: \"700\",\n      color: \"#989898\",\n      fontFamily: \"Roboto\"\n    },\n    \"& .count\": {\n      color: \"#5ebaca\",\n      ontFamily: \"Arial\"\n    }\n  }\n}));\n\nexport function Home() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [totalUser, setTotalUser] = useState(0);\n  const [totalPost, setTotalPost] = useState(0);\n  const [totalLike, setTotalLike] = useState(0);\n\n  useEffect(() => {\n    dispatch(fetchAnalytic())\n      .then((result) => {\n        setTotalUser(result.totalUser);\n        setTotalPost(result.totalPost);\n        setTotalLike(result.totalLike);\n      });\n\n  }, [dispatch]);\n\n  return (\n    <Content>\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={4}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.statistic}>\n                  <div className=\"heading\">Total Users</div>\n                  <div className=\"count\">{totalUser}</div>\n                </div>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={4}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.statistic}>\n                  <div className=\"heading\">Total Posts</div>\n                  <div className=\"count\">{totalPost}</div>\n                </div>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={4}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.statistic}>\n                  <div className=\"heading\">Total Likes</div>\n                  <div className=\"count\">{totalLike}</div>\n                </div>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography\n          variant=\"subtitle1\"\n          align=\"center\"\n          color=\"textSecondary\"\n          component=\"p\"\n        >\n          Footer Content\n        </Typography>\n        <Copyright />\n      </footer>\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/AppBarAndDrawer/AppBarAndDrawer.js",["665","666","667","668"],"import React from \"react\";\nimport { Link as RouterLink, useLocation } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\nimport Badge from \"@material-ui/core/Badge\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport PropTypes from \"prop-types\";\n\nexport const drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  logo: {\n    color: \"white\",\n    textDecoration: \"none\",\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      backgroundColor: `#F4F5F7`,\n      boxShadow: 'none !important',\n      borderBottom: 'solid 1px #d7ddde'\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n    backgroundColor: `#2b333e`\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  active: {\n    backgroundColor: '#6ad1df'\n  },\n}));\n\nfunction ResponsiveDrawer(props) {\n  const { container, setCurrentTheme, currentTheme, unsetToken } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const { pathname } = useLocation();\n  const isHome = false; // pathname === \"/\";\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  /* Modifying the source code from the template example to use the react router pathname hook to set\n  selected prop and to use the react router component prop */\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {[\n          { text: \"Home\", icon: \"home\" },\n          { text: \"User\", icon: \"groups\" },\n          { text: \"Video\", icon: \"ondemand_video\" },\n          { text: \"Music\", icon: \"library_music\" },\n          { text: \"Genre\", icon: \"music_note\" },\n          { text: \"Dance Genre\", icon: \"music_video\" },\n          { text: \"Dance Move\", icon: \"skateboarding\" },\n          { text: \"Challenge\", icon: \"auto_awesome\" },\n          { text: \"Reason\", icon: \"outlined_flag\" },\n          { text: \"Reporting\", icon: \"report\" },\n          { text: \"Option\", icon: \"settings\" },\n        ].map(({ text, icon }, index) => (\n          <ListItem\n            component={RouterLink}\n            selected={pathname.includes(`/${text.replace(' ', '_').toLowerCase()}`)}\n            to={`/${text.replace(' ', '_').toLowerCase()}`}\n            button\n            key={text}\n          >\n            <ListItemIcon>\n              <Icon>{icon}</Icon>\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n        <ListItem\n          button\n          onClick={unsetToken}\n        >\n          <ListItemIcon>\n            <Icon>logout</Icon>\n          </ListItemIcon>\n          <ListItemText primary='Logout' />\n        </ListItem>\n      </List>\n      <Divider />\n    </div>\n  );\n\n  return (\n    <MuiThemeProvider theme={currentTheme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <div\n          style={{\n            height: \"64px\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"cover\",\n            filter: \"contrast(75%)\",\n            position: \"absolute\",\n            top: \"0px\",\n            width: \"100%\",\n            zIndex: -2,\n          }}\n        />\n        <AppBar position=\"sticky\" className={isHome ? \"\" : classes.appBar}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n              className={classes.menuButton}\n            >\n              <MenuIcon />\n            </IconButton>\n\n            <div style={{ flexGrow: 1 }}></div>\n\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"end\"\n              onClick={handleDrawerToggle}\n            >\n              <Avatar src=\"/img/driver.png\" />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        {isHome && !mobileOpen ? (\n          <div />\n        ) : (\n          <nav aria-label=\"mailbox folders\">\n            {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n            <Hidden smUp implementation=\"css\">\n              <Drawer\n                container={container}\n                variant=\"temporary\"\n                anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                open={mobileOpen}\n                onClose={handleDrawerToggle}\n                classes={{\n                  paper: classes.drawerPaper,\n                }}\n                ModalProps={{\n                  keepMounted: true, // Better open performance on mobile.\n                }}\n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n            <Hidden xsDown implementation=\"css\">\n              <Drawer\n                classes={{\n                  paper: classes.drawerPaper,\n                }}\n                variant=\"permanent\"\n                open={isHome}\n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n          </nav>\n        )}\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nResponsiveDrawer.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  container: PropTypes.instanceOf(\n    typeof Element === \"undefined\" ? Object : Element\n  ),\n};\n\nexport default ResponsiveDrawer;\n","/Users/zincchuang/Documents/boogizfront/src/Providers/DataProvider.js",["669","670"],"import React, { useState, useEffect } from \"react\";\nimport { createContext } from \"react\";\nimport moment from \"moment\";\n\nexport const DataContext = createContext();\n\nexport const currentDay = moment();\n\nlet defaultData = {};\n\nlet current = 0;\n\nfunction addRandomExpense(data, setData) {\n  return function () {\n    const newDate = currentDay.add(1, \"days\").valueOf();\n    const newMoney =\n      Math.floor(Math.random() * 3000 - 1000) -\n      Math.floor(Math.random() * 100) / 100;\n    current = newMoney;\n    const newData = {\n      id: Math.floor(Math.random() * 1000),\n      date: newDate,\n      name: \"Added Random\",\n      shipTo: \"Location\",\n      paymentMethod: \"Payment\",\n      amount: newMoney,\n    };\n    const finalData = {\n      ...data,\n      [newDate]: newData,\n    };\n    setData(finalData);\n  };\n}\n\nfor (var i = 0; i < 12; i++) {\n  addRandomExpense(defaultData, (newData) => {\n    defaultData = newData;\n  })();\n}\n\nexport function DataProvider({ children }) {\n  const [data, setData] = useState(defaultData);\n\n  useEffect(() => {}, []);\n  return (\n    <DataContext.Provider\n      value={{\n        data,\n        setData,\n        addRandomExpense: addRandomExpense(data, setData),\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Settings/Settings.js",["671"],"import React from \"react\";\nimport Content from \"../Dashboard/Content\";\nimport Typography from \"@material-ui/core/Typography\";\nimport PalettePicker from \"../Theme/PalettePicker\";\n\nexport default function ({ currentTheme, setCurrentTheme }) {\n  return (\n    <Content>\n      <Typography variant=\"h3\"> Settings </Typography>\n      <Typography variant=\"h6\"> Theme Color </Typography>\n      <PalettePicker\n        currentTheme={currentTheme}\n        setCurrentTheme={setCurrentTheme}\n      />\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Theme/PalettePicker.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/Breadcrumbs/Breadcrumbs.js",[],["672","673"],"/Users/zincchuang/Documents/boogizfront/src/Components/Switches/Switches.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/Slider/Slider.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/TextField/TextField.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/Select/Select.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/RadioButtons/RadioButton.js",["674"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  formControl: {\r\n    margin: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nexport default function RadioButtonsGroup() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(\"female\");\r\n\r\n  const handleChange = event => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Gender</FormLabel>\r\n        <RadioGroup\r\n          aria-label=\"gender\"\r\n          name=\"gender1\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        >\r\n          <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n          <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n        </RadioGroup>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","/Users/zincchuang/Documents/boogizfront/src/Components/Checkbox/Checkbox.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/ButtonGroup/ButtonGroup.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/FloatingButton/FloatingButton.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/Buttons/Buttons.js",[],"/Users/zincchuang/Documents/boogizfront/src/Theme/colors.js",["675"],"import {\r\n  red,\r\n  pink,\r\n  purple,\r\n  deepPurple,\r\n  indigo,\r\n  blue,\r\n  lightBlue,\r\n  cyan,\r\n  teal,\r\n  green,\r\n  lightGreen,\r\n  lime,\r\n  yellow,\r\n  amber,\r\n  deepOrange,\r\n  brown,\r\n  grey,\r\n  blueGrey,\r\n} from \"@material-ui/core/colors\";\r\n\r\nexport default [\r\n  red,\r\n  pink,\r\n  purple,\r\n  deepPurple,\r\n  indigo,\r\n  blue,\r\n  lightBlue,\r\n  cyan,\r\n  teal,\r\n  green,\r\n  lightGreen,\r\n  lime,\r\n  yellow,\r\n  amber,\r\n  deepOrange,\r\n  brown,\r\n  grey,\r\n  blueGrey,\r\n];\r\n","/Users/zincchuang/Documents/boogizfront/src/helper.js",["676","677"],"import { useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { invalidateToken } from './useToken';\n\nexport const authHeader = () => {\n  const tokenString = localStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  const token = userToken?.accessToken;\n\n  return { headers: { \"content-type\": \"application/json\", 'Authorization': `Basic ${token}` } };\n}\n\nexport const authFormDataHeader = () => {\n  const tokenString = localStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  const token = userToken?.accessToken;\n\n  return { headers: { \"content-type\": \"multipart/form-data\", 'Authorization': `Basic ${token}` } };\n}\n\nexport const handleErrorResponse = (error) => {\n  if (error) {\n    if (error.response) {\n      if (parseInt(error.response.status) === 401 || parseInt(error.response.status) === 403) {\n        invalidateToken();\n      }\n    }\n\n    return error.message;\n  }\n}","/Users/zincchuang/Documents/boogizfront/src/Dashboard/Dashboard.js",[],"/Users/zincchuang/Documents/boogizfront/src/Dashboard/Chart.js",[],"/Users/zincchuang/Documents/boogizfront/src/Dashboard/ExpensesTable.js",[],"/Users/zincchuang/Documents/boogizfront/src/Dashboard/TotalCard.js",[],"/Users/zincchuang/Documents/boogizfront/src/Dashboard/Tools.js",[],"/Users/zincchuang/Documents/boogizfront/src/Dashboard/CovidWarning.js",[],"/Users/zincchuang/Documents/boogizfront/src/Dashboard/Content.js",[],"/Users/zincchuang/Documents/boogizfront/src/Dashboard/Title.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/music/updateMusic.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Music/updateMusic.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Music/fetchSingleMusic.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Music/createMusic.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Music/fetchMusics.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Music/deleteMusic.js",["678"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/Music/Redux/musicSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteMusic = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async musicId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/music/${musicId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(handleErrorResponse(error)));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/Components/Buttons/BackButton.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/Card/SummaryCard.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Genre/createGenre.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Genre/deleteGenre.js",["679"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/Genre/Redux/genreSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteGenre = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async genreId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/genre/${genreId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(handleErrorResponse(error)));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/API/DanceGenre/fetchDanceGenre.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Genre/fetchGenre.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/DanceGenre/deleteDanceGenre.js",["680"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/DanceGenre/Redux/danceGenreSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteDanceGenre = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async genreId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/dance_genre/${genreId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(handleErrorResponse(error)));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/API/DanceGenre/createDanceGenre.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/Dialog/DeleteDialog.js",["681"],"import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport default function DeleteDialog({ ids, label, render, onSave }) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSave = () => {\n    onSave && onSave();\n    handleClose();\n  };\n\n  return (\n    <div>\n      {render(handleClickOpen)}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Delete {label}{ids.length > 1 && \"s\"}</DialogTitle>\n        {ids.length == 1 &&\n          <DialogContent>\n            Are you sure you want to delete this {label}?\n        </DialogContent>\n        }\n        {ids.length > 1 &&\n          <DialogContent>\n            Are you sure you want to delete {ids.length} {label}\n            {ids.length > 1 && \"s\"}?\n        </DialogContent>\n        }\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSave} color=\"primary\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/fetchDanceMove.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/fetchSingleDanceMove.js",[],"/Users/zincchuang/Documents/boogizfront/src/Components/Autocomplete/Autocomplete.js",["682"],"/* eslint-disable no-use-before-define */\nimport React, { useEffect, useState } from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(3),\n    },\n  },\n}));\n\nconst Tags = React.forwardRef((props, ref) => {\n  const classes = useStyles();\n  const rows = props.list;\n  const label = props.label;\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (rows.length > 0 && typeof props.value !== 'undefined') {\n      setData(props.value.map(key => rows[rows.findIndex((item) => item._id === key._id)]));\n    }\n  }, [rows, props.value]);\n\n  const changeHandler = (event, newValue) => {\n    setData(newValue);\n    props.onValueChange && props.onValueChange(event, newValue);\n  };\n\n  class Dropdown extends React.Component {\n    constructor(props) {\n      super(props)\n    }\n    render() {\n      return (\n        <div className={classes.root}>\n          <Autocomplete\n            multiple\n            id=\"tags-outlined\"\n            options={rows}\n            getOptionLabel={(option) => option.name}\n            defaultValue={[]}\n            onChange={changeHandler}\n            value={data}\n            filterSelectedOptions\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                error={props.error}\n                inputRef={ref}\n                variant=\"outlined\"\n                placeholder={'Pick ' + label.toLowerCase() + 's'}\n              />\n            )}\n          />\n        </div >\n      )\n    }\n  }\n  return <Dropdown />\n});\n\nexport default Tags;\n","/Users/zincchuang/Documents/boogizfront/src/Components/FileUpload/FileUpload.js",["683","684"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\nconst useStyles = makeStyles((theme) => ({\n  hiddenInput: {\n    display: 'none',\n  },\n  uploadContainer: {\n    border: '1px solid',\n    borderStyle: 'dashed',\n    borderRadius: '5px',\n    padding: '20px',\n    color: \"#707070\",\n  },\n  uploadContent: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    '& span': {\n      fontSize: '14px',\n      marginTop: '5px'\n    }\n  }\n}));\n\nconst Select = React.forwardRef((props, ref) => {\n  const accept = props.accept;\n\n  const changeHandler = (event) => {\n    props.onFileChange && props.onFileChange(event.target.files[0]);\n  };\n\n  const classes = useStyles();\n\n  class Counter extends React.Component {\n    constructor(props) {\n      super(props)\n    }\n    render() {\n      return (\n        <div>\n          <input\n            id={props.name}\n            type=\"file\"\n            name={props.name}\n            className={classes.hiddenInput}\n            accept={accept}\n            onChange={changeHandler}\n          />\n          <input className={classes.hiddenInput} name={props.name} ref={ref} onChange={props.onChange} onBlur={props.onBlur} />\n          <label htmlFor={props.name}>\n            <div className={classes.uploadContainer}>\n              <div className={classes.uploadContent}>\n                <CloudUploadIcon style={{ fontSize: 50 }} />\n                <span>Browse files to start upload</span>\n              </div>\n            </div>\n          </label>\n        </div>\n      )\n    }\n  }\n  return <Counter />\n});\n\nexport default Select;\n","/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/updateDanceMove.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/createDanceMove.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/DanceMove/deleteDanceMove.js",["685"],"/Users/zincchuang/Documents/boogizfront/src/Pages/DanceMove/Redux/danceMoveSlice.js",["686"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const danceMoveSlice = createSlice({\n  name: \"danceMove\",\n  initialState: {\n    list: [],\n    loading: false,\n    updating: false,\n    updated: false,\n    error: false,\n    selected: {},\n    total: 0,\n    page: 1,\n    pageLoaded: []\n  },\n  reducers: {\n    add: (state, action) => {\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter((item) => {\n        return !removedIds.includes(item._id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map((item) => {\n        if (item._id === action.payload._id) {\n          return action.payload;\n        }\n        return item;\n      });\n    },\n    fetch: (state, action) => {\n      if (state.list.length === 0) {\n        for (let i = 0; i < parseFloat(action.payload.data['totalDanceMoves']); i++) {\n          state.list.push({});\n        }\n        state.list = [...state.list];\n        state.total = parseFloat(action.payload.data['totalDanceMoves']);\n      }\n      const offset = parseFloat(action.payload.offset) - 1;\n      const arrayList = [...state.list];\n\n      action.payload.data['danceMoves'].map((item, index) => {\n        arrayList[(offset * 25) + (index)] = item;\n      });\n\n      state.pageLoaded.push(offset);\n      state.page = offset;\n      state.list = [...arrayList];\n    },\n    get: (state, action) => {\n      state.selected = { ...state.selected, ...action.payload };\n    },\n    throwError: (state, action) => {\n      state.error = action.payload;\n    },\n    setUpdating: (state, action) => {\n      state.updating = action.payload;\n    },\n    setUpdated: (state, action) => {\n      state.updated = action.payload;\n    },\n    changePage: (state, action) => {\n      state.page = action.payload;\n    },\n    clearList: (state, action) => {\n      state.list = [];\n    }\n  },\n});\n\nexport const { add, remove, update, fetch, get, throwError, setUpdating, setUpdated, changePage, clearList } = danceMoveSlice.actions;\n\nexport const selectDanceMove = (state) => state.danceMove.list;\nexport const selectedDanceMove = (state) => state.danceMove.selected;\nexport const selectTotalDanceMove = (state) => state.danceMove.total;\nexport const selectCurrentPage = (state) => state.danceMove.page;\nexport const selectPageLoaded = (state) => state.danceMove.pageLoaded;\nexport const selectLoading = (state) => state.danceMove.loading;\nexport const selectError = (state) => state.danceMove.error;\nexport const selectUpdating = (state) => state.danceMove.updating;\nexport const selectUpdated = (state) => state.danceMove.updated;\n\nexport default danceMoveSlice.reducer;\n","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceGenre/Redux/danceGenre.js",["687","688","689","690","691","692"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectDanceGenre, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated } from './danceGenreSlice';\nimport { createDanceGenre } from \"../../../API/DanceGenre/createDanceGenre\";\nimport { fetchDanceGenre } from '../../../API/DanceGenre/fetchDanceGenre';\nimport { deleteDanceGenre } from '../../../API/DanceGenre/deleteDanceGenre';\nimport { updateDanceGenre } from '../../../API/DanceGenre/updateDanceGenre';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\nimport DanceGenreDialog from \"../../DanceGenre/DanceGenreDialog\";\nimport EditDanceGenreDialog from \"../../DanceGenre/EditDanceGenreDialog\";\n\nimport useToken from '../../../useToken';\nfunction Alert(props) {\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n\tif (b[orderBy] < a[orderBy]) {\n\t\treturn -1;\n\t}\n\tif (b[orderBy] > a[orderBy]) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nfunction getComparator(order, orderBy) {\n\treturn order === \"desc\"\n\t\t? (a, b) => descendingComparator(a, b, orderBy)\n\t\t: (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n\tconst stabilizedThis = array.map((el, index) => [el, index]);\n\tstabilizedThis.sort((a, b) => {\n\t\tconst order = comparator(a[0], b[0]);\n\t\tif (order !== 0) return order;\n\t\treturn a[1] - b[1];\n\t});\n\treturn stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n\tvar params;\n\tvar query = search;\n\tvar regex = /[?&;](.+?)=([^&;]+)/g;\n\tvar match;\n\n\tparams = {};\n\n\tif (query) {\n\t\twhile (match = regex.exec(query)) {\n\t\t\tparams[match[1]] = decodeURIComponent(match[2]);\n\t\t}\n\t}\n\n\treturn params;\n};\n\nconst headCells = [\n\t{\n\t\tid: \"name\",\n\t\tnumeric: false,\n\t\tdisablePadding: false,\n\t\tlabel: \"Genre\",\n\t\twidth: 100\n\t},\n\t{\n\t\tid: \"key\",\n\t\tnumeric: false,\n\t\tdisablePadding: false,\n\t\tlabel: \"Key\",\n\t\twidth: 320\n\t},\n];\n\nfunction EnhancedTableHead(props) {\n\tconst {\n\t\tclasses,\n\t\tonSelectAllClick,\n\t\torder,\n\t\torderBy,\n\t\tnumSelected,\n\t\trowCount,\n\t\tonRequestSort,\n\t} = props;\n\tconst createSortHandler = (property) => (event) => {\n\t\tonRequestSort(event, property);\n\t};\n\n\treturn (\n\t\t<TableHead>\n\t\t\t<TableRow>\n\t\t\t\t<TableCell style={{ width: '0%' }} padding=\"checkbox\">\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tchecked={rowCount > 0 && numSelected === rowCount}\n\t\t\t\t\t\tonChange={onSelectAllClick}\n\t\t\t\t\t\tinputProps={{ \"aria-label\": \"select all desserts\" }}\n\t\t\t\t\t/>\n\t\t\t\t</TableCell>\n\t\t\t\t{headCells.map((headCell) => (\n\t\t\t\t\t<TableCell\n\t\t\t\t\t\tkey={headCell.id}\n\t\t\t\t\t\talign={headCell.numeric ? \"right\" : \"left\"}\n\t\t\t\t\t\tpadding={headCell.disablePadding ? \"none\" : \"default\"}\n\t\t\t\t\t\tsortDirection={orderBy === headCell.id ? order : false}\n\t\t\t\t\t\twidth={headCell.width ? headCell.width : null}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TableSortLabel\n\t\t\t\t\t\t\tactive={orderBy === headCell.id}\n\t\t\t\t\t\t\tdirection={orderBy === headCell.id ? order : \"asc\"}\n\t\t\t\t\t\t\tonClick={createSortHandler(headCell.id)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{headCell.label}\n\t\t\t\t\t\t\t{orderBy === headCell.id ? (\n\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\n\t\t\t\t\t\t\t\t\t{order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</TableSortLabel>\n\t\t\t\t\t</TableCell>\n\t\t\t\t))}\n\t\t\t</TableRow>\n\t\t</TableHead>\n\t);\n}\n\nEnhancedTableHead.propTypes = {\n\tclasses: PropTypes.object.isRequired,\n\tnumSelected: PropTypes.number.isRequired,\n\tonRequestSort: PropTypes.func.isRequired,\n\tonSelectAllClick: PropTypes.func.isRequired,\n\torder: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n\torderBy: PropTypes.string.isRequired,\n\trowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\twidth: \"100%\",\n\t},\n\tpaper: {\n\t\twidth: \"100%\",\n\t\tmarginBottom: theme.spacing(2),\n\t},\n\ttable: {\n\t\tminWidth: 750,\n\t},\n\tvisuallyHidden: {\n\t\tborder: 0,\n\t\tclip: \"rect(0 0 0 0)\",\n\t\theight: 1,\n\t\tmargin: -1,\n\t\toverflow: \"hidden\",\n\t\tpadding: 0,\n\t\tposition: \"absolute\",\n\t\ttop: 20,\n\t\twidth: 1,\n\t},\n\tgrow: {\n\t\tflexGrow: 1,\n\t},\n\tdeleteButton: {\n\t\tmarginLeft: theme.spacing(1),\n\t},\n\tspacer: {\n\t\tflexGrow: \"1\",\n\t},\n}));\n\nexport default function DanceGenre(props) {\n\tconst classes = useStyles();\n\tconst sharedClasses = useSharedClasses();\n\n\tconst [order, setOrder] = React.useState(\"asc\");\n\tconst [orderBy, setOrderBy] = React.useState(\"\");\n\tconst [selected, setSelected] = React.useState([]);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(25);\n\tconst [message, setMessage] = useState();\n\tconst [action, setAction] = useState();\n\tconst rows = useSelector(selectDanceGenre);\n\tconst loading = useSelector(selectLoading);\n\tconst updating = useSelector(selectUpdating);\n\tconst updated = useSelector(selectUpdated);\n\tconst error = useSelector(selectError);\n\tconst history = useHistory();\n\n\t// todo with snacks\n\tconst [snackOpen, setSnackOpen] = React.useState(false);\n\tconst dispatch = useDispatch();\n\tconst { token } = useToken();\n\n\tuseEffect(() => {\n\t\tif (rows.length === 0) {\n\t\t\tdispatch(fetchDanceGenre());\n\t\t} else {\n\t\t\tredirectPage(0, false);\n\t\t}\n\t}, [dispatch]);\n\n\tuseEffect(() => {\n\t\treturn history.listen((location) => {\n\t\t\tif (location.pathname.indexOf('dance_genre') > -1) {\n\t\t\t\tif (location.search === '') {\n\t\t\t\t\tredirectPage(0, false);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}, [history]);\n\n\tuseEffect(() => {\n\t\tconst query = getParamValue(history.location.search);\n\t\tlet pageNum = 1;\n\t\tlet maxPage = 1;\n\n\t\tif (typeof query.page !== 'undefined') {\n\t\t\tpageNum = parseInt(query.page);\n\t\t\tmaxPage = Math.floor(rows.length / rowsPerPage);\n\n\t\t\tif (typeof query.deleted !== 'undefined') {\n\t\t\t\tif (pageNum > maxPage && maxPage > 0) {\n\t\t\t\t\twhile (pageNum > maxPage) {\n\t\t\t\t\t\tpageNum -= 1;\n\n\t\t\t\t\t\tif (pageNum === 0) {\n\t\t\t\t\t\t\tpageNum = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (maxPage > 0) {\n\t\t\t\tsetPage(pageNum - 1);\n\t\t\t}\n\t\t}\n\t\tif (typeof query.deleted !== 'undefined') {\n\t\t\tsetMessage('Dance genre deleted');\n\t\t\tsetSnackOpen(true);\n\n\t\t\thistory.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n\t\t}\n\t}, [history.location.search]);\n\n\tuseEffect(() => {\n\t\tif (!updating) {\n\t\t\tif (updated) {\n\t\t\t\tif (action == 'delete') {\n\t\t\t\t\tsetMessage(\n\t\t\t\t\t\t`${selected.length} dance genre${selected.length > 1 ? \"s\" : \"\"\n\t\t\t\t\t\t} deleted`\n\t\t\t\t\t);\n\t\t\t\t\tsetSelected([]);\n\t\t\t\t}\n\t\t\t\tsetSnackOpen(true);\n\t\t\t\tdispatch(setUpdated(false));\n\t\t\t}\n\t\t} else {\n\t\t\tif (error) {\n\t\t\t\tsetMessage(error);\n\t\t\t\tsetSnackOpen(true);\n\t\t\t}\n\t\t\tdispatch(setUpdating(false));\n\t\t}\n\t}, [updating, updated]);\n\n\tif (loading) {\n\t\treturn (\n\t\t\t<Content>\n\t\t\t\t<CircularProgress />\n\t\t\t</Content>\n\t\t);\n\t}\n\n\tconst handleRequestSort = (event, property) => {\n\t\tconst isAsc = orderBy === property && order === \"asc\";\n\t\tsetOrder(isAsc ? \"desc\" : \"asc\");\n\t\tsetOrderBy(property);\n\t};\n\n\tconst handleSelectAllClick = (event) => {\n\t\tif (event.target.checked) {\n\t\t\tconst newSelecteds = rows.map((n) => n._id);\n\t\t\tsetSelected(newSelecteds);\n\t\t\treturn;\n\t\t}\n\t\tsetSelected([]);\n\t};\n\n\tconst selectTableRow = (id) => {\n\t\tconst selectedIndex = selected.indexOf(id);\n\t\tlet newSelected = [];\n\n\t\tif (selectedIndex === -1) {\n\t\t\tnewSelected = newSelected.concat(selected, id);\n\t\t} else if (selectedIndex === 0) {\n\t\t\tnewSelected = newSelected.concat(selected.slice(1));\n\t\t} else if (selectedIndex === selected.length - 1) {\n\t\t\tnewSelected = newSelected.concat(selected.slice(0, -1));\n\t\t} else if (selectedIndex > 0) {\n\t\t\tnewSelected = newSelected.concat(\n\t\t\t\tselected.slice(0, selectedIndex),\n\t\t\t\tselected.slice(selectedIndex + 1)\n\t\t\t);\n\t\t}\n\t\tsetSelected(newSelected);\n\t};\n\n\tconst handleChangePage = (event, pageNum) => {\n\t\tredirectPage(pageNum, true);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(parseInt(event.target.value, 10));\n\t};\n\n\tconst isSelected = (id) => selected.indexOf(id) !== -1;\n\tconst snackClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\t\tsetSnackOpen(false);\n\t};\n\n\tconst redirectPage = (pageNum, changeRoute) => {\n\t\tsetPage(pageNum);\n\n\t\tlocalStorage.setItem('page', (pageNum + 1));\n\t\tif (changeRoute) {\n\t\t\thistory.replace({ pathname: '/dance_genre/', search: `?page=${(pageNum + 1)}` });\n\t\t}\n\t}\n\n\treturn (\n\t\t<Content>\n\t\t\t<Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n\t\t\t\t<Alert onClose={snackClose} severity=\"success\">\n\t\t\t\t\t{message}\n\t\t\t\t</Alert>\n\t\t\t</Snackbar>\n\t\t\t<div className={sharedClasses.headerContainer}>\n\t\t\t\t<div className={sharedClasses.header}>\n\t\t\t\t\t<Typography variant={\"h5\"}>{'Dance Genres'}</Typography>\n\t\t\t\t\t<div className={classes.spacer} />\n\t\t\t\t\t<div className={sharedClasses.actionGroup}>\n\t\t\t\t\t\t<DanceGenreDialog\n\t\t\t\t\t\t\tedge=\"end\"\n\t\t\t\t\t\t\tonSave={(data) => {\n\t\t\t\t\t\t\t\tdispatch(createDanceGenre(data));\n\t\t\t\t\t\t\t\tsetMessage('New dance genre added');\n\t\t\t\t\t\t\t\tsetSnackOpen(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\trender={(open) => (\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tedge=\"end\"\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\tstartIcon={<AddIcon />}\n\t\t\t\t\t\t\t\t\tonClick={open}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tNew Genre\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{selected.length > 0 && (\n\t\t\t\t\t\t\t<DeleteDialog\n\t\t\t\t\t\t\t\tids={selected}\n\t\t\t\t\t\t\t\tlabel=\"dance genre\"\n\t\t\t\t\t\t\t\tonSave={() => {\n\t\t\t\t\t\t\t\t\tsetAction('delete');\n\t\t\t\t\t\t\t\t\tdispatch(deleteDanceGenre({ ids: selected, token }));\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\trender={(open) => (\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tclassName={classes.deleteButton}\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\tstartIcon={<DeleteIcon />}\n\t\t\t\t\t\t\t\t\t\tonClick={open}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t\t\tDelete {selected.length} selected\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<SummaryCard\n\t\t\t\tvalue={\n\t\t\t\t\t<>\n\t\t\t\t\t\t<TableContainer>\n\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\tclassName={classes.table}\n\t\t\t\t\t\t\t\taria-labelledby=\"tableTitle\"\n\t\t\t\t\t\t\t\tsize={\"small\"}\n\t\t\t\t\t\t\t\taria-label=\"enhanced table\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<EnhancedTableHead\n\t\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\t\tnumSelected={selected.length}\n\t\t\t\t\t\t\t\t\torder={order}\n\t\t\t\t\t\t\t\t\torderBy={orderBy}\n\t\t\t\t\t\t\t\t\tonSelectAllClick={handleSelectAllClick}\n\t\t\t\t\t\t\t\t\tonRequestSort={handleRequestSort}\n\t\t\t\t\t\t\t\t\trowCount={rows.length}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t\t{stableSort(rows, getComparator(order, orderBy))\n\t\t\t\t\t\t\t\t\t\t.slice(\n\t\t\t\t\t\t\t\t\t\t\tpage * rowsPerPage,\n\t\t\t\t\t\t\t\t\t\t\tpage * rowsPerPage + rowsPerPage\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.map((row, index) => {\n\t\t\t\t\t\t\t\t\t\t\tconst isItemSelected = isSelected(row._id);\n\t\t\t\t\t\t\t\t\t\t\tconst labelId = `enhanced-table-checkbox-${index}`;\n\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<EditDanceGenreDialog\n\t\t\t\t\t\t\t\t\t\t\t\t\tedge=\"end\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`dance-genre-${row._id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata={row}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonSave={(data) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(updateDanceGenre(data));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetMessage('Dance genre updated');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSnackOpen(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\trender={(open) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-checked={isItemSelected}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target.type === \"checkbox\" ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target.className.indexOf(\"Checkbox\") > 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topen();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`person-${row._id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselected={isItemSelected}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: \"pointer\" }}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpadding=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectTableRow(row._id);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={isItemSelected}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ \"aria-labelledby\": labelId }}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectTableRow(row._id);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"td\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={labelId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope=\"row\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpadding=\"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"td\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={labelId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope=\"row\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpadding=\"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.key}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</TableContainer>\n\t\t\t\t\t\t<TablePagination\n\t\t\t\t\t\t\trowsPerPageOptions={[]}\n\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\tcount={rows.length}\n\t\t\t\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\t\t\t\tpage={page}\n\t\t\t\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t}\n\t\t\t/>\n\t\t</Content>\n\t);\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceGenre/Redux/danceGenreSlice.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Music/Redux/music.js",["693","694","695","696","697","698","699","700"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectMusic, selectTotalMusic, selectCurrentPage, selectPageLoaded, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated, changePage, clearList } from './musicSlice';\nimport { fetchMusics } from '../../../API/Music/fetchMusics';\nimport { deleteMusic } from '../../../API/Music/deleteMusic';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\n\nimport useToken from '../../../useToken';\nfunction Alert(props) {\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n\tif (b[orderBy] < a[orderBy]) {\n\t\treturn -1;\n\t}\n\tif (b[orderBy] > a[orderBy]) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nfunction getComparator(order, orderBy) {\n\treturn order === \"desc\"\n\t\t? (a, b) => descendingComparator(a, b, orderBy)\n\t\t: (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n\tlet stabilizedThis = [];\n\n\tfor (let index = 0; index < array.length; index++) {\n\t\tif (typeof array[index]['_id'] !== 'undefined') {\n\t\t\tstabilizedThis.push([array[index], index]);\n\t\t} else {\n\t\t\tstabilizedThis.push([{}, index]);\n\t\t}\n\t}\n\tstabilizedThis.sort((a, b) => {\n\t\tconst order = comparator(a[0], b[0]);\n\t\tif (order !== 0) return order;\n\t\treturn a[1] - b[1];\n\t});\n\treturn stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n\tvar params;\n\tvar query = search;\n\tvar regex = /[?&;](.+?)=([^&;]+)/g;\n\tvar match;\n\n\tparams = {};\n\n\tif (query) {\n\t\twhile (match = regex.exec(query)) {\n\t\t\tparams[match[1]] = decodeURIComponent(match[2]);\n\t\t}\n\t}\n\n\treturn params;\n};\n\nconst headCells = [\n\t{\n\t\tid: \"avatar\",\n\t\tnumeric: false,\n\t\tdisablePadding: true,\n\t\tlabel: \"\",\n\t\twidth: 70\n\t},\n\t{\n\t\tid: \"title\",\n\t\tnumeric: false,\n\t\tdisablePadding: true,\n\t\tlabel: \"Title\",\n\t\twidth: 320\n\t},\n\t{ id: \"singer\", numeric: false, disablePadding: false, label: \"Singer\" },\n\t{ id: \"genre\", numeric: true, disablePadding: false, label: \"Genre\" },\n];\n\nfunction EnhancedTableHead(props) {\n\tconst {\n\t\tclasses,\n\t\tonSelectAllClick,\n\t\torder,\n\t\torderBy,\n\t\tnumSelected,\n\t\trowCount,\n\t\tonRequestSort,\n\t} = props;\n\tconst createSortHandler = (property) => (event) => {\n\t\tonRequestSort(event, property);\n\t};\n\n\treturn (\n\t\t<TableHead>\n\t\t\t<TableRow>\n\t\t\t\t<TableCell padding=\"checkbox\">\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tchecked={rowCount > 0 && numSelected === rowCount}\n\t\t\t\t\t\tonChange={onSelectAllClick}\n\t\t\t\t\t\tinputProps={{ \"aria-label\": \"select all desserts\" }}\n\t\t\t\t\t/>\n\t\t\t\t</TableCell>\n\t\t\t\t{headCells.map((headCell) => (\n\t\t\t\t\t<TableCell\n\t\t\t\t\t\tkey={headCell.id}\n\t\t\t\t\t\talign={headCell.numeric ? \"right\" : \"left\"}\n\t\t\t\t\t\tpadding={headCell.disablePadding ? \"none\" : \"default\"}\n\t\t\t\t\t\tsortDirection={orderBy === headCell.id ? order : false}\n\t\t\t\t\t\twidth={headCell.width ? headCell.width : null}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TableSortLabel\n\t\t\t\t\t\t\tactive={orderBy === headCell.id}\n\t\t\t\t\t\t\tdirection={orderBy === headCell.id ? order : \"asc\"}\n\t\t\t\t\t\t\tonClick={createSortHandler(headCell.id)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{headCell.label}\n\t\t\t\t\t\t\t{orderBy === headCell.id ? (\n\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\n\t\t\t\t\t\t\t\t\t{order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</TableSortLabel>\n\t\t\t\t\t</TableCell>\n\t\t\t\t))}\n\t\t\t</TableRow>\n\t\t</TableHead>\n\t);\n}\n\nEnhancedTableHead.propTypes = {\n\tclasses: PropTypes.object.isRequired,\n\tnumSelected: PropTypes.number.isRequired,\n\tonRequestSort: PropTypes.func.isRequired,\n\tonSelectAllClick: PropTypes.func.isRequired,\n\torder: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n\torderBy: PropTypes.string.isRequired,\n\trowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\twidth: \"100%\",\n\t},\n\tpaper: {\n\t\twidth: \"100%\",\n\t\tmarginBottom: theme.spacing(2),\n\t},\n\ttable: {\n\t\tminWidth: 750,\n\t},\n\tvisuallyHidden: {\n\t\tborder: 0,\n\t\tclip: \"rect(0 0 0 0)\",\n\t\theight: 1,\n\t\tmargin: -1,\n\t\toverflow: \"hidden\",\n\t\tpadding: 0,\n\t\tposition: \"absolute\",\n\t\ttop: 20,\n\t\twidth: 1,\n\t},\n\tgrow: {\n\t\tflexGrow: 1,\n\t},\n\tdeleteButton: {\n\t\tmarginLeft: theme.spacing(1),\n\t},\n\tspacer: {\n\t\tflexGrow: \"1\",\n\t},\n}));\n\nexport default function Music(props) {\n\tconst { histories } = props\n\tconst classes = useStyles();\n\tconst sharedClasses = useSharedClasses();\n\n\tconst currentPage = useSelector(selectCurrentPage);\n\tconst pageLoaded = useSelector(selectPageLoaded);\n\tconst totalRecord = useSelector(selectTotalMusic);\n\tconst rows = useSelector(selectMusic);\n\tconst loading = useSelector(selectLoading);\n\tconst updating = useSelector(selectUpdating);\n\tconst updated = useSelector(selectUpdated);\n\tconst error = useSelector(selectError);\n\tconst history = useHistory();\n\n\tconst [order, setOrder] = React.useState(\"asc\");\n\tconst [orderBy, setOrderBy] = React.useState(\"\");\n\tconst [selected, setSelected] = React.useState([]);\n\tconst [message, setMessage] = useState();\n\tconst [action, setAction] = useState();\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(25);\n\tconst [page, setPage] = React.useState(0);\n\n\t// todo with snacks\n\tconst [snackOpen, setSnackOpen] = React.useState(false);\n\tconst dispatch = useDispatch();\n\tconst { token } = useToken();\n\n\tuseEffect(() => {\n\t\tconst query = getParamValue(history.location.search);\n\t\tlet offset = '';\n\n\t\tif (typeof query.page !== 'undefined') {\n\t\t\toffset = parseInt(query.page);\n\t\t}\n\t\tif (rows.length === 0) {\n\t\t\tdispatch(fetchMusics(offset));\n\t\t} else {\n\t\t\tif (offset !== '') {\n\t\t\t\tredirectPage((offset - 1), false);\n\t\t\t}\n\t\t}\n\t}, [dispatch, rows]);\n\n\tconsole.log(rows);\n\tuseEffect(() => {\n\t\treturn history.listen((location) => {\n\t\t\tif (location.pathname.indexOf('music') > -1) {\n\t\t\t\tif (location.search === '') {\n\t\t\t\t\tredirectPage(0, false);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}, [history]);\n\n\tuseEffect(() => {\n\t\tconst query = getParamValue(history.location.search);\n\t\tlet pageNum = 1;\n\t\tlet maxPage = 1;\n\n\t\tif (typeof query.page !== 'undefined') {\n\t\t\tpageNum = parseInt(query.page);\n\t\t\tmaxPage = Math.floor(rows.length / rowsPerPage);\n\n\t\t\tif (typeof query.deleted !== 'undefined') {\n\t\t\t\tif (pageNum > maxPage && maxPage > 0) {\n\t\t\t\t\twhile (pageNum > maxPage) {\n\t\t\t\t\t\tpageNum -= 1;\n\n\t\t\t\t\t\tif (pageNum === 0) {\n\t\t\t\t\t\t\tpageNum = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (maxPage > 0) {\n\t\t\t\tsetPage(pageNum - 1);\n\t\t\t}\n\t\t}\n\t\tif (typeof query.deleted !== 'undefined') {\n\t\t\tsetMessage('Music deleted');\n\t\t\tsetSnackOpen(true);\n\n\t\t\thistory.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n\n\t\t\tlet offset = '';\n\n\t\t\tif (typeof query.page !== 'undefined') {\n\t\t\t\toffset = parseInt(query.page);\n\t\t\t}\n\t\t\tdispatch(clearList());\n\t\t\tdispatch(fetchMusics(offset));\n\t\t}\n\t}, [history.location.search]);\n\n\tuseEffect(() => {\n\t\tif (!updating) {\n\t\t\tif (updated) {\n\t\t\t\tif (action == 'delete') {\n\t\t\t\t\tsetMessage(\n\t\t\t\t\t\t`${selected.length} Music${selected.length > 1 ? \"s\" : \"\"\n\t\t\t\t\t\t} Deleted`\n\t\t\t\t\t);\n\t\t\t\t\tsetSelected([]);\n\t\t\t\t}\n\t\t\t\tsetSnackOpen(true);\n\t\t\t\tdispatch(setUpdated(false));\n\t\t\t}\n\t\t} else {\n\t\t\tif (error) {\n\t\t\t\tsetMessage(error);\n\t\t\t\tsetSnackOpen(true);\n\t\t\t}\n\t\t\tdispatch(setUpdating(false));\n\t\t}\n\t}, [updating, updated]);\n\n\tif (loading) {\n\t\treturn (\n\t\t\t<Content>\n\t\t\t\t<CircularProgress />\n\t\t\t</Content>\n\t\t);\n\t}\n\n\tconst handleRequestSort = (event, property) => {\n\t\tconst isAsc = orderBy === property && order === \"asc\";\n\t\tsetOrder(isAsc ? \"desc\" : \"asc\");\n\t\tsetOrderBy(property);\n\t};\n\n\tconst handleSelectAllClick = (event) => {\n\t\tif (event.target.checked) {\n\t\t\tconst newSelecteds = rows.map((n) => n._id);\n\t\t\tsetSelected(newSelecteds);\n\t\t\treturn;\n\t\t}\n\t\tsetSelected([]);\n\t};\n\n\tconst selectTableRow = (id) => {\n\t\tconst selectedIndex = selected.indexOf(id);\n\t\tlet newSelected = [];\n\n\t\tif (selectedIndex === -1) {\n\t\t\tnewSelected = newSelected.concat(selected, id);\n\t\t} else if (selectedIndex === 0) {\n\t\t\tnewSelected = newSelected.concat(selected.slice(1));\n\t\t} else if (selectedIndex === selected.length - 1) {\n\t\t\tnewSelected = newSelected.concat(selected.slice(0, -1));\n\t\t} else if (selectedIndex > 0) {\n\t\t\tnewSelected = newSelected.concat(\n\t\t\t\tselected.slice(0, selectedIndex),\n\t\t\t\tselected.slice(selectedIndex + 1)\n\t\t\t);\n\t\t}\n\t\tsetSelected(newSelected);\n\t};\n\n\tconst handleChangePage = (event, pageNum) => {\n\t\tredirectPage(pageNum, true);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(parseInt(event.target.value, 10));\n\t};\n\n\tconst isSelected = (id) => selected.indexOf(id) !== -1;\n\tconst snackClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\t\tsetSnackOpen(false);\n\t};\n\n\tconst routeChange = () => {\n\t\tlet path = `/music/new`;\n\t\thistory.push(path);\n\t}\n\n\tconst redirectPage = (pageNum, changeRoute) => {\n\t\tsetPage(pageNum);\n\n\t\tif (pageLoaded.indexOf(pageNum) === -1) {\n\t\t\tdispatch(fetchMusics(pageNum + 1));\n\t\t} else {\n\t\t\tdispatch(changePage(pageNum));\n\t\t}\n\n\t\tlocalStorage.setItem('page', (pageNum + 1));\n\t\tif (changeRoute) {\n\t\t\thistory.replace({ pathname: '/music/', search: `?page=${(pageNum + 1)}` });\n\t\t}\n\t}\n\n\treturn (\n\t\t<Content>\n\t\t\t<Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n\t\t\t\t<Alert onClose={snackClose} severity=\"success\">\n\t\t\t\t\t{message}\n\t\t\t\t</Alert>\n\t\t\t</Snackbar>\n\t\t\t<div className={sharedClasses.headerContainer}>\n\t\t\t\t<div className={sharedClasses.header}>\n\t\t\t\t\t<Typography variant={\"h5\"}>{'Musics'}</Typography>\n\t\t\t\t\t<div className={classes.spacer} />\n\t\t\t\t\t<div className={sharedClasses.actionGroup}>\n\t\t\t\t\t\t<Button edge=\"end\" color=\"primary\" variant=\"contained\" startIcon={<AddIcon />} onClick={routeChange}>\n\t\t\t\t\t\t\tNew Music\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t{selected.length > 0 && (\n\t\t\t\t\t\t\t<DeleteDialog\n\t\t\t\t\t\t\t\tids={selected}\n\t\t\t\t\t\t\t\tlabel=\"music\"\n\t\t\t\t\t\t\t\tonSave={() => {\n\t\t\t\t\t\t\t\t\tsetAction('delete');\n\t\t\t\t\t\t\t\t\tdispatch(deleteMusic({ ids: selected, token }));\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\trender={(open) => (\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tclassName={classes.deleteButton}\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\tstartIcon={<DeleteIcon />}\n\t\t\t\t\t\t\t\t\t\tonClick={open}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t\t\tDelete {selected.length} selected\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<SummaryCard\n\t\t\t\tvalue={\n\t\t\t\t\t<>\n\t\t\t\t\t\t<TableContainer>\n\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\tclassName={classes.table}\n\t\t\t\t\t\t\t\taria-labelledby=\"tableTitle\"\n\t\t\t\t\t\t\t\tsize={\"small\"}\n\t\t\t\t\t\t\t\taria-label=\"enhanced table\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<EnhancedTableHead\n\t\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\t\tnumSelected={selected.length}\n\t\t\t\t\t\t\t\t\torder={order}\n\t\t\t\t\t\t\t\t\torderBy={orderBy}\n\t\t\t\t\t\t\t\t\tonSelectAllClick={handleSelectAllClick}\n\t\t\t\t\t\t\t\t\tonRequestSort={handleRequestSort}\n\t\t\t\t\t\t\t\t\trowCount={rows.length}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t\t{stableSort(rows, getComparator(order, orderBy))\n\t\t\t\t\t\t\t\t\t\t.slice(\n\t\t\t\t\t\t\t\t\t\t\tcurrentPage * rowsPerPage,\n\t\t\t\t\t\t\t\t\t\t\tcurrentPage * rowsPerPage + rowsPerPage\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.map((row, index) => {\n\t\t\t\t\t\t\t\t\t\t\tconst isItemSelected = isSelected(row._id);\n\t\t\t\t\t\t\t\t\t\t\tconst labelId = `enhanced-table-checkbox-${index}`;\n\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-checked={isItemSelected}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target.type === \"checkbox\" ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target.className.indexOf(\"Checkbox\") > 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thistory.push(`/music/${row._id}`);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`person-${row._id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tselected={isItemSelected}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: \"pointer\" }}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpadding=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectTableRow(row._id);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={isItemSelected}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ \"aria-labelledby\": labelId }}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectTableRow(row._id);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Avatar alt={row.name} src={row.thumbnail} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"th\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={labelId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope=\"row\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpadding=\"none\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.title}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.artist}</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">{(row.genre.map((item) => { return item.name; })).join(', ')}</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</TableContainer>\n\t\t\t\t\t\t<TablePagination\n\t\t\t\t\t\t\trowsPerPageOptions={[]}\n\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\tcount={totalRecord}\n\t\t\t\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\t\t\t\tpage={page}\n\t\t\t\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t}\n\t\t\t/>\n\t\t</Content >\n\t);\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceMove/Redux/danceMove.js",["701","702","703","704","705","706","707","708"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectDanceMove, selectTotalDanceMove, selectCurrentPage, selectPageLoaded, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated, changePage, clearList } from './danceMoveSlice';\nimport { fetchDanceMove } from '../../../API/DanceMove/fetchDanceMove';\nimport { deleteDanceMove } from '../../../API/DanceMove/deleteDanceMove';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\n\nimport useToken from '../../../useToken';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  let stabilizedThis = [];\n\n  for (let index = 0; index < array.length; index++) {\n    if (typeof array[index]['_id'] !== 'undefined') {\n      stabilizedThis.push([array[index], index]);\n    } else {\n      stabilizedThis.push([{}, index]);\n    }\n  }\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst headCells = [\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Name\",\n    width: 320\n  },\n  { id: \"level\", numeric: false, disablePadding: false, label: \"Level\" },\n  { id: \"danceGenre\", numeric: true, disablePadding: false, label: \"Genre\" },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell style={{ width: '0%' }} padding=\"checkbox\">\n          <Checkbox\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n            width={headCell.width ? headCell.width : null}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n}));\n\nexport default function DanceMove(props) {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const currentPage = useSelector(selectCurrentPage);\n  const pageLoaded = useSelector(selectPageLoaded);\n  const totalRecord = useSelector(selectTotalDanceMove);\n  const rows = useSelector(selectDanceMove);\n  const loading = useSelector(selectLoading);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n  const [selected, setSelected] = React.useState([]);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n  const [page, setPage] = React.useState(0);\n\n  // todo with snacks\n  const [snackOpen, setSnackOpen] = React.useState(false);\n  const dispatch = useDispatch();\n  const { token } = useToken();\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let offset = '';\n\n    if (typeof query.page !== 'undefined') {\n      offset = parseInt(query.page);\n    }\n    if (rows.length === 0) {\n      dispatch(fetchDanceMove(offset));\n    } else {\n      if (offset !== '') {\n        redirectPage((offset - 1), false);\n      }\n    }\n  }, [dispatch, rows]);\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (location.pathname.indexOf('dance_move') > -1) {\n        if (location.search === '') {\n          redirectPage(0, false);\n        }\n      }\n    })\n  }, [history]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let pageNum = 1;\n    let maxPage = 1;\n\n    if (typeof query.page !== 'undefined') {\n      pageNum = parseInt(query.page);\n      maxPage = Math.floor(rows.length / rowsPerPage);\n\n      if (typeof query.deleted !== 'undefined') {\n        if (pageNum > maxPage && maxPage > 0) {\n          while (pageNum > maxPage) {\n            pageNum -= 1;\n\n            if (pageNum === 0) {\n              pageNum = 1;\n            }\n          }\n        }\n      }\n\n      if (maxPage > 0) {\n        setPage(pageNum - 1);\n      }\n    }\n    if (typeof query.deleted !== 'undefined') {\n      setMessage('Dance move deleted');\n      setSnackOpen(true);\n\n      history.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n\n      let offset = '';\n\n      if (typeof query.page !== 'undefined') {\n        offset = parseInt(query.page);\n      }\n      // dispatch(clearList());\n      // dispatch(fetchDanceMove(offset));\n    }\n  }, [history.location.search]);\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action === 'delete') {\n          setMessage(\n            `${selected.length} Dance Move${selected.length > 1 ? \"s\" : \"\"\n            } Deleted`\n          );\n          setSelected([]);\n        }\n        setSnackOpen(true);\n        dispatch(setUpdated(false));\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n._id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const selectTableRow = (id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, pageNum) => {\n    redirectPage(pageNum, true);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const routeChange = () => {\n    let path = `/dance_move/new`;\n    history.push(path);\n  }\n\n  const redirectPage = (pageNum, changeRoute) => {\n    setPage(pageNum);\n\n    if (pageLoaded.indexOf(pageNum) === -1) {\n      dispatch(fetchDanceMove(pageNum + 1));\n    } else {\n      dispatch(changePage(pageNum));\n    }\n\n    localStorage.setItem('page', (pageNum + 1));\n    if (changeRoute) {\n      history.replace({ pathname: '/dance_move/', search: `?page=${(pageNum + 1)}` });\n    }\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={sharedClasses.headerContainer}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{'Dance Moves'}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Button edge=\"end\" color=\"primary\" variant=\"contained\" startIcon={<AddIcon />} onClick={routeChange}>\n              New Dance Move\n            </Button>\n            {selected.length > 0 && (\n              <DeleteDialog\n                ids={selected}\n                label=\"music\"\n                onSave={() => {\n                  setAction('delete');\n                  dispatch(deleteDanceMove({ ids: selected, token }));\n                }}\n                render={(open) => (\n                  <Button\n                    className={classes.deleteButton}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={open}\n                  >\n                    {\" \"}\n                    Delete {selected.length} selected\n                  </Button>\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      <SummaryCard\n        value={\n          <>\n            <TableContainer>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={\"small\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                />\n                <TableBody>\n                  {stableSort(rows, getComparator(order, orderBy))\n                    .slice(\n                      currentPage * rowsPerPage,\n                      currentPage * rowsPerPage + rowsPerPage\n                    )\n                    // eslint-disable-next-line array-callback-return\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      if (row.hasOwnProperty('danceGenre'))\n                        return (\n                          <TableRow\n                            hover\n                            role=\"checkbox\"\n                            aria-checked={isItemSelected}\n                            tabIndex={-1}\n                            onClick={(e) => {\n                              if (\n                                e.target.type === \"checkbox\" ||\n                                e.target.className.indexOf(\"Checkbox\") > 0\n                              ) {\n                                return;\n                              }\n                              history.push(`/dance_move/${row._id}`);\n                            }}\n                            key={`person-${row._id}`}\n                            selected={isItemSelected}\n                            style={{ cursor: \"pointer\" }}\n                          >\n                            <TableCell\n                              padding=\"checkbox\"\n                              onClick={(e) => {\n                                selectTableRow(row._id);\n                              }}\n                            >\n                              <Checkbox\n                                checked={isItemSelected}\n                                inputProps={{ \"aria-labelledby\": labelId }}\n                                onChange={(e) => {\n                                  selectTableRow(row._id);\n                                }}\n                              />\n                            </TableCell>\n                            <TableCell\n                              component=\"th\"\n                              id={labelId}\n                              scope=\"row\"\n                              padding=\"default\"\n                            >\n                              {row.name}\n                            </TableCell>\n                            <TableCell align=\"left\">{row.level}</TableCell>\n                            <TableCell align=\"right\">{(row.danceGenre.map((item) => { return item.name; })).join(', ')}</TableCell>\n                          </TableRow>\n                        );\n                    })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[]}\n              component=\"div\"\n              count={totalRecord}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </>\n        }\n      />\n    </Content >\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/Redux/musicSlice.js",["709"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const musicSlice = createSlice({\n  name: \"music\",\n  initialState: {\n    list: [],\n    loading: false,\n    updating: false,\n    updated: false,\n    error: false,\n    selected: {},\n    total: 0,\n    page: 1,\n    pageLoaded: []\n  },\n  reducers: {\n    add: (state, action) => {\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter((item) => {\n        return !removedIds.includes(item._id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map((item) => {\n        if (item._id === action.payload._id) {\n          return action.payload;\n        }\n        return item;\n      });\n    },\n    fetch: (state, action) => {\n      if (state.list.length === 0) {\n        for (let i = 0; i < parseFloat(action.payload.data['totalMusics']); i++) {\n          state.list.push({});\n        }\n        state.list = [...state.list];\n        state.total = parseFloat(action.payload.data['totalMusics']);\n      }\n      const offset = parseFloat(action.payload.offset) - 1;\n      const arrayList = [...state.list];\n\n      action.payload.data['musics'].map((item, index) => {\n        arrayList[(offset * 25) + (index)] = item;\n      });\n\n      state.pageLoaded.push(offset);\n      state.page = offset;\n      state.list = [...arrayList];\n    },\n    throwError: (state, action) => {\n      state.error = action.payload;\n    },\n    get: (state, action) => {\n      state.selected = { ...state.selected, ...action.payload };\n    },\n    setUpdating: (state, action) => {\n      state.updating = action.payload;\n    },\n    setUpdated: (state, action) => {\n      state.updated = action.payload;\n    },\n    changePage: (state, action) => {\n      state.page = action.payload;\n    },\n    clearList: (state, action) => {\n      state.list = [];\n    }\n  },\n});\n\nexport const { add, remove, update, fetch, get, throwError, setUpdating, setUpdated, changePage, clearList } = musicSlice.actions;\n\nexport const selectMusic = (state) => state.music.list;\nexport const selectedMusic = (state) => state.music.selected;\nexport const selectTotalMusic = (state) => state.music.total;\nexport const selectCurrentPage = (state) => state.music.page;\nexport const selectPageLoaded = (state) => state.music.pageLoaded;\nexport const selectLoading = (state) => state.music.loading;\nexport const selectError = (state) => state.music.error;\nexport const selectUpdating = (state) => state.music.updating;\nexport const selectUpdated = (state) => state.music.updated;\n\nexport default musicSlice.reducer;\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Genre/Redux/genreSlice.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Genre/Redux/genre.js",["710","711","712","713","714","715"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectGenre, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated } from './genreSlice';\nimport { createGenre } from \"../../../API/Genre/createGenre\";\nimport { fetchGenre } from '../../../API/Genre/fetchGenre';\nimport { deleteGenre } from '../../../API/Genre/deleteGenre';\nimport { updateGenre } from '../../../API/Genre/updateGenre';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from \"@material-ui/core/Typography\";\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\nimport GenreDialog from \"../../Genre/GenreDialog\";\nimport EditGenreDialog from \"../../Genre/EditGenreDialog\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst headCells = [\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Genre\",\n    width: 100\n  },\n  {\n    id: \"key\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Key\",\n    width: 320\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell style={{ width: '0%' }} padding=\"checkbox\">\n          <Checkbox\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n            width={headCell.width ? headCell.width : null}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n}));\n\nexport default function Genre(props) {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const rows = useSelector(selectGenre);\n  const loading = useSelector(selectLoading);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  // todo with snacks\n  const [snackOpen, setSnackOpen] = React.useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchGenre());\n    } else {\n      redirectPage(0, false);\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (location.pathname.indexOf('genre') > -1) {\n        if (location.search === '') {\n          redirectPage(0, false);\n        }\n      }\n    })\n  }, [history]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let pageNum = 1;\n    let maxPage = 1;\n\n    if (typeof query.page !== 'undefined') {\n      pageNum = parseInt(query.page);\n      maxPage = Math.floor(rows.length / rowsPerPage);\n\n      if (typeof query.deleted !== 'undefined') {\n        if (pageNum > maxPage && maxPage > 0) {\n          while (pageNum > maxPage) {\n            pageNum -= 1;\n\n            if (pageNum === 0) {\n              pageNum = 1;\n            }\n          }\n        }\n      }\n\n      if (maxPage > 0) {\n        setPage(pageNum - 1);\n      }\n    }\n    if (typeof query.deleted !== 'undefined') {\n      setMessage('Genre deleted');\n      setSnackOpen(true);\n\n      history.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n    }\n  }, [history.location.search]);\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action === 'delete') {\n          setMessage(\n            `${selected.length} Genre${selected.length > 1 ? \"s\" : \"\"\n            } Deleted`\n          );\n          setSelected([]);\n        }\n        setSnackOpen(true);\n        dispatch(setUpdated(false));\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n._id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const selectTableRow = (id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, pageNum) => {\n    redirectPage(pageNum, true);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const redirectPage = (pageNum, changeRoute) => {\n    setPage(pageNum);\n\n    localStorage.setItem('page', (pageNum + 1));\n    if (changeRoute) {\n      history.replace({ pathname: '/genre/', search: `?page=${(pageNum + 1)}` });\n    }\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={sharedClasses.headerContainer}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{'Music Genres'}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <GenreDialog\n              edge=\"end\"\n              onSave={(data) => {\n                dispatch(createGenre(data));\n                setMessage('New genre added');\n                setSnackOpen(true);\n              }}\n              render={(open) => (\n                <Button\n                  edge=\"end\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  startIcon={<AddIcon />}\n                  onClick={open}\n                >\n                  New Genre\n                </Button>\n              )}\n            />\n            {selected.length > 0 && (\n              <DeleteDialog\n                ids={selected}\n                label=\"genre\"\n                onSave={() => {\n                  setAction('delete');\n                  dispatch(deleteGenre({ ids: selected }));\n                }}\n                render={(open) => (\n                  <Button\n                    className={classes.deleteButton}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={open}\n                  >\n                    {\" \"}\n                    Delete {selected.length} selected\n                  </Button>\n                )}\n              />\n            )}\n\n          </div>\n        </div>\n      </div>\n      <SummaryCard\n        value={\n          <>\n            <TableContainer>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={\"small\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                />\n                <TableBody>\n                  {stableSort(rows, getComparator(order, orderBy))\n                    .slice(\n                      page * rowsPerPage,\n                      page * rowsPerPage + rowsPerPage\n                    )\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <EditGenreDialog\n                          edge=\"end\"\n                          key={`genre-${row._id}`}\n                          data={row}\n                          onSave={(data) => {\n                            dispatch(updateGenre(data));\n                            setMessage('Music genre updated');\n                            setSnackOpen(true);\n                          }}\n                          render={(open) => (\n                            <TableRow\n                              hover\n                              role=\"checkbox\"\n                              aria-checked={isItemSelected}\n                              tabIndex={-1}\n                              onClick={(e) => {\n                                if (\n                                  e.target.type === \"checkbox\" ||\n                                  e.target.className.indexOf(\"Checkbox\") > 0\n                                ) {\n                                  return;\n                                }\n                                open();\n                              }}\n                              key={`person-${row._id}`}\n                              selected={isItemSelected}\n                              style={{ cursor: \"pointer\" }}\n                            >\n                              <TableCell\n                                padding=\"checkbox\"\n                                onClick={(e) => {\n                                  selectTableRow(row._id);\n                                }}\n                              >\n                                <Checkbox\n                                  checked={isItemSelected}\n                                  inputProps={{ \"aria-labelledby\": labelId }}\n                                  onChange={(e) => {\n                                    selectTableRow(row._id);\n                                  }}\n                                />\n                              </TableCell>\n                              <TableCell\n                                component=\"th\"\n                                id={labelId}\n                                scope=\"row\"\n                                padding=\"default\"\n                              >\n                                {row.name}\n                              </TableCell>\n                              <TableCell\n                                component=\"th\"\n                                id={labelId}\n                                scope=\"row\"\n                                padding=\"default\"\n                              >\n                                {row.key}\n                              </TableCell>\n                            </TableRow>\n                          )}\n                        />\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[]}\n              component=\"div\"\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </>\n        }\n      />\n    </Content >\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceGenre/DanceGenreDialog.js",["716","717","718","719"],"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputWidth: {\n    width: \"280px\"\n  }\n}));\n\nexport default function DanceGenreDialog({ data, render, onSave }) {\n  const sharedClasses = useSharedClasses();\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n\n  const { register, getValues, handleSubmit, unregister, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur'\n  });\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    unregister('name',\n      { keepValid: true }\n    );\n    unregister('key',\n      { keepValid: true }\n    )\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    onSave && onSave(getValues());\n    handleClose();\n  };\n\n  return (\n    <>\n      {render(handleClickOpen)}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n          <DialogTitle id=\"form-dialog-title\">\n            {data ? \"Edit\" : \"Add\"} Dance Genre{\" \"}\n          </DialogTitle>\n          <DialogContent>\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Genre Name</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={classes.inputWidth}\n                  onChange={(e) => {\n                    setValue('name', e.target.value);\n                  }}\n                  {...register('name', { required: true })}\n                  error={errors.name && errors.name.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.name?.type === \"required\" && <span className=\"error\">Genre name is required</span>}\n            </div>\n\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Genre Key</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={`classes.inputWidth`}\n                  onChange={(e) => {\n                    setValue('key', e.target.value);\n                  }}\n                  {...register('key', { required: true })}\n                  error={errors.key?.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.key?.type === \"required\" && <span className=\"error\">Genre key is required</span>}\n            </div>\n\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Weight</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={`classes.inputWidth`}\n                  onChange={(e) => {\n                    setValue('weight', e.target.value);\n                  }}\n                  {...register('weight')}\n                  defaultValue=\"100\"\n                  variant=\"outlined\"\n                  type=\"number\"\n                  fullWidth={true}\n                />\n              </div>\n            </div>\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Genre/GenreDialog.js",["720","721","722","723"],"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputWidth: {\n    width: \"280px\"\n  }\n}));\n\nexport default function GenreDialog({ data, render, onSave }) {\n  const sharedClasses = useSharedClasses();\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n\n  const { register, getValues, handleSubmit, unregister, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur'\n  });\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    unregister('name',\n      { keepValid: true }\n    );\n    unregister('key',\n      { keepValid: true }\n    )\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    onSave && onSave(getValues());\n    handleClose();\n  };\n\n  return (\n    <>\n      {render(handleClickOpen)}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n          <DialogTitle id=\"form-dialog-title\">\n            {data ? \"Edit\" : \"Add\"} Music Genre{\" \"}\n          </DialogTitle>\n          <DialogContent>\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Genre Name</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={classes.inputWidth}\n                  onChange={(e) => {\n                    setValue('name', e.target.value);\n                  }}\n                  {...register('name', { required: true })}\n                  error={errors.name && errors.name.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.name?.type === \"required\" && <span className=\"error\">Genre name is required</span>}\n            </div>\n\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Genre Key</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={`classes.inputWidth`}\n                  onChange={(e) => {\n                    setValue('key', e.target.value);\n                  }}\n                  {...register('key', { required: true })}\n                  error={errors.key?.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.key?.type === \"required\" && <span className=\"error\">Genre key is required</span>}\n            </div>\n\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Weight</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={`classes.inputWidth`}\n                  onChange={(e) => {\n                    setValue('weight', e.target.value);\n                  }}\n                  {...register('weight')}\n                  defaultValue=\"100\"\n                  variant=\"outlined\"\n                  type=\"number\"\n                  fullWidth={true}\n                />\n              </div>\n            </div>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceMove/EditDanceMove.js",["724","725","726","727","728"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectDanceMove, selectedDanceMove, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/danceMoveSlice\";\nimport { updateDanceMove } from \"../../API/DanceMove/updateDanceMove\";\nimport { deleteDanceMove } from \"../../API/DanceMove/deleteDanceMove\";\nimport { fetchSingleDanceMove } from \"../../API/DanceMove/fetchSingleDanceMove\";\nimport { selectDanceGenre } from \"../DanceGenre/Redux/danceGenreSlice\";\nimport { fetchDanceGenre } from \"../../API/DanceGenre/fetchDanceGenre\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport ReactPlayer from \"react-player\";\nimport DeleteDialog from \"../../Components/Dialog/DeleteDialog\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport Autocomplete from \"../../Components/Autocomplete/Autocomplete\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport FileUpload from \"../../Components/FileUpload/FileUpload\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  avatarContainer: {\n    position: 'relative',\n    \"& > label\": {\n      position: 'absolute',\n      bottom: '-15px',\n      left: '70px'\n    }\n  },\n  uploadContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    \"& > div\": {\n      width: 'auto !important',\n      marginBottom: '15px',\n    },\n    \"& video\": {\n      display: \"flex\",\n      border: \"solid 1px #ccc\",\n      background: '#5A5A5A',\n    }\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  errorMessage: {\n    marginLeft: \"0\"\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    color: \"#707070\"\n  },\n  thumbnail: {\n    width: \"100%\",\n  },\n  checkContainer: {\n    background: \"#efefef\",\n    padding: \"10px 15px\",\n    marginTop: \"5px\",\n    \"& label\": {\n      marginLeft: \"0\"\n    },\n    \"& .MuiTypography-body1\": {\n      fontFamily: \"Roboto\"\n    },\n  },\n  toggleItem: {\n    clear: \"both\",\n    \"& label\": {\n      justifyContent: \"space-between\",\n      display: \"flex\"\n    }\n  }\n}));\n\nexport default function EditDanceMove() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const { danceMoveId } = useParams();\n  const genreRows = useSelector(selectDanceGenre);\n  const rows = useSelector(selectDanceMove);\n  const selected = useSelector(selectedDanceMove);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n  const record = rows.find((row) => row._id === danceMoveId);\n  const danceMove = (typeof record !== 'undefined') ? record : selected;\n  const defaultValues = {\n    _id: danceMove._id,\n    name: danceMove.name,\n    animationLink: danceMove.animationLink,\n    realPersonLink: danceMove.realPersonLink,\n    dancerTipLink: danceMove.dancerTipLink,\n    level: danceMove.level,\n    danceGenre: danceMove.danceGenre,\n    moveType: danceMove.moveType || \"\",\n    thumbnail: danceMove.thumbnail || \"\",\n    hasHeadAnimationIssue: danceMove.hasHeadAnimationIssue || false,\n    active: danceMove.active || false,\n  }\n\n  const [hasHeadAnimationIssue, setHasHeadAnimationIssue] = React.useState(defaultValues.hasHeadAnimationIssue);\n  const [active, setActive] = React.useState(defaultValues.active);\n  const [moveType, setMoveType] = useState(defaultValues.moveType);\n  const [realPersonVideo, setRealPersonVideo] = useState(defaultValues.realPersonLink);\n  const [dancerTipVideo, setDancerTipVideo] = useState(defaultValues.dancerTipLink);\n  const [thumbnail, setThumbnail] = useState(defaultValues.thumbnail);\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n  register('moveType', { required: true });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action === 'update') {\n          setMessage('Dance move updated!');\n          setSnackOpen(true);\n          dispatch(setUpdated(false));\n        } else if (action === 'delete') {\n          const pageNum = (localStorage.getItem('page') !== 'null') ? localStorage.getItem('page') : 1;\n          history.push('/dance_move/?page=' + pageNum + '&deleted=true')\n        }\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchSingleDanceMove(danceMoveId));\n    }\n    if (genreRows.length === 0) {\n      dispatch(fetchDanceGenre());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n\n    if (typeof query.created !== 'undefined') {\n      setMessage('Dance move created');\n      setSnackOpen(true);\n    }\n  }, [history.location.search])\n\n  useEffect(() => {\n    if (typeof selected.name !== 'undefined') {\n      setValue('_id', defaultValues._id);\n      setValue('name', defaultValues.name);\n      setValue('level', defaultValues.level);\n      setValue('danceGenre', defaultValues.danceGenre);\n      setValue('animationLink', defaultValues.animationLink);\n      setValue('realPersonLink', defaultValues.realPersonLink);\n      setValue('dancerTipLink', defaultValues.dancerTipLink);\n      setValue('moveType', defaultValues.moveType);\n      setValue('thumbnail', defaultValues.thumbnail);\n      setValue('hasHeadAnimationIssue', defaultValues.hasHeadAnimationIssue);\n      setValue('active', defaultValues.active);\n      setRealPersonVideo(defaultValues.realPersonLink);\n      setDancerTipVideo(defaultValues.dancerTipLink);\n      setMoveType(defaultValues.moveType);\n      setThumbnail(defaultValues.thumbnail);\n      setHasHeadAnimationIssue(defaultValues.hasHeadAnimationIssue);\n      setActive(defaultValues.active);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    setAction('update');\n    dispatch(updateDanceMove(getValues()));\n  };\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const handleSelectChange = (event) => {\n    setMoveType(event.target.value);\n    setValue('moveType', event.target.value);\n\n    if (isSubmitted) trigger('moveType');\n  };\n\n  const handleToggleChange = (event) => {\n    setValue('hasHeadAnimationIssue', event.target.checked);\n    setHasHeadAnimationIssue(event.target.checked);\n  }\n\n  const handleActiveToggleChange = (event) => {\n    setValue('active', event.target.checked);\n    setActive(event.target.checked);\n  }\n  \n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={5000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{\"Update Dance Moves\"}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n            <DeleteDialog\n              ids={[danceMove._id]}\n              label=\"dance move\"\n              onSave={() => {\n                setAction('delete');\n                dispatch(deleteDanceMove({ ids: [danceMove._id] }));\n              }}\n              render={(open) => (\n                <Button\n                  className={classes.deleteButton}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  startIcon={<DeleteIcon />}\n                  onClick={open}\n                >\n                  Delete\n                </Button>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={9}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6} lg={4}>\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Small Thumbnail</label>\n                        <div className={'inputContainer'}>\n                          {thumbnail &&\n                            <div className={classes.margin + ' ' + classes.uploadContainer}>\n                              <img src={thumbnail} className={classes.thumbnail} />\n\n                              <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                type=\"button\"\n                                onClick={() => { setValue('thumbnail', ''); setThumbnail(''); }}\n                              >\n                                Remove\n                              </Button>\n                            </div>\n                          }\n                          {!thumbnail &&\n                            <FormControl fullWidth className={classes.margin}>\n                              <FileUpload\n                                {...register('thumbnail')}\n                                name=\"imageFile\"\n                                accept=\"image/*\"\n                                onFileChange={(file) => {\n                                  setValue('thumbnail', file);\n                                  setThumbnail(URL.createObjectURL(file));\n                                }}\n                              />\n                            </FormControl>\n                          }\n                        </div>\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Name</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={danceMove.name}\n                        error={true ? errors.name?.type === \"required\" : false}\n                        {...register('name', { required: true })}\n                        onChange={(e) => { setValue('name', e.target.value) }}\n                        defaultValue={danceMove.name}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.name?.type === \"required\" && <span class=\"error\">Name is required</span>}\n                  </div>\n\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6}>\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Level</label>\n                        <div className={'inputContainer'}>\n                          <TextField\n                            key={danceMove.level}\n                            error={true ? errors.level?.type === \"required\" : false}\n                            {...register('level', { required: true })}\n                            onChange={(e) => { setValue('level', e.target.value) }}\n                            defaultValue={danceMove.level}\n                            variant=\"outlined\"\n                            fullWidth={true}\n                            type=\"number\"\n                          />\n                        </div>\n                        {errors.level?.type === \"required\" && <span className=\"error\">Level is required</span>}\n                      </div>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Move Type</label>\n                        <Select\n                          variant=\"outlined\"\n                          value={moveType}\n                          onChange={handleSelectChange}\n                          error={true ? errors.moveType?.type === \"required\" : false}\n                        >\n                          <MenuItem value=\"\">\n                            <em>None</em>\n                          </MenuItem>\n                          <MenuItem value={\"on feet\"}>On Feet</MenuItem>\n                          <MenuItem value={\"on floor\"}>On Floor</MenuItem>\n                          <MenuItem value={\"go up\"}>Go Up</MenuItem>\n                          <MenuItem value={\"go down\"}>Go Down</MenuItem>\n                        </Select>\n                        {errors.moveType?.type === \"required\" && <span class=\"error\">Move type is required</span>}\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Dance Genre</label>\n                    <div className={'inputContainer'}>\n                      <Autocomplete\n                        {...register('danceGenre', { required: true })}\n                        list={genreRows}\n                        value={danceMove.danceGenre}\n                        label=\"Dance Genre\"\n                        error={true ? errors.danceGenre?.type === \"required\" && getValues('danceGenre').length === 0 : false}\n                        onValueChange={(event, value) => { setValue('danceGenre', value); if (isSubmitted) trigger('danceGenre'); }}\n                      />\n                    </div>\n                    {errors.danceGenre?.type === \"required\" && <span class=\"error\">Please select a dance genre</span>}\n                  </div>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Animation File Link</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={danceMove.animationLink}\n                        error={true ? errors.animationLink?.type === \"required\" : false}\n                        {...register('animationLink', { required: true })}\n                        onChange={(e) => { setValue('animationLink', e.target.value) }}\n                        defaultValue={danceMove.animationLink}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.animationLink?.type === \"required\" && <span class=\"error\">Animation file link is required</span>}\n                  </div>\n\n                  <Grid container spacing={0}>\n                    <Grid item xs={12} sm={6} md={4}>\n                      <div className={classes.checkContainer}>\n                        <div className={classes.toggleItem}>\n                          <FormControlLabel\n                            {...register('hasHeadAnimationIssue')}\n                            control={\n                              <Switch\n                                checked={hasHeadAnimationIssue}\n                                onChange={handleToggleChange}\n                                name=\"checkedHeadAnimation\"\n                                color=\"primary\"\n                              />\n                            }\n                            label=\"Has head animation issue?\"\n                            labelPlacement=\"start\"\n                          />\n                        </div>\n                        <div className={classes.toggleItem}>\n                          <FormControlLabel\n                            {...register('active')}\n                            control={\n                              <Switch\n                                checked={active}\n                                onChange={handleActiveToggleChange}\n                                name=\"checkedActive\"\n                                color=\"primary\"\n                              />\n                            }\n                            label=\"Active\"\n                            labelPlacement=\"start\"\n                          />\n                        </div>\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Update\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Real Person Video</div>\n                {realPersonVideo &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <ReactPlayer\n                      url={realPersonVideo}\n                      controls\n                    />\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={() => { setValue('realPersonLink', ''); setRealPersonVideo(''); }}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                }\n                {!realPersonVideo &&\n                  <FormControl error={true ? errors.realPersonLink?.type === \"required\" : false} fullWidth className={classes.margin} variant=\"outlined\">\n                    <FileUpload\n                      {...register('realPersonLink', { required: true })}\n                      accept=\".mp4,video/*\"\n                      onFileChange={(file) => {\n                        setValue('realPersonLink', file);\n                        setRealPersonVideo(URL.createObjectURL(file));\n                      }}\n                    />\n                    {errors.realPersonLink?.type === \"required\" && <FormHelperText className={classes.errorMessage}>Please pick a real person video file</FormHelperText>}\n                  </FormControl>\n                }\n              </>\n            }\n          />\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Dancer Tip Video</div>\n                {dancerTipVideo &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <ReactPlayer\n                      url={dancerTipVideo}\n                      controls\n                    />\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={() => { setValue('dancerTipLink', ''); setDancerTipVideo(''); }}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                }\n                {!dancerTipVideo &&\n                  <FormControl error={true ? errors.dancerTipLink?.type === \"required\" : false} fullWidth className={classes.margin} variant=\"outlined\">\n                    <FileUpload\n                      {...register('dancerTipLink', { required: true })}\n                      accept=\".mp4,video/*\"\n                      onFileChange={(file) => {\n                        setValue('dancerTipLink', file);\n                        setDancerTipVideo(URL.createObjectURL(file));\n                      }}\n                    />\n                    {errors.dancerTipLink?.type === \"required\" && <FormHelperText className={classes.errorMessage}>Please pick a dancer tip video file</FormHelperText>}\n                  </FormControl>\n                }\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content >\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/DanceMove/AddDanceMove.js",["729","730","731","732","733","734","735"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectDanceMove, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/danceMoveSlice\";\nimport { createDanceMove } from \"../../API/DanceMove/createDanceMove\";\nimport { selectDanceGenre } from \"../DanceGenre/Redux/danceGenreSlice\";\nimport { fetchDanceGenre } from \"../../API/DanceGenre/fetchDanceGenre\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport ReactPlayer from \"react-player\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport Autocomplete from \"../../Components/Autocomplete/Autocomplete\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport FileUpload from \"../../Components/FileUpload/FileUpload\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  formControl: {\n    margin: `${theme.spacing(1)}px 0`,\n    minWidth: 180\n  },\n  uploadContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    \"& > div\": {\n      width: 'auto !important',\n      marginBottom: '15px',\n    },\n    \"& video\": {\n      display: \"flex\",\n      border: \"solid 1px #ccc\",\n      background: '#5A5A5A',\n    }\n  },\n  errorMessage: {\n    marginLeft: \"0\"\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    color: \"#707070\"\n  },\n  thumbnail: {\n    width: '100%',\n  },\n  checkContainer: {\n    background: \"#efefef\",\n    padding: \"10px 15px\",\n    marginTop: \"5px\",\n    \"& label\": {\n      marginLeft: \"0\"\n    },\n    \"& .MuiTypography-body1\": {\n      fontFamily: \"Roboto\"\n    }\n  },\n  toggleItem: {\n    clear: \"both\",\n    \"& label\": {\n      justifyContent: \"space-between\",\n      display: \"flex\"\n    }\n  }\n}));\n\nexport default function AddDanceMove() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const genreRows = useSelector(selectDanceGenre);\n  const rows = useSelector(selectDanceMove);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [hasHeadAnimationIssue, setHasHeadAnimationIssue] = useState(false);\n  const [active, setActive] = React.useState(false);\n  const [moveType, setMoveType] = useState();\n  const [realPersonVideo, setRealPersonVideo] = useState();\n  const [dancerTipVideo, setDancerTipVideo] = useState();\n  const [thumbnail, setThumbnail] = useState();\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n  });\n  register('moveType', { required: true });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        dispatch(setUpdated(false));\n        history.replace({ pathname: '/dance_move/' + rows[rows.length - 1]._id, search: '?created=true' });\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  useEffect(() => {\n    if (genreRows.length === 0) {\n      dispatch(fetchDanceGenre());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    dispatch(createDanceMove(getValues()));\n  };\n\n  const handleSelectChange = (event) => {\n    setMoveType(event.target.value);\n    setValue('moveType', event.target.value);\n\n    if (isSubmitted) trigger('moveType');\n  };\n\n  const handleToggleChange = (event) => {\n    setHasHeadAnimationIssue(event.target.checked);\n    setValue('hasHeadAnimationIssue', event.target.checked);\n  }\n\n  const handleActiveToggleChange = (event) => {\n    setValue('active', event.target.checked);\n    setActive(event.target.checked);\n  }\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={5000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>Add Dance Move</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={9}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6} lg={4}>\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Small Thumbnail</label>\n                        <div className={'inputContainer'}>\n                          {thumbnail &&\n                            <div className={classes.margin + ' ' + classes.uploadContainer}>\n                              <img src={thumbnail} className={classes.thumbnail} />\n\n                              <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                type=\"button\"\n                                onClick={() => { setValue('thumbnail', ''); setThumbnail(''); }}\n                              >\n                                Remove\n                              </Button>\n                            </div>\n                          }\n                          {!thumbnail &&\n                            <FormControl fullWidth className={classes.margin}>\n                              <FileUpload\n                                {...register('thumbnail')}\n                                name=\"imageFile\"\n                                accept=\"image/*\"\n                                onFileChange={(file) => {\n                                  setValue('thumbnail', file);\n                                  setThumbnail(URL.createObjectURL(file));\n                                }}\n                              />\n                            </FormControl>\n                          }\n                        </div>\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Name</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        error={true ? errors.name?.type === \"required\" : false}\n                        {...register('name', { required: true })}\n                        onChange={(e) => { setValue('name', e.target.value) }}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.name?.type === \"required\" && <span className=\"error\">Name is required</span>}\n                  </div>\n\n                  <Grid container spacing={3}>\n                    <Grid item xs={6}>\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Level</label>\n                        <div className={'inputContainer'}>\n                          <TextField\n                            error={true ? errors.level?.type === \"required\" : false}\n                            {...register('level', { required: true })}\n                            onChange={(e) => { setValue('level', e.target.value) }}\n                            variant=\"outlined\"\n                            fullWidth={true}\n                            type=\"number\"\n                          />\n                        </div>\n                        {errors.level?.type === \"required\" && <span className=\"error\">Level is required</span>}\n                      </div>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Move Type</label>\n                        <Select\n                          variant=\"outlined\"\n                          value={moveType}\n                          onChange={handleSelectChange}\n                          error={true ? errors.moveType?.type === \"required\" : false}\n                        >\n                          <MenuItem value=\"\">\n                            <em>None</em>\n                          </MenuItem>\n                          <MenuItem value={\"on feet\"}>On Feet</MenuItem>\n                          <MenuItem value={\"on floor\"}>On Floor</MenuItem>\n                          <MenuItem value={\"go up\"}>Go Up</MenuItem>\n                          <MenuItem value={\"go down\"}>Go Down</MenuItem>\n                        </Select>\n                        {errors.moveType?.type === \"required\" && <span className=\"error\">Move type is required</span>}\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Dance Genre</label>\n                    <div className={'inputContainer'}>\n                      <Autocomplete\n                        {...register('danceGenre', { required: true })}\n                        list={genreRows}\n                        value={[]}\n                        label=\"Dance Genre\"\n                        error={true ? errors.danceGenre?.type === \"required\" && getValues('danceGenre').length === 0 : false}\n                        onValueChange={(event, value) => { setValue('danceGenre', value); if (isSubmitted) trigger('danceGenre'); }}\n                      />\n                    </div>\n                    {errors.danceGenre?.type === \"required\" && <span className=\"error\">Please select a dance genre</span>}\n                  </div>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Animation File Link</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        error={true ? errors.animationLink?.type === \"required\" : false}\n                        {...register('animationLink', { required: true })}\n                        onChange={(e) => { setValue('animationLink', e.target.value) }}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.animationLink?.type === \"required\" && <span className=\"error\">Animation file link is required</span>}\n                  </div>\n\n                  <Grid container spacing={0}>\n                    <Grid item xs={12} sm={6} md={4}>\n                      <div className={classes.checkContainer}>\n                        <div className={classes.toggleItem}>\n                          <FormControlLabel\n                            {...register('hasHeadAnimationIssue')}\n                            control={\n                              <Switch\n                                checked={hasHeadAnimationIssue}\n                                onChange={handleToggleChange}\n                                name=\"checkedHeadAnimation\"\n                                color=\"primary\"\n                              />\n                            }\n                            label=\"Has head animation issue?\"\n                            labelPlacement=\"start\"\n                          />\n                        </div>\n                        <div className={classes.toggleItem}>\n                          <FormControlLabel\n                            {...register('active')}\n                            control={\n                              <Switch\n                                checked={active}\n                                onChange={handleActiveToggleChange}\n                                name=\"checkedActive\"\n                                color=\"primary\"\n                              />\n                            }\n                            label=\"Active\"\n                            labelPlacement=\"start\"\n                          />\n                        </div>\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Create New\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Real Person Video</div>\n                {realPersonVideo &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <div className={classes.margin + ' ' + classes.uploadContainer}>\n                      <ReactPlayer\n                        url={realPersonVideo}\n                        controls\n                      />\n                      <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        type=\"button\"\n                        onClick={() => { setValue('realPersonLink', ''); setRealPersonVideo(''); }}\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  </div>\n                }\n                {!realPersonVideo &&\n                  <FormControl error={true ? errors.realPersonLink?.type === \"required\" : false} fullWidth className={classes.margin}>\n                    <FileUpload\n                      {...register('realPersonLink', { required: true })}\n                      name=\"realPersonFile\"\n                      accept=\".mp4,video/*\"\n                      onFileChange={(file) => {\n                        setValue('realPersonLink', file);\n                        setRealPersonVideo(URL.createObjectURL(file));\n                      }}\n                    />\n                    {errors.realPersonLink?.type === \"required\" && <FormHelperText filled={true}>Please pick a real person video file</FormHelperText>}\n                  </FormControl>\n                }\n              </>\n            }\n          />\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Dancer Tip Video</div>\n                {dancerTipVideo &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <ReactPlayer\n                      url={dancerTipVideo}\n                      controls\n                    />\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={() => { setValue('dancerTipLink', ''); setDancerTipVideo(''); }}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                }\n                {!dancerTipVideo &&\n                  <FormControl error={true ? errors.dancerTipLink?.type === \"required\" : false} fullWidth className={classes.margin}>\n                    <FileUpload\n                      {...register('dancerTipLink', { required: true })}\n                      accept=\".mp4,video/*\"\n                      name=\"dancerTipFile\"\n                      onFileChange={(file) => {\n                        setValue('dancerTipLink', file);\n                        setDancerTipVideo(URL.createObjectURL(file));\n                      }}\n                    />\n                    {errors.dancerTipLink?.type === \"required\" && <FormHelperText>Please pick a dancer tip video file</FormHelperText>}\n                  </FormControl>\n                }\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/EditMusic.js",["736","737","738"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectMusic, selectedMusic, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/musicSlice\";\nimport { updateMusic } from \"../../API/Music/updateMusic\";\nimport { deleteMusic } from \"../../API/Music/deleteMusic\";\nimport { fetchSingleMusic } from \"../../API/Music/fetchSingleMusic\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport MusicFileUpload from \"./Components/MusicFileUpload\";\nimport DeleteDialog from \"../../Components/Dialog/DeleteDialog\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport Autocomplete from \"./Components/Autocomplete\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match === regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  avatarContainer: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(2),\n  },\n  avatarWrapper: {\n    position: \"relative\",\n    \"& > label\": {\n      position: 'absolute',\n      bottom: '10px',\n      right: '-10px',\n      \"& > span, & > span:hover\": {\n        boxShadow: \"#ccc 0px 2px 3px 1px\",\n        background: '#FFFFFF'\n      }\n    },\n  },\n  audioContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n    \"& > div\": {\n      display: 'flex',\n      paddingLeft: '5px'\n    }\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  errorMessage: {\n    marginLeft: \"0\"\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    color: \"#8f9cbb\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n}));\n\nexport default function EditMusic() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const { musicId } = useParams();\n  const rows = useSelector(selectMusic);\n  const selected = useSelector(selectedMusic);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n  const record = rows.find((row) => row._id === musicId);\n  const melody = (typeof record !== 'undefined') ? record : selected;\n  const defaultValues = {\n    _id: melody._id,\n    title: melody.title,\n    artist: melody.artist,\n    genre: melody.genre,\n    musicLink: melody.musicLink,\n    thumbnail: melody.thumbnail,\n    bpm: melody.bpm,\n    delayBeforeAvatarDance: melody.delayBeforeAvatarDance || ''\n  }\n\n  const [musicFile, setMusicFile] = useState(defaultValues.musicLink);\n  const [thumbnailImage, setThumbnailImage] = useState(defaultValues.thumbnail);\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action === 'update') {\n          setMessage('Music updated!');\n          setSnackOpen(true);\n          dispatch(setUpdated(false));\n        } else if (action === 'delete') {\n          const pageNum = (localStorage.getItem('page') !== 'null') ? localStorage.getItem('page') : 1;\n          history.push('/music/?page=' + pageNum + '&deleted=true')\n        }\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchSingleMusic(musicId));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n\n    if (typeof query.created !== 'undefined') {\n      setMessage('Music created');\n      setSnackOpen(true);\n    }\n  }, [history.location.search])\n\n  useEffect(() => {\n    if (typeof selected.title !== 'undefined') {\n      setValue('_id', defaultValues._id);\n      setValue('title', defaultValues.title);\n      setValue('artist', defaultValues.artist);\n      setValue('genre', defaultValues.genre);\n      setValue('musicLink', defaultValues.musicLink);\n      setValue('thumbnail', defaultValues.thumbnail);\n      setValue('delayBeforeAvatarDance', defaultValues.delayBeforeAvatarDance);\n      setValue('bpm', defaultValues.bpm);\n      setMusicFile(defaultValues.musicLink);\n      setThumbnailImage(defaultValues.thumbnail);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    setAction('update');\n    dispatch(updateMusic(getValues()));\n  };\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={5000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{\"Update Music\"}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n            <DeleteDialog\n              ids={[melody._id]}\n              label=\"music\"\n              onSave={() => {\n                setAction('delete');\n                dispatch(deleteMusic({ ids: [melody._id] }));\n              }}\n              render={(open) => (\n                <Button\n                  className={classes.deleteButton}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  startIcon={<DeleteIcon />}\n                  onClick={open}\n                >\n                  Delete\n                </Button>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={9}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Title</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={melody.title}\n                        error={true ? errors.title?.type === \"required\" : false}\n                        {...register('title', { required: true })}\n                        onChange={(e) => { setValue('title', e.target.value) }}\n                        defaultValue={melody.title}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.title?.type === \"required\" && <span class=\"error\">Title is required</span>}\n                  </div>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Artist</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={melody.artist}\n                        error={true ? errors.artist?.type === \"required\" : false}\n                        {...register('artist', { required: true })}\n                        onChange={(e) => { setValue('artist', e.target.value) }}\n                        defaultValue={melody.artist}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.artist?.type === \"required\" && <span class=\"error\">Artist is required</span>}\n                  </div>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6} >\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Delay Before Avatar Dance</label>\n                        <div className={'inputContainer'}>\n                          <TextField\n                            key={melody.delayBeforeAvatarDance}\n                            error={true ? errors.delayBeforeAvatarDance?.type === \"required\" : false}\n                            {...register('delayBeforeAvatarDance', { required: true })}\n                            onChange={(e) => { setValue('delayBeforeAvatarDance', e.target.value) }}\n                            defaultValue={melody.delayBeforeAvatarDance}\n                            variant=\"outlined\"\n                            type=\"number\"\n                            fullWidth={true}\n                          />\n                        </div>\n                        {errors.delayBeforeAvatarDance?.type === \"required\" && <span class=\"error\">Delay before avatar dance is required</span>}\n                      </div>\n                    </Grid>\n                    <Grid item xs={12} sm={6} >\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>BPM</label>\n                        <div className={'inputContainer'}>\n                          <TextField\n                            key={melody.bpm}\n                            error={true ? errors.bpm?.type === \"required\" : false}\n                            {...register('bpm', { required: true })}\n                            onChange={(e) => { setValue('bpm', e.target.value) }}\n                            defaultValue={melody.bpm}\n                            variant=\"outlined\"\n                            type=\"number\"\n                            fullWidth={true}\n                          />\n                        </div>\n                        {errors.bpm?.type === \"required\" && <span class=\"error\">Bit per minute is required</span>}\n                      </div>\n                    </Grid>\n                  </Grid>\n                  {musicFile &&\n                    <div className={classes.audioContainer}>\n                      <ReactAudioPlayer\n                        src={musicFile}\n                        controls\n                      />\n                      <div>\n                        <IconButton aria-label=\"delete\" onClick={() => { setValue('musicLink', ''); setMusicFile(''); }}>\n                          <DeleteIcon />\n                        </IconButton>\n                      </div>\n                    </div>\n                  }\n                  {!musicFile &&\n                    <FormControl error={true ? errors.musicLink && errors.musicLink.type === \"required\" : false} fullWidth className={classes.margin} variant=\"outlined\">\n                      <MusicFileUpload\n                        {...register('musicLink', { required: true })}\n                        onFileChange={(file) => {\n                          setValue('musicLink', file);\n                          setMusicFile(URL.createObjectURL(file));\n                        }}\n                      />\n                      {errors.musicLink && errors.musicLink.type === \"required\" && <FormHelperText className={classes.errorMessage}>Please pick a music file</FormHelperText>}\n                    </FormControl>\n                  }\n\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6} >\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Genre</label>\n                        <div className={'inputContainer'}>\n                          <Autocomplete\n                            {...register('genre', { required: true })}\n                            value={melody.genre}\n                            error={true ? errors.genre && errors.genre.type === \"required\" && getValues('genre').length === 0 : false}\n                            onValueChange={(event, value) => { setValue('genre', value); if (isSubmitted) trigger('genre'); }}\n                          />\n                        </div>\n                        {errors.genre?.type === \"required\" && <span class=\"error\">Please select a genre</span>}\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Update\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Music Thumbnail</div>\n                <div className={classes.avatarContainer}>\n                  <div className={classes.avatarWrapper}>\n                    <Avatar\n                      alt={melody.name}\n                      key={thumbnailImage}\n                      src={thumbnailImage}\n                      classes={{ root: classes.avatar, circle: classes.circle }}\n                    />\n                    <input\n                      accept=\"image/*\"\n                      className={classes.hiddenInput}\n                      id=\"icon-button-file\"\n                      type=\"file\"\n                      onChange={(e) => {\n                        setThumbnailImage(URL.createObjectURL(e.target.files[0]));\n                        setValue('thumbnail', e.target.files[0]);\n                      }}\n                    />\n\n                    <label htmlFor=\"icon-button-file\">\n                      <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                        <PhotoCamera />\n                      </IconButton>\n                    </label>\n                  </div>\n                </div>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/AddMusic.js",["739","740"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectMusic, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/musicSlice\";\nimport { createMusic } from \"../../API/Music/createMusic\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport MusicFileUpload from \"./Components/MusicFileUpload\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport Autocomplete from \"./Components/Autocomplete\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  summaryCards: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  summaryCard: {\n    margin: theme.spacing(1),\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  avatarContainer: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(2),\n  },\n  avatarWrapper: {\n    position: \"relative\",\n    \"& > label\": {\n      position: 'absolute',\n      bottom: '10px',\n      right: '-10px',\n      \"& > span, & > span:hover\": {\n        boxShadow: \"#ccc 0px 2px 3px 1px\",\n        background: '#FFFFFF'\n      }\n    },\n  },\n  audioContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n    \"& > div\": {\n      display: 'flex',\n      paddingLeft: '5px'\n    }\n  },\n  errorMessage: {\n    marginLeft: \"0\"\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    color: \"#8f9cbb\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n}));\n\nexport default function AddMusic() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const rows = useSelector(selectMusic);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [musicFile, setMusicFile] = useState();\n  const [thumbnailImage, setThumbnailImage] = useState();\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur'\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        dispatch(setUpdated(false));\n        history.replace({ pathname: '/music/' + rows[rows.length - 1]._id, search: '?created=true' });\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    dispatch(createMusic(getValues()));\n  };\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>Add Music</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={9}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Title</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        error={true ? errors.title?.type === \"required\" : false}\n                        {...register('title', { required: true })}\n                        onChange={(e) => { setValue('title', e.target.value) }}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.title?.type === \"required\" && <span class=\"error\">Title is required</span>}\n                  </div>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Artist</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        error={true ? errors.artist?.type === \"required\" : false}\n                        {...register('artist', { required: true })}\n                        onChange={(e) => { setValue('artist', e.target.value) }}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.artist?.type === \"required\" && <span class=\"error\">Artist is required</span>}\n                  </div>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6} >\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Delay Before Avatar Dance</label>\n                        <div className={'inputContainer'}>\n                          <TextField\n                            error={true ? errors.delayBeforeAvatarDance?.type === \"required\" : false}\n                            {...register('delayBeforeAvatarDance', { required: true })}\n                            onChange={(e) => { setValue('delayBeforeAvatarDance', e.target.value) }}\n                            variant=\"outlined\"\n                            type=\"number\"\n                            fullWidth={true}\n                          />\n                        </div>\n                        {errors.delayBeforeAvatarDance?.type === \"required\" && <span class=\"error\">Delay before avatar dance is required</span>}\n                      </div>\n                    </Grid>\n                    <Grid item xs={12} sm={6} >\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>BPM</label>\n                        <div className={'inputContainer'}>\n                          <TextField\n                            error={true ? errors.bpm?.type === \"required\" : false}\n                            {...register('bpm', { required: true })}\n                            onChange={(e) => { setValue('bpm', e.target.value) }}\n                            variant=\"outlined\"\n                            type=\"number\"\n                            fullWidth={true}\n                          />\n                        </div>\n                        {errors.bpm?.type === \"required\" && <span class=\"error\">Bit per minute is required</span>}\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  {musicFile &&\n                    <div className={classes.audioContainer}>\n                      <ReactAudioPlayer\n                        src={musicFile}\n                        controls\n                      />\n                      <div>\n                        <IconButton aria-label=\"delete\" onClick={() => { setValue('musicLink', ''); setMusicFile(''); }}>\n                          <DeleteIcon />\n                        </IconButton>\n                      </div>\n                    </div>\n                  }\n                  {!musicFile &&\n                    <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                      <MusicFileUpload\n                        {...register('musicLink', { required: true })}\n                        onFileChange={(file) => {\n                          setValue('musicLink', file);\n                          setMusicFile(URL.createObjectURL(file));\n                        }}\n                      />\n                      {errors.musicLink?.type === \"required\" && <span class=\"error\">Please pick a music file</span>}\n                    </div>\n                  }\n\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6} >\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Genre</label>\n                        <div className={'inputContainer'}>\n                          <Autocomplete\n                            {...register('genre', { required: true })}\n                            error={true ? errors.genre && errors.genre.type === \"required\" && getValues('genre').length === 0 : false}\n                            onValueChange={(event, value) => { setValue('genre', value); if (isSubmitted) trigger('genre'); }}\n                          />\n                        </div>\n                        {errors.genre?.type === \"required\" && <span class=\"error\">Please select a genre</span>}\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Create New\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Music Thumbnail</div>\n                <div className={classes.avatarContainer}>\n                  <div className={classes.avatarWrapper}>\n                    <Avatar\n                      key={thumbnailImage}\n                      src={thumbnailImage}\n                      classes={{ root: classes.avatar, circle: classes.circle }}\n                    />\n                    <input\n                      accept=\"image/*\"\n                      className={classes.hiddenInput}\n                      id=\"icon-button-file\"\n                      type=\"file\"\n                      onChange={(e) => {\n                        setThumbnailImage(URL.createObjectURL(e.target.files[0]));\n                        setValue('thumbnail', e.target.files[0]);\n                      }}\n                    />\n\n                    <label htmlFor=\"icon-button-file\">\n                      <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                        <PhotoCamera />\n                      </IconButton>\n                    </label>\n                  </div>\n                </div>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  )\n}","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/Components/MusicFileUpload.js",["741"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n\thiddenInput: {\n\t\tdisplay: 'none',\n\t},\n\tuploadContainer: {\n\t\tdisplay: 'flex',\n\t\t\"& > label\": {\n\t\t\tdisplay: 'flex',\n\t\t\tmarginBottom: '0'\n\t\t}\n\t}\n}));\n\nconst Select = React.forwardRef((props, ref) => {\n\tconst changeHandler = (event) => {\n\t\tprops.onFileChange && props.onFileChange(event.target.files[0]);\n\t};\n\n\tconst classes = useStyles();\n\n\tclass Counter extends React.Component {\n\t\tconstructor(props) {\n\t\t\tsuper(props)\n\t\t}\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div className={classes.uploadContainer}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"upload-input-file\"\n\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\tname=\"musicLink\"\n\t\t\t\t\t\tclassName={classes.hiddenInput}\n\t\t\t\t\t\taccept=\".mp3\"\n\t\t\t\t\t\tonChange={changeHandler}\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"upload-input-file\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcomponent=\"span\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tUpload Music\n\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t</label>\n\t\t\t\t\t<input className={classes.hiddenInput} name={props.name} ref={ref} onChange={props.onChange} onBlur={props.onBlur} />\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\treturn <Counter />\n});\n\nexport default Select;\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Music/Components/Autocomplete.js",["742"],"/* eslint-disable no-use-before-define */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchGenre } from \"../../../API/Genre/fetchGenre\";\nimport { selectGenre } from \"../../Genre/Redux/genreSlice\";\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    '& > * + *': {\n      marginTop: theme.spacing(3),\n    },\n  },\n}));\n\nconst Tags = React.forwardRef((props, ref) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const rows = useSelector(selectGenre);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchGenre());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (rows.length > 0 && typeof props.value !== 'undefined') {\n      setData(props.value.map(key => rows[rows.findIndex((item) => item._id === key._id)]));\n    }\n  }, [rows, props.value]);\n\n  const changeHandler = (event, newValue) => {\n    setData(newValue);\n    props.onValueChange && props.onValueChange(event, newValue);\n  };\n\n  class Dropdown extends React.Component {\n    constructor(props) {\n      super(props)\n    }\n    render() {\n      return (\n        <div className={classes.root}>\n          <Autocomplete\n            multiple\n            id=\"tags-outlined\"\n            options={rows}\n            getOptionLabel={(option) => option.name}\n            defaultValue={[]}\n            onChange={changeHandler}\n            value={data}\n            filterSelectedOptions\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                error={props.error}\n                inputRef={ref}\n                variant=\"outlined\"\n                placeholder=\"Pick music genres\"\n              />\n            )}\n          />\n        </div >\n      )\n    }\n  }\n  return <Dropdown />\n});\n\nexport default Tags;\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Reason/Redux/reason.js",["743","744","745","746","747","748","749"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectReason, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated } from './reasonSlice';\nimport { createReason } from \"../../../API/Reason/createReason\";\nimport { fetchReason } from '../../../API/Reason/fetchReason';\nimport { deleteReason } from '../../../API/Reason/deleteReason';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst headCells = [\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Reason \",\n    width: 400\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell style={{ width: '0%' }} padding=\"checkbox\">\n          <Checkbox\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n            width={headCell.width ? headCell.width : null}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n}));\n\nexport default function Reason(props) {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const rows = useSelector(selectReason);\n  const loading = useSelector(selectLoading);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  // todo with snacks\n  const [snackOpen, setSnackOpen] = React.useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchReason());\n    } else {\n      redirectPage(0, false);\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (location.pathname.indexOf('reason') > -1) {\n        if (location.search === '') {\n          redirectPage(0, false);\n        }\n      }\n    })\n  }, [history]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let pageNum = 1;\n    let maxPage = 1;\n\n    if (typeof query.page !== 'undefined') {\n      pageNum = parseInt(query.page);\n      maxPage = Math.floor(rows.length / rowsPerPage);\n\n      if (typeof query.deleted !== 'undefined') {\n        if (pageNum > maxPage && maxPage > 0) {\n          while (pageNum > maxPage) {\n            pageNum -= 1;\n\n            if (pageNum === 0) {\n              pageNum = 1;\n            }\n          }\n        }\n      }\n\n      if (maxPage > 0) {\n        setPage(pageNum - 1);\n      }\n    }\n    if (typeof query.deleted !== 'undefined') {\n      setMessage('Reason deleted');\n      setSnackOpen(true);\n\n      history.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n    }\n  }, [history.location.search]);\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'delete') {\n          setMessage(\n            `${selected.length} Reason${selected.length > 1 ? \"s\" : \"\"\n            } Deleted`\n          );\n          setSelected([]);\n        }\n        setSnackOpen(true);\n        dispatch(setUpdated(false));\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n._id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const selectTableRow = (id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, pageNum) => {\n    redirectPage(pageNum, true);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const routeChange = () => {\n    let path = `/reason/new`;\n    history.push(path);\n  }\n\n  const redirectPage = (pageNum, changeRoute) => {\n    setPage(pageNum);\n\n    localStorage.setItem('page', (pageNum + 1));\n    if (changeRoute) {\n      history.replace({ pathname: '/reason/', search: `?page=${(pageNum + 1)}` });\n    }\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={sharedClasses.headerContainer}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{'Reasons of Reporting'}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Button edge=\"end\" color=\"primary\" variant=\"contained\" startIcon={<AddIcon />} onClick={routeChange}>\n              New Reason\n            </Button>\n            {selected.length > 0 && (\n              <DeleteDialog\n                ids={selected}\n                label=\"reason of reporting\"\n                onSave={() => {\n                  setAction('delete');\n                  dispatch(deleteReason({ ids: selected }));\n                }}\n                render={(open) => (\n                  <Button\n                    className={classes.deleteButton}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={open}\n                  >\n                    {\" \"}\n                    Delete {selected.length} selected\n                  </Button>\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      <SummaryCard\n        value={\n          <>\n            <TableContainer>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={\"small\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                />\n                <TableBody>\n                  {stableSort(rows, getComparator(order, orderBy))\n                    .slice(\n                      page * rowsPerPage,\n                      page * rowsPerPage + rowsPerPage\n                    )\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          onClick={(e) => {\n                            if (\n                              e.target.type === \"checkbox\" ||\n                              e.target.className.indexOf(\"Checkbox\") > 0\n                            ) {\n                              return;\n                            }\n                            history.push(`/reason/${row._id}`);\n                          }}\n                          key={`person-${row._id}`}\n                          selected={isItemSelected}\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          <TableCell\n                            padding=\"checkbox\"\n                            onClick={(e) => {\n                              selectTableRow(row._id);\n                            }}\n                          >\n                            <Checkbox\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(e) => {\n                                selectTableRow(row._id);\n                              }}\n                            />\n                          </TableCell>\n                          <TableCell\n                            component=\"th\"\n                            id={labelId}\n                            scope=\"row\"\n                            padding=\"default\"\n                          >\n                            {row.name}\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[]}\n              component=\"div\"\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </>\n        }\n      />\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Reason/Redux/reasonSlice.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Reason/fetchReason.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Reason/deleteReason.js",["750"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/Reason/Redux/reasonSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteReason = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async reasonId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/reason/${reasonId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(handleErrorResponse(error)));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/API/Reason/createReason.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Reason/AddReason.js",["751","752","753","754","755","756","757","758","759","760","761"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectReason, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/reasonSlice\";\nimport { createReason } from \"../../API/Reason/createReason\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  summaryCards: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  summaryCard: {\n    margin: theme.spacing(1),\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 180\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  errorMessage: {\n    marginLeft: \"0 !important\"\n  },\n  displayBlock: {\n    display: \"block\"\n  },\n  removeDescription: {\n    marginLeft: theme.spacing(1),\n  }\n}));\n\nexport default function AddReason() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const rows = useSelector(selectReason);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n  const [indexes, setIndexes] = React.useState([]);\n  const [counter, setCounter] = React.useState(0);\n\n  const [description, setDescription] = useState([]);\n  const { register, unregister, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: { description: [] }\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        dispatch(setUpdated(false));\n        history.replace({ pathname: '/reason/' + rows[rows.length - 1]._id, search: '?created=true' });\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const checkEmptyField = (index, errors) => {\n    if (typeof (errors.description) !== 'undefined') {\n      if (typeof errors.description[index] !== 'undefined') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    if (getValues('description').length > 0) {\n      dispatch(createReason(getValues()));\n    }\n  };\n\n  const addDescription = () => {\n    setIndexes(prevIndexes => [...prevIndexes, counter]);\n    setCounter(prevCounter => prevCounter + 1);\n  };\n\n  const removeDescription = () => {\n    setIndexes(prevIndexes => [...prevIndexes.filter(item => item !== indexes.length - 1)]);\n    setCounter(prevCounter => prevCounter - 1);\n\n    const lastRecordIndex = indexes.length - 1;\n    const tempReason = [...description];\n    delete tempReason[lastRecordIndex];\n    setDescription([...tempReason]);\n    setValue('description', [...tempReason]);\n\n    const fieldName = `description[${lastRecordIndex}]`;\n    unregister(fieldName, { keepDefaultValue: true });\n  };\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>Add Reason of Reporting</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={8}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Name of Reason</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        error={true ? errors.name?.type === \"required\" : false}\n                        {...register('name', { required: true })}\n                        onChange={(e) => { setValue('name', e.target.value) }}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.name?.type === \"required\" && <span className=\"error\">Name of reason is required</span>}\n                  </div>\n\n                  <Grid container spacing={3}>\n                    <Grid item xs={8}>\n                      {indexes.map(index => {\n                        const fieldName = `description[${index}]`;\n\n                        return <div key={index} className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                          <label>Description #{index + 1}</label>\n                          <div className={'inputContainer'}>\n                            <TextField\n                              key={`description-${index}`}\n                              multiline\n                              rows={2}\n                              rowsMax={4}\n                              error={checkEmptyField(index, errors)}\n                              {...register(fieldName, { required: true })}\n                              onChange={(e) => { setValue(fieldName, e.target.value) }}\n                              variant=\"outlined\"\n                              fullWidth={true}\n                            />\n                          </div>\n                          {checkEmptyField(index, errors) && <span className=\"error\">Description is required</span>}\n                        </div>\n                      })}\n                      <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        component=\"span\"\n                        onClick={addDescription}\n                      >\n                        Add Description\n                      </Button>\n                      {indexes.length > 0 &&\n                        <Button\n                          variant=\"outlined\"\n                          className={classes.removeDescription}\n                          component=\"span\"\n                          onClick={removeDescription}\n                        >\n                          Remove Description\n                        </Button>\n                      }\n                      {isSubmitted && getValues('description').length == 0 &&\n                        <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                          <span className=\"error\">Min 1 description is required</span>\n                        </div>\n                      }\n                    </Grid>\n                  </Grid>\n\n\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Create New\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  )\n}","/Users/zincchuang/Documents/boogizfront/src/Pages/Reason/EditReason.js",["762","763","764","765","766","767","768","769","770","771","772","773","774","775"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectReason, selectedReason, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/reasonSlice\";\nimport { fetchSingleReason } from \"../../API/Reason/fetchSingleReason\";\nimport { updateReason } from \"../../API/Reason/updateReason\";\nimport { deleteReason } from \"../../API/Reason/deleteReason\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport DeleteDialog from \"../../Components/Dialog/DeleteDialog\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  summaryCards: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  summaryCard: {\n    margin: theme.spacing(1),\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 180\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  removeDescription: {\n    marginLeft: theme.spacing(1),\n  }\n}));\n\nexport default function EditReason() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const { reasonId } = useParams();\n  const rows = useSelector(selectReason);\n  const selected = useSelector(selectedReason);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n  const record = rows.find((row) => row._id === reasonId);\n  const reason = (typeof record !== 'undefined') ? record : selected;\n  const [indexes, setIndexes] = React.useState([]);\n  const [counter, setCounter] = React.useState(0);\n  const defaultValues = {\n    _id: reason._id,\n    name: reason.name,\n    description: reason.description\n  }\n\n  const [description, setDescription] = useState(defaultValues.description);\n  const { register, unregister, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'update') {\n          setMessage('Reason updated!');\n          setSnackOpen(true);\n          dispatch(setUpdated(false));\n        } else if (action == 'delete') {\n          const pageNum = (localStorage.getItem('page') !== 'null') ? localStorage.getItem('page') : 1;\n          history.push('/reason/?page=' + pageNum + '&deleted=true')\n        }\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchSingleReason(reasonId));\n    } else {\n      let descriptionIndex = [];\n\n      if (defaultValues.description) {\n        for (let i = 0; i < reason.description.length; i++) {\n          descriptionIndex.push(i);\n          const fieldName = `description[${i}]`;\n          setValue(fieldName, defaultValues.description[i]);\n        }\n        setIndexes(prevIndexes => descriptionIndex);\n        setCounter(defaultValues.description.length);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n\n    if (typeof query.created !== 'undefined') {\n      setMessage('Reason created');\n      setSnackOpen(true);\n    }\n  }, [history.location.search])\n\n  useEffect(() => {\n    if (typeof selected.name !== 'undefined') {\n      setValue('_id', defaultValues._id);\n      setValue('name', defaultValues.name);\n\n      let descriptionIndex = [];\n      let descriptionList = [];\n\n      if (defaultValues.description) {\n        for (let i = 0; i < reason.description.length; i++) {\n          descriptionIndex.push(i);\n          descriptionList.push(reason.description[i]);\n          const fieldName = `description[${i}]`;\n          setValue(fieldName, defaultValues.description[i]);\n        }\n        setIndexes(prevIndexes => descriptionIndex);\n        setCounter(defaultValues.description.length);\n        setDescription([...descriptionList]);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    if (typeof getValues('description') !== 'undefined') {\n      setAction('update');\n      dispatch(updateReason(getValues()));\n    }\n  };\n\n  const addDescription = () => {\n    setIndexes(prevIndexes => [...prevIndexes, counter]);\n    setCounter(prevCounter => prevCounter + 1);\n\n    const lastRecordIndex = indexes.length;\n    const fieldName = `description[${lastRecordIndex}]`;\n    register(fieldName, { required: true });\n  };\n\n  const removeDescription = () => {\n    setIndexes(prevIndexes => [...prevIndexes.filter(item => item !== indexes.length - 1)]);\n    setCounter(prevCounter => prevCounter - 1);\n\n    const lastRecordIndex = indexes.length - 1;\n    const tempReason = [...description];\n    tempReason.splice(lastRecordIndex, 1);\n    setDescription([...tempReason]);\n    setValue('description', [...tempReason]);\n\n    const fieldName = `description[${lastRecordIndex}]`;\n    unregister('description');\n  };\n\n  const checkEmptyField = (index, errors) => {\n    if (typeof (errors.description) !== 'undefined') {\n      if (typeof errors.description[index] !== 'undefined') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>Update Reason of Reporting</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n            <DeleteDialog\n              ids={[reason._id]}\n              label=\"reason\"\n              onSave={() => {\n                setAction('delete');\n                dispatch(deleteReason({ ids: [reason._id] }));\n              }}\n              render={(open) => (\n                <Button\n                  className={classes.deleteButton}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  startIcon={<DeleteIcon />}\n                  onClick={open}\n                >\n                  Delete\n                </Button>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={8}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Name of Reason</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={reason.name}\n                        error={true ? errors.name?.type === \"required\" : false}\n                        {...register('name', { required: true })}\n                        onChange={(e) => { setValue('name', e.target.value) }}\n                        defaultValue={reason.name}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.name?.type === \"required\" && <span className=\"error\">Name of reason is required</span>}\n                  </div>\n\n                  <Grid container spacing={3}>\n                    <Grid item xs={8}>\n                      {indexes.map((index) => {\n                        const fieldName = `description[${index}]`;\n\n                        return <div key={index} className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                          <label>Description #{index + 1}</label>\n                          <div className={'inputContainer'}>\n                            <TextField\n                              key={`description-${index}`}\n                              multiline\n                              rows={2}\n                              rowsMax={4}\n                              error={checkEmptyField(index, errors)}\n                              {...register(fieldName, { required: true })}\n                              onChange={(e) => { setValue(fieldName, e.target.value) }}\n                              variant=\"outlined\"\n                              fullWidth={true}\n                              defaultValue={description[index]}\n                            />\n                          </div>\n                          {checkEmptyField(index, errors) && <span className=\"error\">Description is required</span>}\n                        </div>\n                      })}\n                      <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        component=\"span\"\n                        onClick={addDescription}\n                      >\n                        Add Description\n                      </Button>\n                      {indexes.length > 0 &&\n                        <Button\n                          variant=\"outlined\"\n                          className={classes.removeDescription}\n                          component=\"span\"\n                          onClick={removeDescription}\n                        >\n                          Remove Description\n                        </Button>\n                      }\n                      {isSubmitted && typeof getValues('description') == 'undefined' &&\n                        <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                          <span className=\"error\">Min 1 description is required</span>\n                        </div>\n                      }\n                    </Grid>\n                  </Grid>\n\n\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Update\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  )\n}","/Users/zincchuang/Documents/boogizfront/src/API/Reason/fetchSingleReason.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Reason/updateReason.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Reporting/Redux/reportingSlice.js",["776"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const reportingSlice = createSlice({\n  name: \"reporting\",\n  initialState: {\n    list: [],\n    loading: false,\n    updating: false,\n    updated: false,\n    error: false,\n    selected: {},\n    total: 0,\n    page: 1,\n    pageLoaded: []\n  },\n  reducers: {\n    add: (state, action) => {\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter((item) => {\n        return !removedIds.includes(item._id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map((item) => {\n        if (item._id === action.payload._id) {\n          return action.payload;\n        }\n        return item;\n      });\n    },\n    fetch: (state, action) => {\n      if (state.list.length === 0) {\n        for (let i = 0; i < parseFloat(action.payload.data['totalReports']); i++) {\n          state.list.push({});\n        }\n        state.list = [...state.list];\n        state.total = parseFloat(action.payload.data['totalReports']);\n      }\n      const offset = parseFloat(action.payload.offset) - 1;\n      const arrayList = [...state.list];\n\n      action.payload.data['reports'].map((item, index) => {\n        arrayList[(offset * 25) + (index)] = item;\n      });\n\n      state.pageLoaded.push(offset);\n      state.page = offset;\n      state.list = [...arrayList];\n    },\n    throwError: (state, action) => {\n      state.error = action.payload;\n    },\n    get: (state, action) => {\n      state.selected = { ...state.selected, ...action.payload };\n    },\n    setUpdating: (state, action) => {\n      state.updating = action.payload;\n    },\n    setUpdated: (state, action) => {\n      state.updated = action.payload;\n    },\n    changePage: (state, action) => {\n      state.page = action.payload;\n    },\n    clearList: (state, action) => {\n      state.list = [];\n    }\n  },\n});\n\nexport const { add, remove, update, fetch, get, throwError, setUpdating, setUpdated, changePage, clearList } = reportingSlice.actions;\n\nexport const selectReporting = (state) => state.reporting.list;\nexport const selectedReporting = (state) => state.reporting.selected;\nexport const selectTotalReporting = (state) => state.reporting.total;\nexport const selectCurrentPage = (state) => state.reporting.page;\nexport const selectPageLoaded = (state) => state.reporting.pageLoaded;\nexport const selectLoading = (state) => state.reporting.loading;\nexport const selectError = (state) => state.reporting.error;\nexport const selectUpdating = (state) => state.reporting.updating;\nexport const selectUpdated = (state) => state.reporting.updated;\n\nexport default reportingSlice.reducer;\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Reporting/Redux/reporting.js",["777","778","779","780","781","782","783","784","785"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectReporting, selectTotalReporting, selectCurrentPage, selectPageLoaded, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated, changePage, clearList } from './reportingSlice';\nimport { fetchReporting } from '../../../API/Reporting/fetchReporting';\nimport { deleteReason } from '../../../API/Reason/deleteReason';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\n\nimport useToken from '../../../useToken';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  let stabilizedThis = [];\n\n  for (let index = 0; index < array.length; index++) {\n    if (typeof array[index]['_id'] !== 'undefined') {\n      stabilizedThis.push([array[index], index]);\n    } else {\n      stabilizedThis.push([{}, index]);\n    }\n  }\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst headCells = [\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Issue \",\n    width: 400\n  },\n  {\n    id: \"postId\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Post ID \",\n  },\n  {\n    id: \"userId\",\n    numeric: false,\n    disablePadding: false,\n    label: \"User ID \",\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell style={{ width: '0%' }} padding=\"checkbox\">\n          <Checkbox\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n            width={headCell.width ? headCell.width : null}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n}));\n\nexport default function Reason(props) {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const currentPage = useSelector(selectCurrentPage);\n  const pageLoaded = useSelector(selectPageLoaded);\n  const totalRecord = useSelector(selectTotalReporting);\n  const rows = useSelector(selectReporting);\n  const loading = useSelector(selectLoading);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [status, setStatus] = useState(false);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n  const [selected, setSelected] = React.useState([]);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n  const [page, setPage] = React.useState(0);\n\n  // todo with snacks\n  const [snackOpen, setSnackOpen] = React.useState(false);\n  const dispatch = useDispatch();\n  const { token } = useToken();\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let offset = '';\n\n    if (typeof query.page !== 'undefined') {\n      offset = parseInt(query.page);\n    }\n    if (rows.length === 0) {\n      dispatch(fetchReporting(status, offset));\n    } else {\n      if (offset !== '') {\n        redirectPage((offset - 1), false);\n      }\n    }\n  }, [dispatch, rows]);\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (location.pathname.indexOf('reporting') > -1) {\n        if (location.search === '') {\n          redirectPage(0, false);\n        }\n      }\n    })\n  }, [history]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let pageNum = 1;\n    let maxPage = 1;\n\n    if (typeof query.page !== 'undefined') {\n      pageNum = parseInt(query.page);\n      maxPage = Math.floor(rows.length / rowsPerPage);\n\n      if (typeof query.deleted !== 'undefined') {\n        if (pageNum > maxPage && maxPage > 0) {\n          while (pageNum > maxPage) {\n            pageNum -= 1;\n\n            if (pageNum === 0) {\n              pageNum = 1;\n            }\n          }\n        }\n      }\n\n      if (maxPage > 0) {\n        setPage(pageNum - 1);\n      }\n    }\n    if (typeof query.deleted !== 'undefined') {\n      setMessage('Reporting deleted');\n      setSnackOpen(true);\n\n      history.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n\n      let offset = '';\n\n      if (typeof query.page !== 'undefined') {\n        offset = parseInt(query.page);\n      }\n      // dispatch(clearList());\n      // dispatch(fetchReporting(offset));\n    }\n  }, [history.location.search]);\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'delete') {\n          setMessage(\n            `${selected.length} Reporting${selected.length > 1 ? \"s\" : \"\"\n            } Deleted`\n          );\n          setSelected([]);\n        }\n        setSnackOpen(true);\n        dispatch(setUpdated(false));\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n._id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const selectTableRow = (id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, pageNum) => {\n    redirectPage(pageNum, true);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const redirectPage = (pageNum, changeRoute) => {\n    setPage(pageNum);\n\n    if (pageLoaded.indexOf(pageNum) === -1) {\n      dispatch(fetchReporting(pageNum + 1));\n    } else {\n      dispatch(changePage(pageNum));\n    }\n\n    localStorage.setItem('page', (pageNum + 1));\n    if (changeRoute) {\n      history.replace({ pathname: '/reporting/', search: `?page=${(pageNum + 1)}` });\n    }\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={sharedClasses.headerContainer}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{'Reporting Cases'}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            {selected.length > 0 && (\n              <DeleteDialog\n                ids={selected}\n                label=\"reason of reporting\"\n                onSave={() => {\n                  setAction('delete');\n                  dispatch(deleteReason({ ids: selected, token }));\n                }}\n                render={(open) => (\n                  <Button\n                    className={classes.deleteButton}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={open}\n                  >\n                    {\" \"}\n                    Delete {selected.length} selected\n                  </Button>\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      <SummaryCard\n        value={\n          <>\n            <TableContainer>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={\"small\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                />\n                <TableBody>\n                  {stableSort(rows, getComparator(order, orderBy))\n                    .slice(\n                      currentPage * rowsPerPage,\n                      currentPage * rowsPerPage + rowsPerPage\n                    )\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          onClick={(e) => {\n                            if (\n                              e.target.type === \"checkbox\" ||\n                              e.target.className.indexOf(\"Checkbox\") > 0\n                            ) {\n                              return;\n                            }\n                            history.push(`/reporting/${row._id}`);\n                          }}\n                          key={`person-${row._id}`}\n                          selected={isItemSelected}\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          <TableCell\n                            padding=\"checkbox\"\n                            onClick={(e) => {\n                              selectTableRow(row._id);\n                            }}\n                          >\n                            <Checkbox\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(e) => {\n                                selectTableRow(row._id);\n                              }}\n                            />\n                          </TableCell>\n                          <TableCell\n                            component=\"td\"\n                            scope=\"row\"\n                            padding=\"default\"\n                          >\n                            {row.reasonId.name}\n                          </TableCell>\n                          <TableCell\n                            component=\"td\"\n                            scope=\"row\"\n                            padding=\"default\"\n                          >\n                            {row.postId._id}\n                          </TableCell>\n                          <TableCell\n                            component=\"td\"\n                            scope=\"row\"\n                            padding=\"default\"\n                          >\n                            {row.userId._id}\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[]}\n              component=\"div\"\n              count={totalRecord}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </>\n        }\n      />\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/Reporting/fetchReporting.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Option/Redux/optionSlice.js",["786"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const optionSlice = createSlice({\n  name: \"option\",\n  initialState: {\n    list: [],\n    loading: false,\n    updating: false,\n    updated: false,\n    error: false,\n    selected: {},\n    total: 0,\n    page: 1,\n    pageLoaded: []\n  },\n  reducers: {\n    add: (state, action) => {\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter((item) => {\n        return !removedIds.includes(item._id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map((item) => {\n        if (item._id === action.payload._id) {\n          return action.payload;\n        }\n        return item;\n      });\n    },\n    fetch: (state, action) => {\n      if (state.list.length === 0) {\n        for (let i = 0; i < parseFloat(action.payload.data['totalOptions']); i++) {\n          state.list.push({});\n        }\n        state.list = [...state.list];\n        state.total = parseFloat(action.payload.data['totalOptions']);\n      }\n      const offset = parseFloat(action.payload.offset) - 1;\n      const arrayList = [...state.list];\n\n      action.payload.data['options'].map((item, index) => {\n        arrayList[(offset * 25) + (index)] = item;\n      });\n\n      state.pageLoaded.push(offset);\n      state.page = offset;\n      state.list = [...arrayList];\n    },\n    throwError: (state, action) => {\n      state.error = action.payload;\n    },\n    get: (state, action) => {\n      state.selected = { ...state.selected, ...action.payload };\n    },\n    setUpdating: (state, action) => {\n      state.updating = action.payload;\n    },\n    setUpdated: (state, action) => {\n      state.updated = action.payload;\n    },\n    changePage: (state, action) => {\n      state.page = action.payload;\n    },\n    clearList: (state, action) => {\n      state.list = [];\n    }\n  },\n});\n\nexport const { add, remove, update, fetch, get, throwError, setUpdating, setUpdated, changePage, clearList } = optionSlice.actions;\n\nexport const selectOption = (state) => state.option.list;\nexport const selectedOption = (state) => state.option.selected;\nexport const selectTotalOption = (state) => state.option.total;\nexport const selectCurrentPage = (state) => state.option.page;\nexport const selectPageLoaded = (state) => state.option.pageLoaded;\nexport const selectLoading = (state) => state.option.loading;\nexport const selectError = (state) => state.option.error;\nexport const selectUpdating = (state) => state.option.updating;\nexport const selectUpdated = (state) => state.option.updated;\n\nexport default optionSlice.reducer;\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Option/Redux/option.js",["787","788","789","790","791","792","793","794"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectOption, selectTotalOption, selectCurrentPage, selectPageLoaded, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated, changePage, clearList } from './optionSlice';\nimport { createOption } from \"../../../API/Option/createOption\";\nimport { updateOption } from \"../../../API/Option/updateOption\";\nimport { fetchOption } from '../../../API/Option/fetchOption';\nimport { deleteOption } from '../../../API/Option/deleteOption';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\nimport AddOptionDialog from \"../../Option/AddOptionDialog\";\nimport EditOptionDialog from \"../../Option/EditOptionDialog\";\n\nimport useToken from '../../../useToken';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  let stabilizedThis = [];\n\n  for (let index = 0; index < array.length; index++) {\n    if (typeof array[index]['_id'] !== 'undefined') {\n      stabilizedThis.push([array[index], index]);\n    } else {\n      stabilizedThis.push([{}, index]);\n    }\n  }\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst headCells = [\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Name \",\n    width: 170\n  },\n  {\n    id: \"value\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Value \",\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell style={{ width: '0%' }} padding=\"checkbox\">\n          <Checkbox\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n            width={headCell.width ? headCell.width : null}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n}));\n\nexport default function Reason(props) {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const currentPage = useSelector(selectCurrentPage);\n  const pageLoaded = useSelector(selectPageLoaded);\n  const totalRecord = useSelector(selectTotalOption);\n  const rows = useSelector(selectOption);\n  const loading = useSelector(selectLoading);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  // todo with snacks\n  const [snackOpen, setSnackOpen] = React.useState(false);\n  const dispatch = useDispatch();\n  const { token } = useToken();\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let offset = '';\n\n    if (typeof query.page !== 'undefined') {\n      offset = parseInt(query.page);\n    }\n    if (rows.length === 0) {\n      dispatch(fetchOption(offset));\n    } else {\n      if (offset !== '') {\n        redirectPage((offset - 1), false);\n      }\n    }\n  }, [dispatch, rows]);\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (location.pathname.indexOf('option') > -1) {\n        if (location.search === '') {\n          redirectPage(0, false);\n        }\n      }\n    })\n  }, [history]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let pageNum = 1;\n    let maxPage = 1;\n\n    if (typeof query.page !== 'undefined') {\n      pageNum = parseInt(query.page);\n      maxPage = Math.floor(rows.length / rowsPerPage);\n\n      if (typeof query.deleted !== 'undefined') {\n        if (pageNum > maxPage && maxPage > 0) {\n          while (pageNum > maxPage) {\n            pageNum -= 1;\n\n            if (pageNum === 0) {\n              pageNum = 1;\n            }\n          }\n        }\n      }\n\n      if (maxPage > 0) {\n        setPage(pageNum - 1);\n      }\n    }\n    if (typeof query.deleted !== 'undefined') {\n      setMessage('Option deleted');\n      setSnackOpen(true);\n\n      history.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n\n      let offset = '';\n\n      if (typeof query.page !== 'undefined') {\n        offset = parseInt(query.page);\n      }\n      // dispatch(clearList());\n      // dispatch(fetchOption(offset));\n    }\n  }, [history.location.search]);\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'delete') {\n          setMessage(\n            `${selected.length} Option${selected.length > 1 ? \"s\" : \"\"\n            } Deleted`\n          );\n          setSelected([]);\n        }\n        setSnackOpen(true);\n        dispatch(setUpdated(false));\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n._id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const selectTableRow = (id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, pageNum) => {\n    redirectPage(pageNum, true);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const redirectPage = (pageNum, changeRoute) => {\n    setPage(pageNum);\n\n    if (pageLoaded.indexOf(pageNum) === -1) {\n      dispatch(fetchOption(pageNum + 1));\n    } else {\n      dispatch(changePage(pageNum));\n    }\n\n    localStorage.setItem('page', (pageNum + 1));\n    if (changeRoute) {\n      history.replace({ pathname: '/option/', search: `?page=${(pageNum + 1)}` });\n    }\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={sharedClasses.headerContainer}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{'Options'}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <AddOptionDialog\n              edge=\"end\"\n              onSave={(data) => {\n                dispatch(createOption(data));\n                setMessage('New option added');\n                setSnackOpen(true);\n              }}\n              render={(open) => (\n                <Button\n                  edge=\"end\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  startIcon={<AddIcon />}\n                  onClick={open}\n                >\n                  New Option\n                </Button>\n              )}\n            />\n            {selected.length > 0 && (\n              <DeleteDialog\n                ids={selected}\n                label=\"option\"\n                onSave={() => {\n                  setAction('delete');\n                  dispatch(deleteOption({ ids: selected, token }));\n                }}\n                render={(open) => (\n                  <Button\n                    className={classes.deleteButton}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={open}\n                  >\n                    {\" \"}\n                    Delete {selected.length} selected\n                  </Button>\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      <SummaryCard\n        value={\n          <>\n            <TableContainer>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={\"small\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                />\n                <TableBody>\n                  {stableSort(rows, getComparator(order, orderBy))\n                    .slice(\n                      currentPage * rowsPerPage,\n                      currentPage * rowsPerPage + rowsPerPage\n                    )\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <EditOptionDialog\n                          edge=\"end\"\n                          key={`option-${row._id}`}\n                          data={row}\n                          onSave={(data) => {\n                            dispatch(updateOption(data));\n                            setMessage('Option updated');\n                            setSnackOpen(true);\n                          }}\n                          render={(open) => (\n                            <TableRow\n                              hover\n                              role=\"checkbox\"\n                              aria-checked={isItemSelected}\n                              tabIndex={-1}\n                              onClick={(e) => {\n                                if (\n                                  e.target.type === \"checkbox\" ||\n                                  e.target.className.indexOf(\"Checkbox\") > 0\n                                ) {\n                                  return;\n                                }\n                                open();\n                              }}\n                              key={`person-${row._id}`}\n                              selected={isItemSelected}\n                              style={{ cursor: \"pointer\" }}\n                            >\n                              <TableCell\n                                padding=\"checkbox\"\n                                onClick={(e) => {\n                                  selectTableRow(row._id);\n                                }}\n                              >\n                                <Checkbox\n                                  checked={isItemSelected}\n                                  inputProps={{ \"aria-labelledby\": labelId }}\n                                  onChange={(e) => {\n                                    selectTableRow(row._id);\n                                  }}\n                                />\n                              </TableCell>\n                              <TableCell\n                                component=\"td\"\n                                scope=\"row\"\n                                padding=\"default\"\n                              >\n                                {row.name}\n                              </TableCell>\n                              <TableCell\n                                component=\"td\"\n                                scope=\"row\"\n                                padding=\"default\"\n                              >\n                                {row.value}\n                              </TableCell>\n                            </TableRow>\n                          )}\n                        />\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[]}\n              component=\"div\"\n              count={totalRecord}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </>\n        }\n      />\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/Option/fetchOption.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Option/AddOptionDialog.js",["795","796","797","798","799","800"],"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport FileUpload from \"../../Components/FileUpload/FileUpload\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogActions: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingLeft: '16px',\n    paddingRight: '10px'\n  },\n  fileUpload: {\n    margin: '15px 0 5px'\n  },\n  uploadContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  inputWidth: {\n    width: \"400px\"\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"0.9rem\",\n    fontWeight: \"500\",\n    color: \"#707070\",\n    marginBottom: theme.spacing(1)\n  },\n}));\n\nexport default function AddOptionDialog({ data, render, onSave }) {\n  const sharedClasses = useSharedClasses();\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [type, setType] = useState('value');\n  const [fileName, setFileName] = useState(null);\n\n  useEffect(() => {\n    if (open === false) {\n      setTimeout(() => {\n        setType('value');\n        setFileName(null);\n      }, 500);\n    }\n  }, [open]);\n\n  const { register, unregister, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur'\n  });\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    unregister('name',\n      { keepValid: true }\n    );\n    unregister('value',\n      { keepValid: true }\n    );\n    unregister('fileUpload',\n      { keepValid: true }\n    );\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    onSave && onSave(getValues());\n    handleClose();\n  };\n\n  const switchUploadType = () => {\n    if (type == 'value') {\n      unregister('value');\n      setType('fileUpload');\n    } else {\n      unregister('fileUpload');\n      setType('value');\n    }\n  }\n\n  return (\n    <>\n      {render(handleClickOpen)}\n      <Dialog\n        maxWidth=\"xs\"\n        open={open}\n        fullWidth\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n          <DialogTitle id=\"form-dialog-title\">\n            {data ? \"Edit\" : \"Add\"} Option{\" \"}\n          </DialogTitle>\n          <DialogContent>\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Name</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={classes.inputWidth}\n                  onChange={(e) => {\n                    setValue('name', e.target.value);\n                  }}\n                  {...register('name', { required: true })}\n                  error={errors.name?.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.name?.type === \"required\" && <span className=\"error\">Option name is required</span>}\n            </div>\n\n            {type === 'value' &&\n              <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                <label>Value</label>\n                <div className={'inputContainer'}>\n                  <TextField\n                    className={classes.inputWidth}\n                    onChange={(e) => {\n                      setValue('value', e.target.value);\n                    }}\n                    {...register('value', { required: true })}\n                    error={errors.value?.type === \"required\" ? true : false}\n                    variant=\"outlined\"\n                    fullWidth={true}\n                  />\n                </div>\n                {errors.value?.type === \"required\" && <span className=\"error\">Value is required</span>}\n              </div>\n            }\n            {type === 'fileUpload' && fileName !== null &&\n              <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                <div className={classes.formHeading}>File Path</div>\n                <div className={classes.uploadContainer}>\n                  <TextField disabled\n                    className={classes.inputWidth}\n                    error={errors.value?.type === \"required\" ? true : false}\n                    defaultValue={fileName}\n                    variant=\"outlined\"\n                    fullWidth={true}\n                  />\n                  <div>\n                    <IconButton aria-label=\"delete\" onClick={() => { setValue('fileUpload', ''); setFileName(null); }}>\n                      <DeleteIcon />\n                    </IconButton>\n                  </div>\n                </div>\n              </div>\n            }\n            {type === 'fileUpload' && fileName === null &&\n              <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                <div className={classes.formHeading}>File Upload</div>\n                <FileUpload\n                  {...register('fileUpload', { required: true })}\n                  accept=\".mp3, .mp4, .jpg, .png, .jpeg\"\n                  name=\"fileUpload\"\n                  className={classes.fileUpload}\n                  onFileChange={(file) => {\n                    setValue('fileUpload', file);\n                    setFileName(URL.createObjectURL(file));\n                  }}\n                />\n                {errors.fileUpload?.type === \"required\" && <span className=\"error\">Please pick a file for option value</span>}\n              </div>\n            }\n          </DialogContent>\n          <DialogActions className={classes.dialogActions}>\n            {type === 'value' &&\n              <Button onClick={switchUploadType} color=\"primary\">\n                Switch to File Upload\n              </Button>\n            }\n            {type === 'fileUpload' &&\n              <Button onClick={switchUploadType} color=\"primary\">\n                Switch to Value\n              </Button>\n            }\n            <div>\n              <Button onClick={handleClose} color=\"primary\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" color=\"primary\">\n                Save\n              </Button>\n            </div>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/Option/createOption.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Option/deleteOption.js",["801","802"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/Option/Redux/optionSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteOption = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async optionId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/option/${optionId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(error.message));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Option/EditOptionDialog.js",["803","804","805","806"],"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport FileUpload from \"../../Components/FileUpload/FileUpload\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogActions: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingLeft: '16px',\n    paddingRight: '10px'\n  },\n  fileUpload: {\n    margin: '15px 0 5px'\n  },\n  uploadContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  inputWidth: {\n    width: \"400px\"\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"0.9rem\",\n    fontWeight: \"500\",\n    color: \"#707070\",\n    marginBottom: theme.spacing(1)\n  },\n}));\n\nexport default function EditOptionDialog({ data, render, onSave }) {\n  const sharedClasses = useSharedClasses();\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n  const [type, setType] = useState('value');\n  const [fileName, setFileName] = useState(null);\n\n  let defaultValues = {\n    _id: data._id,\n    name: data.name,\n    value: data.value\n  };\n\n  useEffect(() => {\n    if (open === false) {\n      setTimeout(() => {\n        setType('value');\n        setFileName(null);\n      }, 500);\n    } else {\n      const ext = data.value.split('.').pop();\n\n      if (ext === 'mp4' || ext === 'png' || ext === 'jpg' || ext === 'jpeg') {\n        setType('fileUpload');\n        setValue('fileUpload', data.value);\n\n      } else {\n        setType('value');\n        setValue('value', data.value);\n      }\n\n      setFileName(data.value);\n    }\n  }, [open]);\n\n  const { register, unregister, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    unregister('name',\n      { keepValid: true }\n    );\n    unregister('value',\n      { keepValid: true }\n    );\n    unregister('fileUpload',\n      { keepValid: true }\n    );\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    onSave && onSave(getValues());\n    handleClose();\n  };\n\n  const switchUploadType = () => {\n    if (type === 'value') {\n      unregister('value');\n      setType('fileUpload');\n      setFileName(null);\n    } else {\n      unregister('fileUpload');\n      setType('value');\n      setValue('value', '');\n    }\n  }\n\n  return (\n    <>\n      {render(handleClickOpen)}\n      <Dialog\n        maxWidth=\"xs\"\n        open={open}\n        fullWidth\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n          <DialogTitle id=\"form-dialog-title\">\n            Edit Option{\" \"}\n          </DialogTitle>\n          <DialogContent>\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Name</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={classes.inputWidth}\n                  onChange={(e) => {\n                    setValue('name', e.target.value);\n                  }}\n                  {...register('name', { required: true })}\n                  defaultValue={defaultValues.name}\n                  error={errors.name?.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.name?.type === \"required\" && <span className=\"error\">Option name is required</span>}\n            </div>\n\n            {type === 'value' &&\n              <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                <label>Value</label>\n                <div className={'inputContainer'}>\n                  <TextField\n                    className={classes.inputWidth}\n                    onChange={(e) => {\n                      setValue('value', e.target.value);\n                    }}\n                    {...register('value', { required: true })}\n                    error={errors.value?.type === \"required\" ? true : false}\n                    defaultValue={getValues('value')}\n                    variant=\"outlined\"\n                    fullWidth={true}\n                  />\n                </div>\n                {errors.value?.type === \"required\" && <span className=\"error\">Value is required</span>}\n              </div>\n            }\n            {type === 'fileUpload' && fileName !== null &&\n              <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                <div className={classes.formHeading}>File Path</div>\n                <div className={classes.uploadContainer}>\n                  <TextField\n                    disabled\n                    className={classes.inputWidth}\n                    error={errors.value?.type === \"required\" ? true : false}\n                    defaultValue={fileName}\n                    variant=\"outlined\"\n                    fullWidth={true}\n                  />\n                  <div>\n                    <IconButton aria-label=\"delete\" onClick={() => { setValue('fileUpload', ''); setFileName(null); }}>\n                      <DeleteIcon />\n                    </IconButton>\n                  </div>\n                </div>\n              </div>\n            }\n            {type === 'fileUpload' && fileName === null &&\n              <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                <div className={classes.formHeading}>File Upload</div>\n                <FileUpload\n                  {...register('fileUpload', { required: true })}\n                  accept=\".mp3, .mp4\"\n                  name=\"fileUpload\"\n                  className={classes.fileUpload}\n                  onFileChange={(file) => {\n                    setValue('fileUpload', file);\n                    setFileName(URL.createObjectURL(file));\n                  }}\n                />\n                {errors.fileUpload?.type === \"required\" && <span className=\"error\">Please pick a file for option value</span>}\n              </div>\n            }\n          </DialogContent>\n          <DialogActions className={classes.dialogActions}>\n            {type === 'value' &&\n              <Button onClick={switchUploadType} color=\"primary\">\n                Switch to File Upload\n              </Button>\n            }\n            {type === 'fileUpload' &&\n              <Button onClick={switchUploadType} color=\"primary\">\n                Switch to Value\n              </Button>\n            }\n            <div>\n              <Button onClick={handleClose} color=\"primary\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" color=\"primary\">\n                Save\n              </Button>\n            </div>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/Option/updateOption.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Reporting/EditReporting.js",["807","808","809","810","811","812","813","814","815","816","817"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectReporting, selectedReporting, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/reportingSlice\";\nimport { updateReporting } from \"../../API/Reporting/updateReporting\";\nimport { deleteReporting } from \"../../API/Reporting/deleteReporting\";\nimport { fetchSingleReporting } from \"../../API/Reporting/fetchSingleReporting\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport ReactPlayer from \"react-player\";\nimport DeleteDialog from \"../../Components/Dialog/DeleteDialog\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  actionGroup: {\n    display: \"flex\",\n    width: \"200px\",\n    justifyContent: \"flex-end\",\n    marginRight: 0,\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 180\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  musicContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    \"& > div\": {\n      display: 'flex',\n      paddingLeft: '5px'\n    }\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  infoContainer: {\n    boxShadow: 'unset',\n    border: 'solid 1px #ccc',\n    margin: '8px 0'\n  },\n  uploadContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    \"& > div\": {\n      width: 'auto !important',\n      marginBottom: '15px',\n    },\n    \"& video\": {\n      display: \"flex\",\n      border: \"solid 1px #ccc\",\n      background: '#5A5A5A',\n    }\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    color: \"#8f9cbb\"\n  },\n  checkContainer: {\n    background: \"#efefef\",\n    display: \"flex\",\n    padding: \"10px 20px\",\n    \"& label\": {\n      marginLeft: \"0\"\n    },\n    \"& .MuiTypography-body1\": {\n      fontFamily: \"Roboto\"\n    }\n  }\n}));\n\nexport default function EditReporting() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const { reportingId } = useParams();\n  const rows = useSelector(selectReporting);\n  const selected = useSelector(selectedReporting);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n  const record = rows.find((row) => row._id === reportingId);\n  const reporting = (typeof record !== 'undefined') ? record : selected;\n  const defaultValues = {\n    _id: reporting._id,\n    hasResolve: reporting.hasResolve || false\n  }\n\n  const [hasResolve, setHasResolve] = React.useState(defaultValues.hasResolve);\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'update') {\n          setMessage('Case updated!');\n          setSnackOpen(true);\n          dispatch(setUpdated(false));\n        } else if (action == 'delete') {\n          const pageNum = (typeof localStorage.getItem('page') !== 'undefined') ? localStorage.getItem('page') : 1;\n          history.push('/report/?page=' + pageNum + '&deleted=true')\n        }\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchSingleReporting(reportingId));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (typeof selected._id !== 'undefined') {\n      setValue('_id', defaultValues._id);\n      setValue('hasResolve', defaultValues.hasResolve);\n      setHasResolve(defaultValues.hasResolve);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    setAction('update');\n    dispatch(updateReporting(getValues()));\n  };\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const handleChange = (event) => {\n    setValue('hasResolve', event.target.checked);\n    setHasResolve(event.target.checked);\n  };\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={5000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{\"Update Reporting Cases\"}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n            <DeleteDialog\n              ids={[reporting._id]}\n              label=\"reporting\"\n              onSave={() => {\n                setAction('delete');\n                dispatch(deleteReporting({ ids: [reporting._id] }));\n              }}\n              render={(open) => (\n                <Button\n                  className={classes.deleteButton}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  startIcon={<DeleteIcon />}\n                  onClick={open}\n                >\n                  Delete\n                </Button>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={4}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Issue Reported</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        disabled\n                        key={reporting.reasonId?.name}\n                        defaultValue={reporting.reasonId?.name}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                  </div>\n                  <div className={classes.checkContainer}>\n                    <FormControlLabel\n                      {...register('hasResolve')}\n                      control={\n                        <Switch\n                          checked={hasResolve}\n                          onChange={handleChange}\n                          name=\"checkedB\"\n                          color=\"primary\"\n                        />\n                      }\n                      label=\"Issue resolved?\"\n                      labelPlacement=\"start\"\n                    />\n                  </div>\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Update\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={5}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Video Caption</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      disabled\n                      key={reporting.postId?.caption}\n                      defaultValue={reporting.postId?.caption}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                    />\n                  </div>\n                </div>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Challenge</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      disabled\n                      key={reporting.postId?.type}\n                      defaultValue={reporting.postId?.type}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                    />\n                  </div>\n                </div>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Video Length</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      disabled\n                      key={reporting.postId?.videoLength}\n                      defaultValue={reporting.postId?.videoLength}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                    />\n                  </div>\n                </div>\n              </>\n            }\n          />\n\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Video Owner</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      disabled\n                      key={reporting.userId?.firstName}\n                      defaultValue={reporting.userId?.firstName + ' ' + reporting.userId?.lastName}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                    />\n                  </div>\n                </div>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Owner Username</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      disabled\n                      key={reporting.userId?.userName}\n                      defaultValue={reporting.userId?.userName}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                    />\n                  </div>\n                </div>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Real Person Video</div>\n                <div className={classes.margin + ' ' + classes.uploadContainer}>\n                  <ReactPlayer\n                    url={reporting.postId?.videoLink}\n                    controls\n                  />\n                </div>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/Reporting/fetchSingleReporting.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Challenge/Redux/challengeSlice.js",["818"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const challengeSlice = createSlice({\n  name: \"challenge\",\n  initialState: {\n    list: [],\n    loading: false,\n    updating: false,\n    updated: false,\n    error: false,\n    selected: {},\n    total: 0,\n    page: 1,\n    pageLoaded: []\n  },\n  reducers: {\n    add: (state, action) => {\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter((item) => {\n        return !removedIds.includes(item._id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map((item) => {\n        if (item._id === action.payload._id) {\n          return action.payload;\n        }\n        return item;\n      });\n    },\n    fetch: (state, action) => {\n      if (state.list.length === 0) {\n        for (let i = 0; i < parseFloat(action.payload.data['totalChallenges']); i++) {\n          state.list.push({});\n        }\n        state.list = [...state.list];\n        state.total = parseFloat(action.payload.data['totalChallenges']);\n      }\n      const offset = parseFloat(action.payload.offset) - 1;\n      const arrayList = [...state.list];\n\n      action.payload.data['challenges'].map((item, index) => {\n        arrayList[(offset * 25) + (index)] = item;\n      });\n\n      state.pageLoaded.push(offset);\n      state.page = offset;\n      state.list = [...arrayList];\n    },\n    throwError: (state, action) => {\n      state.error = action.payload;\n    },\n    get: (state, action) => {\n      state.selected = { ...state.selected, ...action.payload };\n    },\n    setUpdating: (state, action) => {\n      state.updating = action.payload;\n    },\n    setUpdated: (state, action) => {\n      state.updated = action.payload;\n    },\n    changePage: (state, action) => {\n      state.page = action.payload;\n    },\n    clearList: (state, action) => {\n      state.list = [];\n    }\n  },\n});\n\nexport const { add, remove, update, fetch, get, throwError, setUpdating, setUpdated, changePage, clearList } = challengeSlice.actions;\n\nexport const selectChallenge = (state) => state.challenge.list;\nexport const selectedChallenge = (state) => state.challenge.selected;\nexport const selectTotalChallenge = (state) => state.challenge.total;\nexport const selectCurrentPage = (state) => state.challenge.page;\nexport const selectPageLoaded = (state) => state.challenge.pageLoaded;\nexport const selectLoading = (state) => state.challenge.loading;\nexport const selectError = (state) => state.challenge.error;\nexport const selectUpdating = (state) => state.challenge.updating;\nexport const selectUpdated = (state) => state.challenge.updated;\n\nexport default challengeSlice.reducer;\n","/Users/zincchuang/Documents/boogizfront/src/Pages/User/Redux/userSlice.js",["819"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    list: [],\n    loading: false,\n    updating: false,\n    updated: false,\n    error: false,\n    selected: {},\n    total: 0,\n    page: 1,\n    pageLoaded: []\n  },\n  reducers: {\n    add: (state, action) => {\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter((item) => {\n        return !removedIds.includes(item._id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map((item) => {\n        if (item._id === action.payload._id) {\n          return action.payload;\n        }\n        return item;\n      });\n    },\n    fetch: (state, action) => {\n      if (state.list.length === 0) {\n        for (let i = 0; i < parseFloat(action.payload.data['totalUsers']); i++) {\n          state.list.push({});\n        }\n        state.list = [...state.list];\n        state.total = parseFloat(action.payload.data['totalUsers']);\n      }\n      const offset = parseFloat(action.payload.offset) - 1;\n      const arrayList = [...state.list];\n\n      action.payload.data['users'].map((item, index) => {\n        arrayList[(offset * 25) + (index)] = item;\n      });\n\n      state.pageLoaded.push(offset);\n      state.page = offset;\n      state.list = [...arrayList];\n    },\n    throwError: (state, action) => {\n      state.error = action.payload;\n    },\n    get: (state, action) => {\n      state.selected = { ...state.selected, ...action.payload };\n    },\n    setUpdating: (state, action) => {\n      state.updating = action.payload;\n    },\n    setUpdated: (state, action) => {\n      state.updated = action.payload;\n    },\n    changePage: (state, action) => {\n      state.page = action.payload;\n    },\n    clearList: (state, action) => {\n      state.list = [];\n    }\n  },\n});\n\nexport const { add, remove, update, fetch, get, throwError, setUpdating, setUpdated, changePage, clearList } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.list;\nexport const selectedUser = (state) => state.user.selected;\nexport const selectTotalUser = (state) => state.user.total;\nexport const selectCurrentPage = (state) => state.user.page;\nexport const selectPageLoaded = (state) => state.user.pageLoaded;\nexport const selectLoading = (state) => state.user.loading;\nexport const selectError = (state) => state.user.error;\nexport const selectUpdating = (state) => state.user.updating;\nexport const selectUpdated = (state) => state.user.updated;\n\nexport default userSlice.reducer;\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Challenge/AddChallenge.js",["820","821","822","823","824","825","826","827","828","829"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectChallenge, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/challengeSlice\";\nimport { createChallenge } from \"../../API/Challenge/createChallenge\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport ReactPlayer from \"react-player\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport FileUpload from \"../../Components/FileUpload/FileUpload\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  formControl: {\n    margin: `${theme.spacing(1)}px 0`,\n    minWidth: 180\n  },\n  uploadContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    \"& > div\": {\n      width: 'auto !important',\n      marginBottom: '15px',\n    },\n    \"& video\": {\n      display: \"flex\",\n      border: \"solid 1px #ccc\",\n      background: '#5A5A5A',\n    },\n    \"& img\": {\n      width: '100%',\n      marginBottom: '15px',\n    }\n  },\n  errorMessage: {\n    marginLeft: \"0\"\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    color: \"#8f9cbb\"\n  },\n}));\n\nexport default function AddChallenge() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const rows = useSelector(selectChallenge);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [challengeVideo, setChallengeVideo] = useState();\n  const [challengeImage, setChallengeImage] = useState();\n  const [thumbnail, setThumbnail] = useState();\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        dispatch(setUpdated(false));\n        history.replace({ pathname: '/challenge/' + rows[rows.length - 1]._id, search: '?created=true' });\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    dispatch(createChallenge(getValues()));\n  };\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={5000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>Add Challenge</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={9}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6} lg={4}>\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Small Thumbnail</label>\n                        <div className={'inputContainer'}>\n                          {thumbnail &&\n                            <div className={classes.margin + ' ' + classes.uploadContainer}>\n                              <img src={thumbnail} className={classes.thumbnail} />\n\n                              <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                type=\"button\"\n                                onClick={() => { setValue('thumbnail', ''); setThumbnail(''); }}\n                              >\n                                Remove\n                              </Button>\n                            </div>\n                          }\n                          {!thumbnail &&\n                            <FormControl fullWidth className={classes.margin}>\n                              <FileUpload\n                                {...register('thumbnail')}\n                                name=\"imageFile\"\n                                accept=\"image/*\"\n                                onFileChange={(file) => {\n                                  setValue('thumbnail', file);\n                                  setThumbnail(URL.createObjectURL(file));\n                                }}\n                              />\n                            </FormControl>\n                          }\n                        </div>\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Title</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        error={true ? errors.title?.type === \"required\" : false}\n                        {...register('title', { required: true })}\n                        onChange={(e) => { setValue('title', e.target.value) }}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.title?.type === \"required\" && <span className=\"error\">Title is required</span>}\n                  </div>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Description</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        multiline\n                        rows={7}\n                        rowsMax={10}\n                        error={true ? errors.description?.type === \"required\" : false}\n                        {...register('description', { required: true })}\n                        onChange={(e) => { setValue('description', e.target.value) }}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.description?.type === \"required\" && <span className=\"error\">Description is required</span>}\n                  </div>\n\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Create New\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Challenge Image</div>\n                {challengeImage &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <img src={challengeImage} />\n\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={() => { setValue('image', ''); setChallengeImage(''); }}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                }\n                {!challengeImage &&\n                  <FormControl error={true ? errors.image?.type === \"required\" : false} fullWidth className={classes.margin}>\n                    <FileUpload\n                      {...register('image')}\n                      name=\"imageFile\"\n                      accept=\"image/*\"\n                      onFileChange={(file) => {\n                        setValue('image', file);\n                        setChallengeImage(URL.createObjectURL(file));\n                      }}\n                    />\n                  </FormControl>\n                }\n              </>\n            }\n          />\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Challenge Video</div>\n                {challengeVideo &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <ReactPlayer\n                      url={challengeVideo}\n                      controls\n                    />\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={() => { setValue('video', ''); setChallengeVideo(''); }}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                }\n                {!challengeVideo &&\n                  <FormControl error={true ? errors.video?.type === \"required\" : false} fullWidth className={classes.margin}>\n                    <FileUpload\n                      {...register('video')}\n                      accept=\".mp4,video/*\"\n                      name=\"challengeFile\"\n                      onFileChange={(file) => {\n                        setValue('video', file);\n                        setChallengeVideo(URL.createObjectURL(file));\n                      }}\n                    />\n                  </FormControl>\n                }\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Challenge/Redux/challenge.js",["830","831","832","833","834","835","836","837","838","839"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectChallenge, selectTotalChallenge, selectCurrentPage, selectPageLoaded, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated, changePage, clearList } from './challengeSlice';\nimport { fetchChallenge } from '../../../API/Challenge/fetchChallenge';\nimport { deleteChallenge } from '../../../API/Challenge/deleteChallenge';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\n\nimport useToken from '../../../useToken';\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  let stabilizedThis = [];\n\n  for (let index = 0; index < array.length; index++) {\n    if (typeof array[index]['_id'] !== 'undefined') {\n      stabilizedThis.push([array[index], index]);\n    } else {\n      stabilizedThis.push([{}, index]);\n    }\n  }\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst headCells = [\n  {\n    id: \"title\",\n    numeric: false,\n    disablePadding: true,\n    label: \"Title\",\n    width: 300\n  },\n  {\n    id: \"description\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Description\",\n    width: 900\n  },\n  { id: \"active\", numeric: false, disablePadding: false, label: \"Active\" },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n            width={headCell.width ? headCell.width : null}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n}));\n\nexport default function Challenge(props) {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const currentPage = useSelector(selectCurrentPage);\n  const pageLoaded = useSelector(selectPageLoaded);\n  const totalRecord = useSelector(selectTotalChallenge);\n  const rows = useSelector(selectChallenge);\n  const loading = useSelector(selectLoading);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n  const [selected, setSelected] = React.useState([]);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n  const [page, setPage] = React.useState(0);\n\n  // todo with snacks\n  const [snackOpen, setSnackOpen] = React.useState(false);\n  const dispatch = useDispatch();\n  const { token } = useToken();\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let offset = '';\n\n    if (typeof query.page !== 'undefined') {\n      offset = parseInt(query.page);\n    }\n    console.log(rows.length);\n    if (rows.length === 0) {\n      dispatch(fetchChallenge(offset));\n    } else {\n      if (offset !== '') {\n        redirectPage((offset - 1), false);\n      }\n    }\n  }, [dispatch, rows]);\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (location.pathname.indexOf('challenge') > -1) {\n        if (location.search === '') {\n          redirectPage(0, false);\n        }\n      }\n    })\n  }, [history]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let pageNum = 1;\n    let maxPage = 1;\n\n    if (typeof query.page !== 'undefined') {\n      pageNum = parseInt(query.page);\n      maxPage = Math.floor(rows.length / rowsPerPage);\n\n      if (typeof query.deleted !== 'undefined') {\n        if (pageNum > maxPage && maxPage > 0) {\n          while (pageNum > maxPage) {\n            pageNum -= 1;\n\n            if (pageNum === 0) {\n              pageNum = 1;\n            }\n          }\n        }\n      }\n\n      if (maxPage > 0) {\n        setPage(pageNum - 1);\n      }\n    }\n    if (typeof query.deleted !== 'undefined') {\n      setMessage('Challenge deleted');\n      setSnackOpen(true);\n\n      history.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n\n      let offset = '';\n\n      if (typeof query.page !== 'undefined') {\n        offset = parseInt(query.page);\n      }\n      // dispatch(clearList());\n      // dispatch(fetchChallenge(offset));\n    }\n  }, [history.location.search]);\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'delete') {\n          setMessage(\n            `${selected.length} Challenge${selected.length > 1 ? \"s\" : \"\"\n            } Deleted`\n          );\n          setSelected([]);\n        }\n        setSnackOpen(true);\n        dispatch(setUpdated(false));\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n._id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const selectTableRow = (id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, pageNum) => {\n    redirectPage(pageNum, true);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const routeChange = () => {\n    let path = `/challenge/new`;\n    history.push(path);\n  }\n\n  const redirectPage = (pageNum, changeRoute) => {\n    setPage(pageNum);\n\n    if (pageLoaded.indexOf(pageNum) === -1) {\n      dispatch(fetchChallenge(pageNum + 1));\n    } else {\n      dispatch(changePage(pageNum));\n    }\n\n    localStorage.setItem('page', (pageNum + 1));\n    if (changeRoute) {\n      history.replace({ pathname: '/challenge/', search: `?page=${(pageNum + 1)}` });\n    }\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={sharedClasses.headerContainer}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{'Challenges'}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Button edge=\"end\" color=\"primary\" variant=\"contained\" startIcon={<AddIcon />} onClick={routeChange}>\n              New Challenge\n            </Button>\n            {selected.length > 0 && (\n              <DeleteDialog\n                ids={selected}\n                label=\"challenge\"\n                onSave={() => {\n                  setAction('delete');\n                  dispatch(deleteChallenge({ ids: selected, token }));\n                }}\n                render={(open) => (\n                  <Button\n                    className={classes.deleteButton}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={open}\n                  >\n                    {\" \"}\n                    Delete {selected.length} selected\n                  </Button>\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      <SummaryCard\n        value={\n          <>\n            <TableContainer>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={\"small\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                />\n                <TableBody>\n                  {stableSort(rows, getComparator(order, orderBy))\n                    .slice(\n                      currentPage * rowsPerPage,\n                      currentPage * rowsPerPage + rowsPerPage\n                    )\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          onClick={(e) => {\n                            if (\n                              e.target.type === \"checkbox\" ||\n                              e.target.className.indexOf(\"Checkbox\") > 0\n                            ) {\n                              return;\n                            }\n                            history.push({ pathname: `/challenge/${row._id}`, state: 'ssss' });\n                          }}\n                          key={`person-${row._id}`}\n                          selected={isItemSelected}\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          <TableCell\n                            padding=\"checkbox\"\n                            onClick={(e) => {\n                              selectTableRow(row._id);\n                            }}\n                          >\n                            <Checkbox\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(e) => {\n                                selectTableRow(row._id);\n                              }}\n                            />\n                          </TableCell>\n                          <TableCell\n                            component=\"th\"\n                            id={labelId}\n                            scope=\"row\"\n                            padding=\"none\"\n                          >\n                            {row.title}\n                          </TableCell>\n                          <TableCell align=\"left\">{row.description}</TableCell>\n                          <TableCell align=\"right\">{row.active == true ? 'True' : 'False'}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[]}\n              component=\"div\"\n              count={totalRecord}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </>\n        }\n      />\n    </Content >\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/Challenge/fetchChallenge.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Challenge/deleteChallenge.js",["840"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/Challenge/Redux/challengeSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteChallenge = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async musicId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/challenge/${musicId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(handleErrorResponse(error)));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/API/Challenge/createChallenge.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Challenge/EditChallenge.js",["841","842","843","844","845","846","847","848","849"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectChallenge, selectedChallenge, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/challengeSlice\";\nimport { updateChallenge } from \"../../API/Challenge/updateChallenge\";\nimport { deleteChallenge } from \"../../API/Challenge/deleteChallenge\";\nimport { fetchSingleChallenge } from \"../../API/Challenge/fetchSingleChallenge\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport ReactPlayer from \"react-player\";\nimport DeleteDialog from \"../../Components/Dialog/DeleteDialog\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport FileUpload from \"../../Components/FileUpload/FileUpload\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  avatarContainer: {\n    position: 'relative',\n    \"& > label\": {\n      position: 'absolute',\n      bottom: '-15px',\n      left: '70px'\n    }\n  },\n  uploadContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    \"& > div\": {\n      width: 'auto !important',\n      marginBottom: '15px',\n    },\n    \"& video\": {\n      display: \"flex\",\n      border: \"solid 1px #ccc\",\n      background: '#5A5A5A',\n    },\n    \"& img\": {\n      width: '100%',\n      marginBottom: '15px',\n    }\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  errorMessage: {\n    marginLeft: \"0\"\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    color: \"#8f9cbb\"\n  },\n}));\n\nexport default function EditChallenge() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const { challengeId } = useParams();\n  const rows = useSelector(selectChallenge);\n  const selected = useSelector(selectedChallenge);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n  const record = rows.find((row) => row._id === challengeId);\n  const challenge = (typeof record !== 'undefined') ? record : selected;\n  const defaultValues = {\n    _id: challenge._id,\n    title: challenge.title,\n    description: challenge.description,\n    active: challenge.active,\n    imageLink: challenge.imageLink,\n    videoLink: challenge.videoLink,\n    thumbnail: challenge.thumbnail,\n  }\n\n  const [challengeVideo, setChallengeVideo] = useState(defaultValues.videoLink);\n  const [challengeImage, setChallengeImage] = useState(defaultValues.imageLink);\n  const [thumbnail, setThumbnail] = useState(defaultValues.thumbnail);\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action === 'update') {\n          setMessage('Challenge updated!');\n          setSnackOpen(true);\n          dispatch(setUpdated(false));\n        } else if (action === 'delete') {\n          const pageNum = (typeof localStorage.getItem('page') !== 'undefined') ? localStorage.getItem('page') : 1;\n          history.push('/challenge/?page=' + pageNum + '&deleted=true')\n        }\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchSingleChallenge(challengeId));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n\n    if (typeof query.created !== 'undefined') {\n      setMessage('Challenge created');\n      setSnackOpen(true);\n    }\n  }, [history.location.search])\n\n  useEffect(() => {\n    if (typeof selected.title !== 'undefined') {\n      setValue('_id', defaultValues._id);\n      setValue('title', defaultValues.title);\n      setValue('description', defaultValues.description);\n      setValue('active', defaultValues.active);\n      setValue('image', defaultValues.imageLink);\n      setValue('video', defaultValues.videoLink);\n      setValue('thumbnail', defaultValues.thumbnail);\n      setChallengeImage(defaultValues.imageLink);\n      setChallengeVideo(defaultValues.videoLink);\n      setThumbnail(defaultValues.thumbnail);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    setAction('update');\n    dispatch(updateChallenge(getValues()));\n  };\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={5000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{\"Update Challenge\"}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n            <DeleteDialog\n              ids={[challenge._id]}\n              label=\"challenge\"\n              onSave={() => {\n                setAction('delete');\n                dispatch(deleteChallenge({ ids: [challenge._id] }));\n              }}\n              render={(open) => (\n                <Button\n                  className={classes.deleteButton}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  startIcon={<DeleteIcon />}\n                  onClick={open}\n                >\n                  Delete\n                </Button>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={9}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6} lg={4}>\n                      <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                        <label>Small Thumbnail</label>\n                        <div className={'inputContainer'}>\n                          {thumbnail &&\n                            <div className={classes.margin + ' ' + classes.uploadContainer}>\n                              <img src={thumbnail} className={classes.thumbnail} />\n\n                              <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                type=\"button\"\n                                onClick={() => { setValue('thumbnail', ''); setThumbnail(''); }}\n                              >\n                                Remove\n                              </Button>\n                            </div>\n                          }\n                          {!thumbnail &&\n                            <FormControl fullWidth className={classes.margin}>\n                              <FileUpload\n                                {...register('thumbnail')}\n                                name=\"imageFile\"\n                                accept=\"image/*\"\n                                onFileChange={(file) => {\n                                  setValue('thumbnail', file);\n                                  setThumbnail(URL.createObjectURL(file));\n                                }}\n                              />\n                            </FormControl>\n                          }\n                        </div>\n                      </div>\n                    </Grid>\n                  </Grid>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Title</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={challenge.title}\n                        error={true ? errors.title?.type === \"required\" : false}\n                        {...register('title', { required: true })}\n                        onChange={(e) => { setValue('title', e.target.value) }}\n                        defaultValue={challenge.title}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.title?.type === \"required\" && <span className=\"error\">Title is required</span>}\n                  </div>\n\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Description</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        multiline\n                        rows={7}\n                        rowsMax={10}\n                        key={challenge.description}\n                        error={true ? errors.description?.type === \"required\" : false}\n                        {...register('description', { required: true })}\n                        onChange={(e) => { setValue('description', e.target.value) }}\n                        defaultValue={challenge.description}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.description?.type === \"required\" && <span className=\"error\">Description is required</span>}\n                  </div>\n\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Update\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Challenge Image</div>\n                {challengeImage &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <img src={challengeImage} />\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={() => { setValue('image', ''); setChallengeImage(''); }}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                }\n                {!challengeImage &&\n                  <FormControl fullWidth className={classes.margin}>\n                    <FileUpload\n                      {...register('image')}\n                      name=\"imageFile\"\n                      accept=\"image/*\"\n                      onFileChange={(file) => {\n                        setValue('image', file);\n                        setChallengeImage(URL.createObjectURL(file));\n                      }}\n                    />\n                  </FormControl>\n                }\n              </>\n            }\n          />\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>Challenge Video</div>\n                {challengeVideo &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <ReactPlayer\n                      url={challengeVideo}\n                      controls\n                    />\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={() => { setValue('video', ''); setChallengeVideo(''); }}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                }\n                {!challengeVideo &&\n                  <FormControl fullWidth className={classes.margin}>\n                    <FileUpload\n                      {...register('video')}\n                      accept=\".mp4,video/*\"\n                      name=\"dancerTipFile\"\n                      onFileChange={(file) => {\n                        setValue('video', file);\n                        setChallengeVideo(URL.createObjectURL(file));\n                      }}\n                    />\n                  </FormControl>\n                }\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/Challenge/fetchSingleChallenge.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Challenge/updateChallenge.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Video/Redux/video.js",["850","851","852","853","854","855","856","857","858","859","860","861"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectPost, selectTotalPost, selectCurrentPage, selectPageLoaded, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated, changePage, clearList } from './videoSlice';\nimport { fetchVideo } from '../../../API/Video/fetchVideo';\nimport { deleteVideo } from '../../../API/Video/deleteVideo';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Grid from '@material-ui/core/Grid';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\n\nimport useToken from '../../../useToken';\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  let stabilizedThis = [];\n\n  for (let index = 0; index < array.length; index++) {\n    if (typeof array[index]['_id'] !== 'undefined') {\n      stabilizedThis.push([array[index], index]);\n    } else {\n      stabilizedThis.push([{}, index]);\n    }\n  }\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst headCells = [\n  {\n    id: \"caption\",\n    numeric: false,\n    disablePadding: true,\n    label: \"Caption\",\n    width: 320\n  },\n  { id: \"userName\", numeric: false, disablePadding: false, label: \"User Name\" },\n  { id: \"type\", numeric: false, disablePadding: false, label: \"Type\" },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n            width={headCell.width ? headCell.width : null}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  filterContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: \"5px 0 15px 0\",\n    \"& input\": {\n      width: \"100%\"\n    },\n    \"& .filterWrapper\": {\n      display: \"flex\",\n      width: \"200px\",\n      \"&.filterText\": {\n        width: \"300px\",\n      }\n    }\n  }\n}));\n\nexport default function Video(props) {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const currentPage = useSelector(selectCurrentPage);\n  const pageLoaded = useSelector(selectPageLoaded);\n  const totalRecord = useSelector(selectTotalPost);\n  const rows = useSelector(selectPost);\n  const loading = useSelector(selectLoading);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n  const [selected, setSelected] = React.useState([]);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n  const [page, setPage] = React.useState(0);\n\n  // todo with snacks\n  const [moveType, setMoveType] = useState(\"\");\n  const [snackOpen, setSnackOpen] = React.useState(false);\n  const dispatch = useDispatch();\n  const { token } = useToken();\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let offset = '';\n\n    if (typeof query.page !== 'undefined') {\n      offset = parseInt(query.page);\n    }\n    if (rows.length === 0) {\n      dispatch(fetchVideo(offset));\n    } else {\n      if (offset !== '') {\n        redirectPage((offset - 1), false);\n      }\n    }\n  }, [dispatch, rows]);\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (location.pathname.indexOf('video') > -1) {\n        if (location.search === '') {\n          redirectPage(0, false);\n        }\n      }\n    })\n  }, [history]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let pageNum = 1;\n    let maxPage = 1;\n\n    if (typeof query.page !== 'undefined') {\n      pageNum = parseInt(query.page);\n      maxPage = Math.floor(rows.length / rowsPerPage);\n\n      if (typeof query.deleted !== 'undefined') {\n        if (pageNum > maxPage && maxPage > 0) {\n          while (pageNum > maxPage) {\n            pageNum -= 1;\n\n            if (pageNum == 0) {\n              pageNum = 1;\n            }\n          }\n        }\n      }\n\n      if (maxPage > 0) {\n        setPage(pageNum - 1);\n      }\n    }\n    if (typeof query.deleted !== 'undefined') {\n      setMessage('Video deleted');\n      setSnackOpen(true);\n\n      history.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n\n      let offset = '';\n\n      if (typeof query.page !== 'undefined') {\n        offset = parseInt(query.page);\n      }\n      // dispatch(clearList());\n      // dispatch(fetchVideo(offset));\n    }\n  }, [history.location.search]);\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'delete') {\n          setMessage(\n            `${selected.length} Video${selected.length > 1 ? \"s\" : \"\"\n            } Deleted`\n          );\n          setSelected([]);\n        }\n        setSnackOpen(true);\n        dispatch(setUpdated(false));\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n._id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const selectTableRow = (id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, pageNum) => {\n    redirectPage(pageNum, true);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const handleChange = (e) => {\n    if (e.target.value !== moveType) {\n      dispatch(fetchVideo(1, 'type=' + e.target.value));\n    }\n    setMoveType(e.target.value);\n  };\n\n  const redirectPage = (pageNum, changeRoute) => {\n    setPage(pageNum);\n\n    if (pageLoaded.indexOf(pageNum) === -1) {\n      dispatch(fetchVideo(pageNum + 1));\n    } else {\n      dispatch(changePage(pageNum));\n    }\n\n    localStorage.setItem('page', (pageNum + 1));\n    if (changeRoute) {\n      history.replace({ pathname: '/video/', search: `?page=${(pageNum + 1)}` });\n    }\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={sharedClasses.headerContainer}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{'Videos'}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            {selected.length > 0 && (\n              <DeleteDialog\n                ids={selected}\n                label=\"music\"\n                onSave={() => {\n                  setAction('delete');\n                  dispatch(deleteVideo({ ids: selected, token }));\n                }}\n                render={(open) => (\n                  <Button\n                    className={classes.deleteButton}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={open}\n                  >\n                    {\" \"}\n                    Delete {selected.length} selected\n                  </Button>\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      <SummaryCard\n        value={\n          <>\n            <div className={classes.filterContainer}>\n              <div className=\"filterWrapper filterText\">\n                <TextField\n                  placeholder=\"Filter\"\n                  onChange={(e) => { }}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      dispatch(fetchVideo(1, 'userName=' + e.target.value));\n                    }\n                  }}\n                />\n              </div>\n              <div className=\"filterWrapper\">\n                <Select\n                  variant=\"outlined\"\n                  fullWidth={true}\n                  value={moveType}\n                  onChange={handleChange}\n                >\n                  <MenuItem value=\"\">\n                    <em>&nbsp;</em>\n                  </MenuItem>\n                  <MenuItem value={\"challenge\"}>Challenge</MenuItem>\n                  <MenuItem value={\"video\"}>Video</MenuItem>\n                </Select>\n              </div>\n            </div>\n\n            <TableContainer>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={\"small\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                />\n                <TableBody>\n                  {stableSort(rows, getComparator(order, orderBy))\n                    .slice(\n                      currentPage * rowsPerPage,\n                      currentPage * rowsPerPage + rowsPerPage\n                    )\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          onClick={(e) => {\n                            if (\n                              e.target.type === \"checkbox\" ||\n                              e.target.className.indexOf(\"Checkbox\") > 0\n                            ) {\n                              return;\n                            }\n                            history.push(`/video/${row._id}`);\n                          }}\n                          key={`person-${row._id}`}\n                          selected={isItemSelected}\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          <TableCell\n                            padding=\"checkbox\"\n                            onClick={(e) => {\n                              selectTableRow(row._id);\n                            }}\n                          >\n                            <Checkbox\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(e) => {\n                                selectTableRow(row._id);\n                              }}\n                            />\n                          </TableCell>\n                          <TableCell\n                            component=\"th\"\n                            id={labelId}\n                            scope=\"row\"\n                            padding=\"none\"\n                          >\n                            {row.caption}\n                          </TableCell>\n                          <TableCell align=\"left\">{row.userId.userName}</TableCell>\n                          <TableCell align=\"left\">{row.type}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[]}\n              component=\"div\"\n              count={totalRecord}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </>\n        }\n      />\n    </Content >\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/Pages/Video/Redux/videoSlice.js",["862","863"],"import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const videoSlice = createSlice({\n  name: \"video\",\n  initialState: {\n    list: [],\n    loading: false,\n    updating: false,\n    updated: false,\n    error: false,\n    selected: {},\n    total: 0,\n    page: 1,\n    pageLoaded: []\n  },\n  reducers: {\n    add: (state, action) => {\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter((item) => {\n        return !removedIds.includes(item._id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map((item) => {\n        if (item._id === action.payload._id) {\n          return action.payload;\n        }\n        return item;\n      });\n    },\n    fetch: (state, action) => {\n      if (state.list.length == 0) {\n        for (let i = 0; i < parseFloat(action.payload.data['totalFeeds']); i++) {\n          state.list.push({});\n        }\n        state.list = [...state.list];\n        state.total = parseFloat(action.payload.data['totalFeeds']);\n      }\n\n      const offset = parseFloat(action.payload.offset) - 1;\n      const arrayList = [...state.list];\n\n      action.payload.data['feeds'].map((item, index) => {\n        arrayList[(offset * 25) + (index)] = item;\n      });\n\n      state.pageLoaded.push(offset);\n      state.page = offset;\n      state.list = [...arrayList];\n    },\n    throwError: (state, action) => {\n      state.error = action.payload;\n    },\n    get: (state, action) => {\n      state.selected = { ...state.selected, ...action.payload };\n    },\n    setUpdating: (state, action) => {\n      state.updating = action.payload;\n    },\n    setUpdated: (state, action) => {\n      state.updated = action.payload;\n    },\n    changePage: (state, action) => {\n      state.page = action.payload;\n    },\n    clearList: (state, action) => {\n      state.list = [];\n    }\n  },\n});\n\nexport const { add, remove, update, fetch, get, throwError, setUpdating, setUpdated, changePage, clearList } = videoSlice.actions;\n\nexport const selectPost = (state) => state.video.list;\nexport const selectedPost = (state) => state.video.selected;\nexport const selectTotalPost = (state) => state.video.total;\nexport const selectCurrentPage = (state) => state.video.page;\nexport const selectPageLoaded = (state) => state.video.pageLoaded;\nexport const selectLoading = (state) => state.video.loading;\nexport const selectError = (state) => state.video.error;\nexport const selectUpdating = (state) => state.video.updating;\nexport const selectUpdated = (state) => state.video.updated;\n\nexport default videoSlice.reducer;\n","/Users/zincchuang/Documents/boogizfront/src/API/Video/deleteVideo.js",["864"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/Video/Redux/videoSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteVideo = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async postId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/post/${postId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(handleErrorResponse(error)));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/API/Video/fetchVideo.js",["865"],"import axios from \"axios\";\nimport { fetch, throwError } from '../../Pages/Video/Redux/videoSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const fetchVideo = (offset, search = '') => {\n  return async function (dispatch) {\n    try {\n      let link = `${REACT_APP_API_URL}/v1/feed/all/`;\n      let filter = [];\n\n      if (offset !== '') {\n        filter.push('offset=' + offset);\n      }\n      if (search !== '') {\n        filter.push(search);\n      }\n      if (filter.length > 0) {\n        link += '?' + filter.join('&');\n      }\n\n      const res = await axios.get(link, authHeader());\n      dispatch(fetch({ data: res.data, offset: (offset !== '') ? offset : 1 }));\n\n    } catch (error) {\n      dispatch(throwError(error.message));\n    }\n  }\n};","/Users/zincchuang/Documents/boogizfront/src/Pages/Video/EditVideo.js",["866","867","868","869","870","871","872","873","874","875","876","877"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectPost, selectedPost, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/videoSlice\";\nimport { updateVideo } from \"../../API/Video/updateVideo\";\nimport { deleteVideo } from \"../../API/Video/deleteVideo\";\nimport { fetchSingleVideo } from \"../../API/Video/fetchSingleVideo\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport ReactPlayer from \"react-player\";\nimport DeleteDialog from \"../../Components/Dialog/DeleteDialog\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport FileUpload from \"../../Components/FileUpload/FileUpload\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  actionGroup: {\n    display: \"flex\",\n    width: \"200px\",\n    justifyContent: \"flex-end\",\n    marginRight: 0,\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  avatarContainer: {\n    position: 'relative',\n    \"& > label\": {\n      position: 'absolute',\n      bottom: '-15px',\n      left: '70px'\n    }\n  },\n  uploadContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    \"& > div\": {\n      width: 'auto !important'\n    },\n    \"& video\": {\n      display: \"flex\",\n      border: \"solid 1px #ccc\",\n      width: 'auto !important'\n    }\n  },\n  musicContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    \"& > div\": {\n      display: 'flex',\n      paddingLeft: '5px'\n    }\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  errorMessage: {\n    marginLeft: \"0\"\n  },\n  uploadContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    \"& > div\": {\n      width: 'auto !important',\n      marginBottom: '15px',\n    },\n    \"& video\": {\n      display: \"flex\",\n      border: \"solid 1px #ccc\",\n      background: '#5A5A5A',\n    }\n  },\n  formHeading: {\n    fontFamily: \"Roboto\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    color: \"#8f9cbb\"\n  },\n  audioContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: theme.spacing(3),\n    \"& > div\": {\n      display: 'flex',\n      paddingLeft: '5px'\n    }\n  },\n}));\n\nexport default function EditVideo() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const { videoId } = useParams();\n  const rows = useSelector(selectPost);\n  const selected = useSelector(selectedPost);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n  const record = rows.find((row) => row._id === videoId);\n  const video = (typeof record !== 'undefined') ? record : selected;\n  const defaultValues = {\n    _id: video._id,\n    caption: video.caption,\n    hasPublish: video.hasPublish,\n    image: video.imageLink,\n    type: video.type,\n    videoLength: video.videoLength,\n    video: video.videoLink,\n  }\n\n  //const [musicFile, setMusicFile] = useState(defaultValues.musicLink);\n  const [videoFile, setVideoFile] = useState(defaultValues.video);\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action === 'update') {\n          setMessage('Video updated!');\n          setSnackOpen(true);\n          dispatch(setUpdated(false));\n        } else if (action === 'delete') {\n          const pageNum = (localStorage.getItem('page') !== 'null') ? localStorage.getItem('page') : 1;\n          history.push('/video/?page=' + pageNum + '&deleted=true')\n        }\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchSingleVideo(videoId));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n\n    if (typeof query.created !== 'undefined') {\n      setMessage('Video created');\n      setSnackOpen(true);\n    }\n  }, [history.location.search])\n\n  useEffect(() => {\n    if (typeof selected.caption !== 'undefined') {\n      setValue('_id', defaultValues._id);\n      setValue('caption', defaultValues.caption);\n      setValue('hasPublish', defaultValues.hasPublish);\n      setValue('type', defaultValues.type);\n      setValue('videoLength', defaultValues.videoLength);\n      setValue('video', defaultValues.video);\n\n      setVideoFile(defaultValues.video);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    setAction('update');\n    dispatch(updateVideo(getValues()));\n  };\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={5000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{\"Update Video\"}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            <Back />\n            <DeleteDialog\n              ids={[video._id]}\n              label=\"music\"\n              onSave={() => {\n                setAction('delete');\n                dispatch(deleteVideo({ ids: [video._id] }));\n              }}\n              render={(open) => (\n                <Button\n                  className={classes.deleteButton}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  startIcon={<DeleteIcon />}\n                  onClick={open}\n                >\n                  Delete\n                </Button>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Grid container alignItems={'flex-start'}>\n        <Grid item xs={12} lg={6}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Title</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={video.caption}\n                        error={true ? errors.caption?.type === \"required\" : false}\n                        {...register('caption', { required: true })}\n                        onChange={(e) => { setValue('caption', e.target.value) }}\n                        defaultValue={video.caption}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.caption?.type === \"required\" && <span class=\"error\">Title is required</span>}\n                  </div>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Video Length</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={video.videoLength}\n                        error={true ? errors.videoLength?.type === \"required\" : false}\n                        {...register('videoLength', { required: true })}\n                        onChange={(e) => { setValue('videoLength', e.target.value) }}\n                        defaultValue={video.videoLength}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.videoLength?.type === \"required\" && <span class=\"error\">Video length is required</span>}\n                  </div>\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Update\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Music Title</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      key={video.musicId?.title}\n                      defaultValue={video.musicId?.title}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                      disabled\n                    />\n                  </div>\n                </div>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Artist</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      key={video.musicId?.artist}\n                      defaultValue={video.musicId?.artist}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                      disabled\n                    />\n                  </div>\n                </div>\n                <div className={classes.audioContainer}>\n                  <ReactAudioPlayer\n                    src={video.musicId?.musicLink}\n                    controls\n                  />\n                </div>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={classes.formHeading}>User Dance Video</div>\n                {videoFile &&\n                  <div className={classes.margin + ' ' + classes.uploadContainer}>\n                    <ReactPlayer\n                      url={videoFile}\n                      controls\n                    />\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={() => { setValue('video', ''); setVideoFile(''); }}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                }\n                {!videoFile &&\n                  <FormControl error={true ? errors.video?.type === \"required\" : false} fullWidth className={classes.margin} variant=\"outlined\">\n                    <FileUpload\n                      {...register('video', { required: true })}\n                      accept=\".mp4,video/*\"\n                      onFileChange={(file) => {\n                        setValue('video', file);\n                        setVideoFile(URL.createObjectURL(file));\n                      }}\n                    />\n                    {errors.video?.type === \"required\" && <FormHelperText className={classes.errorMessage}>Please pick a video file</FormHelperText>}\n                  </FormControl>\n                }\n              </>\n            }\n          />\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Video Owner</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      key={video.userId?.firstName}\n                      {...register('videoLength', { required: true })}\n                      defaultValue={video.userId?.firstName + ' ' + video.userId?.lastName}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                      disabled\n                    />\n                  </div>\n                </div>\n                <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                  <label>Owner Username</label>\n                  <div className={'inputContainer'}>\n                    <TextField\n                      key={video.userId?.userName}\n                      {...register('videoLength', { required: true })}\n                      defaultValue={video.userId?.userName}\n                      variant=\"outlined\"\n                      fullWidth={true}\n                      disabled\n                    />\n                  </div>\n                </div>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/Video/fetchSingleVideo.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Video/updateVideo.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/User/Redux/user.js",["878","879","880","881","882","883","884","885","886","887","888","889","890"],"import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectUser, selectTotalUser, selectCurrentPage, selectPageLoaded, selectLoading, setUpdating, setUpdated, selectUpdating, selectError, selectUpdated, changePage, clearList } from './userSlice';\nimport { fetchUser } from '../../../API/User/fetchUser';\nimport { deleteUser } from '../../../API/User/deleteUser';\nimport SummaryCard from \"../../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../../Theme/sharedClasses\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport PropTypes from 'prop-types';\n\nimport Content from '../../../Dashboard/Content';\nimport DeleteDialog from '../../../Components/Dialog/DeleteDialog';\n\nimport useToken from '../../../useToken';\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  let stabilizedThis = [];\n\n  for (let index = 0; index < array.length; index++) {\n    if (typeof array[index]['_id'] !== 'undefined') {\n      stabilizedThis.push([array[index], index]);\n    } else {\n      stabilizedThis.push([{}, index]);\n    }\n  }\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst headCells = [\n  {\n    id: \"userName\",\n    numeric: false,\n    disablePadding: true,\n    label: \"Username\",\n    width: 320\n  },\n  { id: \"firstName\", numeric: false, disablePadding: false, label: \"First Name\" },\n  { id: \"lastName\", numeric: true, disablePadding: false, label: \"Last Name\" },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n            width={headCell.width ? headCell.width : null}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: \"1\",\n  },\n  filterContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: \"5px 0 15px 0\",\n    \"& input\": {\n      width: \"100%\"\n    },\n    \"& .filterWrapper\": {\n      display: \"flex\",\n      width: \"200px\",\n      \"&.filterText\": {\n        width: \"300px\",\n      }\n    }\n  }\n}));\n\nexport default function User(props) {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n\n  const currentPage = useSelector(selectCurrentPage);\n  const pageLoaded = useSelector(selectPageLoaded);\n  const totalRecord = useSelector(selectTotalUser);\n  const rows = useSelector(selectUser);\n  const loading = useSelector(selectLoading);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"\");\n  const [selected, setSelected] = React.useState([]);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n  const [page, setPage] = React.useState(0);\n\n  // todo with snacks\n  const [snackOpen, setSnackOpen] = React.useState(false);\n  const dispatch = useDispatch();\n  const { token } = useToken();\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let offset = '';\n\n    if (typeof query.page !== 'undefined') {\n      offset = parseInt(query.page);\n    }\n    if (rows.length === 0) {\n      dispatch(fetchUser(offset));\n    } else {\n      if (offset !== '') {\n        redirectPage((offset - 1), false);\n      }\n    }\n  }, [dispatch, rows]);\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (location.pathname.indexOf('user') > -1) {\n        if (location.search === '') {\n          redirectPage(0, false);\n        }\n      }\n    })\n  }, [history]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n    let pageNum = 1;\n    let maxPage = 1;\n\n    if (typeof query.page !== 'undefined') {\n      pageNum = parseInt(query.page);\n      maxPage = Math.floor(rows.length / rowsPerPage);\n\n      if (typeof query.deleted !== 'undefined') {\n        if (pageNum > maxPage && maxPage > 0) {\n          while (pageNum > maxPage) {\n            pageNum -= 1;\n\n            if (pageNum == 0) {\n              pageNum = 1;\n            }\n          }\n        }\n      }\n\n      if (maxPage > 0) {\n        setPage(pageNum - 1);\n      }\n    }\n    if (typeof query.deleted !== 'undefined') {\n      setMessage('User deleted');\n      setSnackOpen(true);\n\n      history.replace({ pathname: history.location.pathname, search: `?page=${pageNum}` });\n\n      let offset = '';\n\n      if (typeof query.page !== 'undefined') {\n        offset = parseInt(query.page);\n      }\n      // dispatch(clearList());\n      // dispatch(fetchUser(offset));\n    }\n  }, [history.location.search]);\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'delete') {\n          setMessage(\n            `${selected.length} User${selected.length > 1 ? \"s\" : \"\"\n            } Deleted`\n          );\n          setSelected([]);\n        }\n        setSnackOpen(true);\n        dispatch(setUpdated(false));\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n._id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const selectTableRow = (id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, pageNum) => {\n    redirectPage(pageNum, true);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const redirectPage = (pageNum, changeRoute) => {\n    setPage(pageNum);\n\n    if (pageLoaded.indexOf(pageNum) === -1) {\n      dispatch(fetchUser(pageNum + 1));\n    } else {\n      dispatch(changePage(pageNum));\n    }\n\n    localStorage.setItem('page', (pageNum + 1));\n    if (changeRoute) {\n      history.replace({ pathname: '/user/', search: `?page=${(pageNum + 1)}` });\n    }\n  }\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={2000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={sharedClasses.headerContainer}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{'Users'}</Typography>\n          <div className={classes.spacer} />\n          <div className={sharedClasses.actionGroup}>\n            {selected.length > 0 && (\n              <DeleteDialog\n                ids={selected}\n                label=\"music\"\n                onSave={() => {\n                  setAction('delete');\n                  dispatch(deleteUser({ ids: selected, token }));\n                }}\n                render={(open) => (\n                  <Button\n                    className={classes.deleteButton}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={open}\n                  >\n                    {\" \"}\n                    Delete {selected.length} selected\n                  </Button>\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      <SummaryCard\n        value={\n          <>\n            <div className={classes.filterContainer}>\n              <div className=\"filterWrapper filterText\">\n                <TextField\n                  placeholder=\"Filter\"\n                  onChange={(e) => { }}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      dispatch(fetchUser(1, 'userName=' + e.target.value));\n                    }\n                  }}\n                />\n              </div>\n            </div>\n\n            <TableContainer>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={\"small\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                />\n                <TableBody>\n                  {stableSort(rows, getComparator(order, orderBy))\n                    .slice(\n                      currentPage * rowsPerPage,\n                      currentPage * rowsPerPage + rowsPerPage\n                    )\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          onClick={(e) => {\n                            if (\n                              e.target.type === \"checkbox\" ||\n                              e.target.className.indexOf(\"Checkbox\") > 0\n                            ) {\n                              return;\n                            }\n                            history.push(`/user/${row._id}`);\n                          }}\n                          key={`person-${row._id}`}\n                          selected={isItemSelected}\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          <TableCell\n                            padding=\"checkbox\"\n                            onClick={(e) => {\n                              selectTableRow(row._id);\n                            }}\n                          >\n                            <Checkbox\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(e) => {\n                                selectTableRow(row._id);\n                              }}\n                            />\n                          </TableCell>\n                          <TableCell\n                            component=\"th\"\n                            id={labelId}\n                            scope=\"row\"\n                            padding=\"none\"\n                          >\n                            {row.userName}\n                          </TableCell>\n                          <TableCell align=\"left\">{row.firstName}</TableCell>\n                          <TableCell align=\"right\">{row.lastName}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <TablePagination\n              rowsPerPageOptions={[]}\n              component=\"div\"\n              count={totalRecord}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </>\n        }\n      />\n    </Content >\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/User/deleteUser.js",["891"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/User/Redux/userSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteUser = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async userId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/user/${userId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(handleErrorResponse(error)));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/API/User/fetchUser.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/User/EditUser.js",["892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectUser, selectedUser, selectUpdating, selectError, selectUpdated, setUpdated, setUpdating } from \"./Redux/userSlice\";\nimport { updateUser } from \"../../API/User/updateUser\";\nimport { deleteUser } from \"../../API/User/deleteUser\";\nimport { fetchSingleUser } from \"../../API/User/fetchSingleUser\";\nimport { useForm } from \"react-hook-form\";\nimport Content from \"../../Dashboard/Content\";\nimport DeleteDialog from \"../../Components/Dialog/DeleteDialog\";\nimport Back from \"../../Components/Buttons/BackButton\";\nimport SummaryCard from \"../../Components/Card/SummaryCard\";\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Input from '@material-ui/core/Input';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getParamValue(search) {\n  var params;\n  var query = search;\n  var regex = /[?&;](.+?)=([^&;]+)/g;\n  var match;\n\n  params = {};\n\n  if (query) {\n    while (match = regex.exec(query)) {\n      params[match[1]] = decodeURIComponent(match[2]);\n    }\n  }\n\n  return params;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    flexGrow: \"1\",\n  },\n  avatar: {\n    border: `3px solid white`,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4)\n  },\n  actionGroup: {\n    display: \"flex\",\n    width: \"200px\",\n    justifyContent: \"flex-end\",\n    marginRight: 0,\n  },\n  tripCard: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  margin: {\n    margin: `${theme.spacing(1)}px 0`,\n  },\n  deleteButton: {\n    marginLeft: theme.spacing(1),\n  },\n  hiddenInput: {\n    display: 'none',\n  },\n  avatarContainer: {\n    position: 'relative',\n    \"& > label\": {\n      position: 'absolute',\n      bottom: '-15px',\n      left: '70px'\n    }\n  },\n  musicContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    \"& > div\": {\n      display: 'flex',\n      paddingLeft: '5px'\n    }\n  },\n\n  spacer: {\n    flexGrow: \"1\",\n  },\n  actionGroup: {\n    display: \"flex\",\n    width: \"400px\",\n    justifyContent: \"flex-end\",\n    marginRight: 0,\n  },\n  errorMessage: {\n    marginLeft: \"0\"\n  },\n}));\n\nexport default function EditMusic() {\n  const classes = useStyles();\n  const sharedClasses = useSharedClasses();\n  const loading = false;\n\n  const dispatch = useDispatch();\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [message, setMessage] = useState();\n  const [action, setAction] = useState();\n  const { userId } = useParams();\n  const rows = useSelector(selectUser);\n  const selected = useSelector(selectedUser);\n  const updating = useSelector(selectUpdating);\n  const updated = useSelector(selectUpdated);\n  const error = useSelector(selectError);\n  const history = useHistory();\n  const record = rows.find((row) => row._id === userId);\n  const user = (typeof record !== 'undefined') ? record : selected;\n  const defaultValues = {\n    _id: user._id,\n    userName: user.userName,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    mobile: user.mobile,\n    email: user.email,\n  }\n\n  const { register, getValues, handleSubmit, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  useEffect(() => {\n    if (!updating) {\n      if (updated) {\n        if (action == 'update') {\n          setMessage('User updated!');\n          setSnackOpen(true);\n          dispatch(setUpdated(false));\n        } else if (action == 'delete') {\n          const pageNum = (typeof localStorage.getItem('page') !== 'undefined') ? localStorage.getItem('page') : 1;\n          history.push('/user/?page=' + pageNum + '&deleted=true')\n        }\n      }\n    } else {\n      if (error) {\n        setMessage(error);\n        setSnackOpen(true);\n      }\n      dispatch(setUpdating(false));\n    }\n  }, [updating, updated]);\n\n  useEffect(() => {\n    if (rows.length === 0) {\n      dispatch(fetchSingleUser(userId));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  useEffect(() => {\n    const query = getParamValue(history.location.search);\n\n    if (typeof query.created !== 'undefined') {\n      setMessage('User created');\n      setSnackOpen(true);\n    }\n  }, [history.location.search])\n\n  useEffect(() => {\n    if (typeof selected.title !== 'undefined') {\n\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    setAction('update');\n    dispatch(updateUser(getValues()));\n  };\n\n  if (loading) {\n    return (\n      <Content>\n        <CircularProgress />\n      </Content>\n    );\n  }\n\n  const snackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  return (\n    <Content>\n      <Snackbar open={snackOpen} autoHideDuration={5000} onClose={snackClose}>\n        <Alert onClose={snackClose} severity={error ? 'error' : 'success'}>\n          {message}\n        </Alert>\n      </Snackbar>\n      <div className={`${sharedClasses.headerContainer} box`}>\n        <div className={sharedClasses.header}>\n          <Typography variant={\"h5\"}>{\"Update User\"}</Typography>\n          <div className={classes.spacer} />\n          <div className={classes.actionGroup}>\n            <Back />\n            <DeleteDialog\n              ids={[user._id]}\n              label=\"user\"\n              onSave={() => {\n                setAction('delete');\n                dispatch(deleteUser({ ids: [user._id] }));\n              }}\n              render={(open) => (\n                <Button\n                  className={classes.deleteButton}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  startIcon={<DeleteIcon />}\n                  onClick={open}\n                >\n                  Delete\n                </Button>\n              )}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Grid container>\n        <Grid item xs={12} md={12} lg={6}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n\n                <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Username</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={user.userName}\n                        error={true ? errors.userName?.type === \"required\" : false}\n                        {...register('userName', { required: true })}\n                        onChange={(e) => { setValue('userName', e.target.value) }}\n                        defaultValue={user.userName}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.userName?.type === \"required\" && <span class=\"error\">Username is required</span>}\n                  </div>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>First Name</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={user.firstName}\n                        error={true ? errors.firstName?.type === \"required\" : false}\n                        {...register('firstName', { required: true })}\n                        onChange={(e) => { setValue('firstName', e.target.value) }}\n                        defaultValue={user.firstName}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.firstName?.type === \"required\" && <span class=\"error\">First name is required</span>}\n                  </div>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Last Name</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={user.lastName}\n                        error={true ? errors.lastName?.type === \"required\" : false}\n                        {...register('lastName', { required: true })}\n                        onChange={(e) => { setValue('lastName', e.target.value) }}\n                        defaultValue={user.lastName}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                    {errors.lastName?.type === \"required\" && <span class=\"error\">Last name is required</span>}\n                  </div>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Mobile Number</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={user.mobile}\n                        {...register('mobile')}\n                        onChange={(e) => { setValue('mobile', e.target.value) }}\n                        defaultValue={user.mobile}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                  </div>\n                  <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n                    <label>Email Address</label>\n                    <div className={'inputContainer'}>\n                      <TextField\n                        key={user.email}\n                        error={true ? errors.email?.type === \"required\" : false}\n                        {...register('email')}\n                        onChange={(e) => { setValue('email', e.target.value) }}\n                        defaultValue={user.email}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      />\n                    </div>\n                  </div>\n                  <div className={classes.margin}>\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      type=\"submit\"\n                    >\n                      Update\n                    </Button>\n                  </div>\n                </form>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n    </Content >\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/User/fetchSingleUser.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/User/updateUser.js",[],"/Users/zincchuang/Documents/boogizfront/src/Theme/sharedClasses.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Reporting/updateReporting.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Reporting/deleteReporting.js",["908"],"import axios from \"axios\";\nimport { remove, setUpdating, setUpdated, throwError } from '../../Pages/Reporting/Redux/reportingSlice';\nimport { authHeader, handleErrorResponse } from '../../helper';\n\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteReporting = (data) => async dispatch => {\n  dispatch(setUpdating(true));\n\n  try {\n    const resp = await Promise.all(data.ids.map(async reportingId => {\n      const resp = await axios.delete(`${REACT_APP_API_URL}/v1/report/${reportingId}`, authHeader());\n\n      return resp;\n    }));\n\n    dispatch(remove(data.ids));\n    dispatch(setUpdated(true));\n\n  } catch (error) {\n    dispatch(throwError(handleErrorResponse(error)));\n  }\n\n  dispatch(setUpdating(true));\n};\n","/Users/zincchuang/Documents/boogizfront/src/API/Analytic/fetchAnalytic.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/DanceGenre/EditDanceGenreDialog.js",["909","910","911","912"],"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputWidth: {\n    width: \"280px\"\n  }\n}));\n\nexport default function EditDanceGenreDialog({ data, render, onSave }) {\n  const sharedClasses = useSharedClasses();\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n\n  const defaultValues = {\n    _id: data._id,\n    name: data.name,\n    key: data.key,\n    weight: data.weight\n  };\n\n  const { register, getValues, handleSubmit, unregister, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  const handleClickOpen = () => {\n    register('name', { required: true });\n    register('key', { required: true });\n    register('weight');\n    setOpen(true);\n    setValue('name', defaultValues.name);\n    setValue('key', defaultValues.key);\n    setValue('weight', defaultValues.weight);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    unregister('name',\n      { keepValid: true }\n    );\n    unregister('key',\n      { keepValid: true }\n    )\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    console.log(getValues());\n    onSave && onSave(getValues());\n    handleClose();\n  };\n\n  return (\n    <>\n      {render(handleClickOpen)}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n          <DialogTitle id=\"form-dialog-title\">\n            {data ? \"Edit\" : \"Add\"} Dance Genre{\" \"}\n          </DialogTitle>\n          <DialogContent>\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Genre Name</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={classes.inputWidth}\n                  onChange={(e) => {\n                    setValue('name', e.target.value);\n                  }}\n                  defaultValue={data.name}\n                  error={errors.name && errors.name.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.name?.type === \"required\" && <span className=\"error\">Genre name is required</span>}\n            </div>\n\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Genre Key</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  key={data.key}\n                  className={`classes.inputWidth`}\n                  onChange={(e) => { setValue('key', e.target.value) }}\n                  defaultValue={data.key}\n                  error={errors.key?.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.key?.type === \"required\" && <span className=\"error\">Genre key is required</span>}\n            </div>\n\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Weight</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  key={data.weight}\n                  className={`classes.inputWidth`}\n                  onChange={(e) => {\n                    setValue('weight', e.target.value);\n                  }}\n                  defaultValue={data.weight}\n                  variant=\"outlined\"\n                  type=\"number\"\n                  fullWidth={true}\n                />\n              </div>\n            </div>\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n}\n","/Users/zincchuang/Documents/boogizfront/src/API/DanceGenre/updateDanceGenre.js",[],"/Users/zincchuang/Documents/boogizfront/src/API/Genre/updateGenre.js",[],"/Users/zincchuang/Documents/boogizfront/src/Pages/Genre/EditGenreDialog.js",["913","914","915","916"],"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport useSharedClasses from \"../../Theme/sharedClasses\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputWidth: {\n    width: \"280px\"\n  }\n}));\n\nexport default function EditGenreDialog({ data, render, onSave }) {\n  const sharedClasses = useSharedClasses();\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n\n  const defaultValues = {\n    _id: data._id,\n    name: data.name,\n    key: data.key,\n    weight: data.weight\n  };\n\n  const { register, getValues, handleSubmit, unregister, formState: { errors, isSubmitted }, setValue, control, trigger } = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onBlur',\n    defaultValues: defaultValues,\n  });\n\n  const handleClickOpen = () => {\n    register('name', { required: true });\n    register('key', { required: true });\n    register('weight');\n    setOpen(true);\n    setValue('name', defaultValues.name);\n    setValue('key', defaultValues.key);\n    setValue('weight', defaultValues.weight);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    unregister('name',\n      { keepValid: false }\n    );\n    unregister('key',\n      { keepValid: false }\n    )\n  };\n\n  const onErrors = (errors) => console.error(errors);\n  const onSubmit = (data) => {\n    console.log(getValues());\n    onSave && onSave(getValues());\n    handleClose();\n  };\n\n  return (\n    <>\n      {render(handleClickOpen)}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <form onSubmit={handleSubmit(onSubmit, onErrors)}>\n          <DialogTitle id=\"form-dialog-title\">\n            {data ? \"Edit\" : \"Add\"} Dance Genre{\" \"}\n          </DialogTitle>\n          <DialogContent>\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Genre Name</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  className={classes.inputWidth}\n                  onChange={(e) => {\n                    setValue('name', e.target.value);\n                  }}\n                  defaultValue={data.name}\n                  error={errors.name && errors.name.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.name?.type === \"required\" && <span className=\"error\">Genre name is required</span>}\n            </div>\n\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Genre Key</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  key={data.key}\n                  className={`classes.inputWidth`}\n                  onChange={(e) => { setValue('key', e.target.value) }}\n                  defaultValue={data.key}\n                  error={errors.key?.type === \"required\" ? true : false}\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </div>\n              {errors.key?.type === \"required\" && <span className=\"error\">Genre key is required</span>}\n            </div>\n\n            <div className={`${sharedClasses.formContainer} ${sharedClasses.fullWidth}`}>\n              <label>Weight</label>\n              <div className={'inputContainer'}>\n                <TextField\n                  key={data.weight}\n                  className={`classes.inputWidth`}\n                  onChange={(e) => {\n                    setValue('weight', e.target.value);\n                  }}\n                  defaultValue={data.weight}\n                  variant=\"outlined\"\n                  type=\"number\"\n                  fullWidth={true}\n                />\n              </div>\n            </div>\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n}\n","/Users/zincchuang/Downloads/test/aemulusfrontend/src/index.js",[],["917","918"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/App.js",["919","920","921"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/serviceWorker.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/theme.js",["922"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/SignIn.js",["923","924","925","926","927"],"import React, { useState } from \"react\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst { REACT_APP_API_URL } = process.env;\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n  },\n  image: {\n    backgroundImage: \"url(img/wallpaper2-min.PNG)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.grey[900]\n        : theme.palette.grey[50],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    width: \"100%\",\n    paddingTop: \"40px\",\n  },\n  paper: {\n    margin: theme.spacing(8, 8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nasync function loginUser(credentials) {\n  return fetch(`${REACT_APP_API_URL}/v1/dashboard/auth/email/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(credentials),\n  }).then((data) => data.json());\n}\n\nexport function SignIn({ setToken }) {\n  const classes = useStyles();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [errorCode, setErrorCode] = useState();\n  const [errorMessage, setErrorMessage] = useState();\n  const [open, setOpen] = useState(false);\n\n  let error;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setOpen(false);\n\n    const token = { accessToken: \"Something\" };\n\n    if (!token.errorCode) {\n      console.log(1111);\n      setToken(token);\n    } else {\n      setErrorCode(token.errorCode);\n      setErrorMessage(token.errorMessage);\n      setOpen(true);\n    }\n  };\n\n  return (\n    <Grid container component=\"main\" direction=\"row\" className={classes.root}>\n      <CssBaseline />\n      <Grid container justify=\"center\" className={classes.image}>\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Grid className={classes.paper}>\n            <Avatar className={classes.avatar}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <form className={classes.form} onSubmit={handleSubmit}>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                autoFocus\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n              />\n              <Button\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                className={classes.submit}\n              >\n                Sign In\n              </Button>\n              <Grid container>\n                <Grid item xs>\n                  <Link href=\"#\" variant=\"body2\">\n                    Forgot password?\n                  </Link>\n                </Grid>\n                <Grid item>\n                  <Link href=\"#\" variant=\"body2\">\n                    {\"Don't have an account? Sign Up\"}\n                  </Link>\n                </Grid>\n              </Grid>\n              <Collapse in={open}>\n                <Box mt={3}>\n                  <Alert\n                    action={\n                      <IconButton\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={() => {\n                          setOpen(false);\n                        }}\n                      >\n                        <CloseIcon fontSize=\"inherit\" />\n                      </IconButton>\n                    }\n                    severity=\"error\"\n                  >\n                    {errorMessage}\n                  </Alert>\n                </Box>\n              </Collapse>\n              <Box mt={5}>\n                <Copyright />\n              </Box>\n            </form>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nSignIn.propTypes = {\n  setToken: PropTypes.func.isRequired,\n};\n","/Users/zincchuang/Downloads/test/aemulusfrontend/src/useToken.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/AppBarAndDrawer/AppBarAndDrawer.js",["928","929","930","931"],"import React from \"react\";\nimport { Link as RouterLink, useLocation } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\nimport Badge from \"@material-ui/core/Badge\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport PropTypes from \"prop-types\";\n\nexport const drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  logo: {\n    color: \"white\",\n    textDecoration: \"none\",\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      backgroundColor: `#F4F5F7`,\n      boxShadow: \"none !important\",\n      borderBottom: \"solid 1px #d7ddde\",\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n    backgroundColor: `#2b333e`,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  active: {\n    backgroundColor: \"#6ad1df\",\n  },\n}));\n\nfunction ResponsiveDrawer(props) {\n  const { container, setCurrentTheme, currentTheme, unsetToken } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const { pathname } = useLocation();\n  const isHome = false; // pathname === \"/\";\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  /* Modifying the source code from the template example to use the react router pathname hook to set\n  selected prop and to use the react router component prop */\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {[{ text: \"Home\", icon: \"home\" }].map(({ text, icon }, index) => (\n          <ListItem\n            component={RouterLink}\n            selected={pathname.includes(\n              `/${text.replace(\" \", \"_\").toLowerCase()}`\n            )}\n            to={`/${text.replace(\" \", \"_\").toLowerCase()}`}\n            button\n            key={text}\n          >\n            <ListItemIcon>\n              <Icon>{icon}</Icon>\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n        <ListItem button onClick={unsetToken}>\n          <ListItemIcon>\n            <Icon>logout</Icon>\n          </ListItemIcon>\n          <ListItemText primary=\"Logout\" />\n        </ListItem>\n      </List>\n      <Divider />\n    </div>\n  );\n\n  return (\n    <MuiThemeProvider theme={currentTheme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <div\n          style={{\n            height: \"64px\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"cover\",\n            filter: \"contrast(75%)\",\n            position: \"absolute\",\n            top: \"0px\",\n            width: \"100%\",\n            zIndex: -2,\n          }}\n        />\n        <AppBar position=\"sticky\" className={isHome ? \"\" : classes.appBar}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n              className={classes.menuButton}\n            >\n              <MenuIcon />\n            </IconButton>\n\n            <div style={{ flexGrow: 1 }}></div>\n\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"end\"\n              onClick={handleDrawerToggle}\n            >\n              <Avatar src=\"/img/driver.png\" />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        {isHome && !mobileOpen ? (\n          <div />\n        ) : (\n          <nav aria-label=\"mailbox folders\">\n            {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n            <Hidden smUp implementation=\"css\">\n              <Drawer\n                container={container}\n                variant=\"temporary\"\n                anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                open={mobileOpen}\n                onClose={handleDrawerToggle}\n                classes={{\n                  paper: classes.drawerPaper,\n                }}\n                ModalProps={{\n                  keepMounted: true, // Better open performance on mobile.\n                }}\n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n            <Hidden xsDown implementation=\"css\">\n              <Drawer\n                classes={{\n                  paper: classes.drawerPaper,\n                }}\n                variant=\"permanent\"\n                open={isHome}\n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n          </nav>\n        )}\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nResponsiveDrawer.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  container: PropTypes.instanceOf(\n    typeof Element === \"undefined\" ? Object : Element\n  ),\n};\n\nexport default ResponsiveDrawer;\n","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Providers/DataProvider.js",["932","933"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Home/Home.js",["934","935","936","937","938","939"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchFilter } from \"../API/Filter/fetchFilter\";\nimport { fetchOrder } from \"../API/Order/fetchOrder\";\nimport { fetchOrderDetail } from \"../API/OrderDetail/fetchOrderDetail\";\n\nimport Content from \"../Dashboard/Content\";\nimport SummaryCard from \"../Components/Card/SummaryCard\";\nimport Chart from \"../Dashboard/Chart\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Collapse from \"@material-ui/core/Collapse\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://react.school\">\n        Aemulus\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  statistic: {\n    \"& .heading\": {\n      textTransform: \"uppercase\",\n      fontSize: \"1.2rem\",\n      fontWeight: \"700\",\n      color: \"#989898\",\n      fontFamily: \"Roboto\",\n    },\n    \"& .count\": {\n      color: \"#5ebaca\",\n      ontFamily: \"Arial\",\n    },\n  },\n}));\n\nexport function Home() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [countries, setCountries] = useState([]);\n  const [years, setYears] = useState([]);\n  const [managers, setManagers] = useState([]);\n\n  const [selectedYear, setSelectedYear] = useState(\"\");\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [selectedManager, setSelectedManager] = useState(\"\");\n  const [orders, setOrders] = useState([]);\n  const [open, setOpen] = useState([]);\n\n  useEffect(() => {\n    dispatch(fetchFilter()).then((result) => {\n      let countries = result.countries.map((item) => item.country);\n      let years = result.orderYears.map((item) => item.year);\n\n      setCountries(countries);\n      setYears(years);\n      setManagers(result.manager);\n    });\n  }, [dispatch]);\n\n  const handleYearChange = (event) => {\n    setSelectedYear(event.target.value);\n  };\n\n  const handleCountryChange = (event) => {\n    setSelectedCountry(event.target.value);\n  };\n\n  const handleManagerChange = (event) => {\n    setSelectedManager(event.target.value);\n  };\n\n  const onUpdate = () => {\n    const data = {\n      year: selectedYear,\n      country: selectedCountry,\n      manager: selectedManager,\n    };\n    dispatch(fetchOrder(data)).then((result) => {\n      const array = [];\n\n      for (let item in result) {\n        array.push({ visible: false, detail: [] });\n      }\n      setOpen(array);\n      setOrders(result);\n    });\n  };\n\n  const onOpenDetail = (id, index) => {\n    dispatch(fetchOrderDetail(id)).then((result) => {\n      const shadow = [...open];\n      shadow[index].detail = result;\n      setOpen(shadow);\n      console.log(shadow);\n    });\n  };\n\n  const headCells = [\n    {\n      id: \"orderNumber\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Order Number\",\n      width: 100,\n    },\n    {\n      id: \"date\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Date\",\n      width: 100,\n    },\n    {\n      id: \"phoneNumber\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Phone Number\",\n      width: 120,\n    },\n    {\n      id: \"name\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Name\",\n      width: 200,\n    },\n    {\n      id: \"address\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Address\",\n      width: 200,\n    },\n    {\n      id: \"country\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Country\",\n      width: 100,\n    },\n    {\n      id: \"status\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Status\",\n      width: 100,\n    },\n    {\n      id: \"total\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Total\",\n      width: 100,\n    },\n  ];\n\n  function EnhancedTableHead(props) {\n    const {\n      classes,\n      onSelectAllClick,\n      order,\n      orderBy,\n      numSelected,\n      rowCount,\n      onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n      onRequestSort(event, property);\n    };\n\n    return (\n      <TableHead>\n        <TableRow>\n          {headCells.map((headCell) => (\n            <TableCell\n              key={headCell.id}\n              align={headCell.numeric ? \"right\" : \"left\"}\n              padding={headCell.disablePadding ? \"none\" : \"default\"}\n              sortDirection={orderBy === headCell.id ? order : false}\n              width={headCell.width ? headCell.width : null}\n            >\n              <TableSortLabel\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : \"asc\"}\n                onClick={createSortHandler(headCell.id)}\n              >\n                {headCell.label}\n                {orderBy === headCell.id ? (\n                  <span className={classes.visuallyHidden}>\n                    {order === \"desc\"\n                      ? \"sorted descending\"\n                      : \"sorted ascending\"}\n                  </span>\n                ) : null}\n              </TableSortLabel>\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    );\n  }\n\n  return (\n    <Content>\n      <Grid container alignItems={\"flex-start\"}>\n        <Grid item xs={12} lg={4}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <Select\n                  variant=\"outlined\"\n                  value={selectedYear}\n                  onChange={handleYearChange}\n                >\n                  {(years || []).map((item, i) => {\n                    return (\n                      <MenuItem key={i} value={item}>\n                        {item}\n                      </MenuItem>\n                    );\n                  })}\n                </Select>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={4}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <Select\n                  variant=\"outlined\"\n                  value={selectedCountry}\n                  onChange={handleCountryChange}\n                >\n                  {(countries || []).map((item, i) => {\n                    return (\n                      <MenuItem key={i} value={item}>\n                        {item}\n                      </MenuItem>\n                    );\n                  })}\n                </Select>\n              </>\n            }\n          />\n        </Grid>\n        <Grid item xs={12} lg={4}>\n          <SummaryCard\n            morePadding={true}\n            value={\n              <>\n                <Select\n                  variant=\"outlined\"\n                  value={selectedManager}\n                  onChange={handleManagerChange}\n                >\n                  {(managers || []).map((item, i) => {\n                    return (\n                      <MenuItem key={i} value={item.employeeNumber}>\n                        {item.firstName + \" \" + item.lastName}\n                      </MenuItem>\n                    );\n                  })}\n                </Select>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <Grid container alignItems={\"flex-start\"}>\n        <Grid item xs={12} lg={4}>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            type=\"button\"\n            onClick={onUpdate}\n          >\n            Update\n          </Button>\n        </Grid>\n      </Grid>\n\n      <Grid container alignItems={\"flex-start\"}>\n        <Grid item xs={12} lg={12}>\n          <SummaryCard\n            value={\n              <>\n                <TableContainer>\n                  <Table\n                    className={classes.table}\n                    aria-labelledby=\"tableTitle\"\n                    size={\"small\"}\n                    aria-label=\"enhanced table\"\n                  >\n                    <EnhancedTableHead\n                      classes={classes}\n                      rowCount={orders.length}\n                    />\n                    <TableBody>\n                      {orders.map((row, index) => {\n                        const labelId = `enhanced-table-checkbox-${index}`;\n\n                        return (\n                          <>\n                            <TableRow\n                              hover\n                              role=\"checkbox\"\n                              tabIndex={-1}\n                              onClick={(e) => {}}\n                              key={`order-${row.orderNumber}`}\n                              style={{ cursor: \"pointer\" }}\n                            >\n                              <TableCell align=\"left\">\n                                {row.orderNumber}\n                              </TableCell>\n                              <TableCell align=\"right\">\n                                {row.orderDate}\n                              </TableCell>\n                              <TableCell align=\"right\">{row.phone}</TableCell>\n                              <TableCell align=\"right\">\n                                {row.customerName}\n                              </TableCell>\n                              <TableCell align=\"right\">\n                                {row.addressLine1}\n                              </TableCell>\n                              <TableCell align=\"right\">{row.country}</TableCell>\n                              <TableCell align=\"right\">{row.status}</TableCell>\n                              <TableCell align=\"right\">{row.total}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                              <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                type=\"button\"\n                                onClick={() => {\n                                  const shadow = [...open];\n                                  shadow[index].visible =\n                                    !shadow[index].visible;\n                                  setOpen(shadow);\n                                  console.log(row.orderNumber);\n                                  onOpenDetail(row.orderNumber, index);\n                                }}\n                              >\n                                Open\n                              </Button>\n                              <Collapse\n                                in={open[index].visible}\n                                timeout=\"auto\"\n                                unmountOnExit\n                              >\n                                <TableContainer>\n                                  <Table\n                                    className={classes.table}\n                                    aria-labelledby=\"tableTitle\"\n                                    size={\"small\"}\n                                    aria-label=\"enhanced table\"\n                                  >\n                                    <TableBody>\n                                      {open[index].detail.map(\n                                        (childRow, index) => {\n                                          const labelId = `enhanced-table-checkbox-${index}`;\n\n                                          return (\n                                            <>\n                                              <TableRow\n                                                hover\n                                                role=\"checkbox\"\n                                                tabIndex={-1}\n                                                onClick={(e) => {}}\n                                                key={`detail-${row.productCode}`}\n                                                style={{ cursor: \"pointer\" }}\n                                              >\n                                                <TableCell align=\"left\">\n                                                  {childRow.productCode}\n                                                </TableCell>\n                                                <TableCell align=\"left\">\n                                                  {childRow.productName}\n                                                </TableCell>\n                                                <TableCell align=\"left\">\n                                                  {childRow.quantityOrdered}\n                                                </TableCell>\n                                                <TableCell align=\"left\">\n                                                  {childRow.priceEach}\n                                                </TableCell>\n                                                <TableCell align=\"left\">\n                                                  {childRow.subtotal}\n                                                </TableCell>\n                                              </TableRow>\n                                            </>\n                                          );\n                                        }\n                                      )}\n                                    </TableBody>\n                                  </Table>\n                                </TableContainer>\n                              </Collapse>\n                            </TableRow>\n                          </>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </>\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <Chart salesData={orders} />\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography\n          variant=\"subtitle1\"\n          align=\"center\"\n          color=\"textSecondary\"\n          component=\"p\"\n        >\n          Footer Content\n        </Typography>\n        <Copyright />\n      </footer>\n    </Content>\n  );\n}\n","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Settings/Settings.js",["940"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Dashboard/Content.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Theme/PalettePicker.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Theme/sharedClasses.js",[],["941","942"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/Card/SummaryCard.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/Dialog/DeleteDialog.js",["943"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/FileUpload/FileUpload.js",["944","945"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/helper.js",["946","947"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Theme/colors.js",["948"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/Autocomplete/Autocomplete.js",["949"],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Components/Buttons/BackButton.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/API/Filter/fetchFilter.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/API/Order/fetchOrder.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/API/OrderDetail/fetchOrderDetail.js",[],"/Users/zincchuang/Downloads/test/aemulusfrontend/src/Dashboard/Chart.js",["950"],"import React, { useContext } from \"react\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { DataContext } from \"../Providers/DataProvider\";\nimport moment from \"moment\";\nimport Title from \"./Title\";\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nfunction useOptions(theme, data, secondData) {\n  return {\n    chart: {\n      height: \"450px\",\n      type: \"column\",\n    },\n    xAxis: {\n      type: \"datetime\",\n    },\n\n    title: null,\n    series: [\n      {\n        name: \"Deposits\",\n        data,\n        color: theme.palette.primary.main,\n      },\n      {\n        name: \"Withdrawls\",\n        data: secondData,\n        color: theme.palette.secondary.main,\n      },\n    ],\n    plotOptions: {\n      series: {\n        marker: {\n          enabled: false,\n        },\n      },\n    },\n  };\n}\n\nexport default function Chart({ salesData }) {\n  const theme = useTheme();\n  const { data } = useContext(DataContext);\n  const sampleData = Object.values(salesData)\n    .map(({ total, orderDate }) => {\n      let splitDate = orderDate.split(\"-\");\n      let timestamp = new Date(splitDate[0], splitDate[1] - 1, splitDate[2]);\n\n      return [timestamp.getTime(), total];\n    })\n    .sort((a, b) => {\n      return moment(a[0]).isBefore(b[0]);\n    });\n\n  const chartData = Object.values(data)\n    .map(({ amount, date }) => [date, amount])\n    .sort((a, b) => {\n      return moment(a[0]).isBefore(b[0]);\n    });\n  let income = sampleData.filter(([date, amount]) => amount > 0);\n  let expense = sampleData.filter(([date, amount]) => amount < 0);\n  const options = useOptions(theme, income, expense);\n\n  return (\n    <React.Fragment>\n      <Title>Today</Title>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </React.Fragment>\n  );\n}\n","/Users/zincchuang/Downloads/test/aemulusfrontend/src/Dashboard/Title.js",[],{"ruleId":"951","replacedBy":"952"},{"ruleId":"953","replacedBy":"954"},{"ruleId":"955","severity":1,"message":"956","line":3,"column":50,"nodeType":"957","messageId":"958","endLine":3,"endColumn":54},{"ruleId":"955","severity":1,"message":"959","line":74,"column":6,"nodeType":"957","messageId":"958","endLine":74,"endColumn":7},{"ruleId":"955","severity":1,"message":"960","line":85,"column":10,"nodeType":"957","messageId":"958","endLine":85,"endColumn":19},{"ruleId":"955","severity":1,"message":"961","line":89,"column":7,"nodeType":"957","messageId":"958","endLine":89,"endColumn":12},{"ruleId":"955","severity":1,"message":"962","line":1,"column":8,"nodeType":"957","messageId":"958","endLine":1,"endColumn":13},{"ruleId":"955","severity":1,"message":"963","line":9,"column":8,"nodeType":"957","messageId":"958","endLine":9,"endColumn":17},{"ruleId":"955","severity":1,"message":"964","line":15,"column":8,"nodeType":"957","messageId":"958","endLine":15,"endColumn":18},{"ruleId":"955","severity":1,"message":"965","line":19,"column":8,"nodeType":"957","messageId":"958","endLine":19,"endColumn":13},{"ruleId":"955","severity":1,"message":"966","line":21,"column":8,"nodeType":"957","messageId":"958","endLine":21,"endColumn":16},{"ruleId":"955","severity":1,"message":"967","line":70,"column":22,"nodeType":"957","messageId":"958","endLine":70,"endColumn":37},{"ruleId":"955","severity":1,"message":"968","line":19,"column":5,"nodeType":"957","messageId":"958","endLine":19,"endColumn":12},{"ruleId":"969","severity":1,"message":"970","line":37,"column":33,"nodeType":"971","messageId":"972","endLine":39,"endColumn":4},{"ruleId":"973","severity":1,"message":"974","line":6,"column":1,"nodeType":"975","endLine":17,"endColumn":2},{"ruleId":"951","replacedBy":"976"},{"ruleId":"953","replacedBy":"977"},{"ruleId":"955","severity":1,"message":"978","line":5,"column":8,"nodeType":"957","messageId":"958","endLine":5,"endColumn":22},{"ruleId":"973","severity":1,"message":"979","line":22,"column":1,"nodeType":"975","endLine":41,"endColumn":3},{"ruleId":"955","severity":1,"message":"980","line":1,"column":10,"nodeType":"957","messageId":"958","endLine":1,"endColumn":18},{"ruleId":"955","severity":1,"message":"981","line":2,"column":10,"nodeType":"957","messageId":"958","endLine":2,"endColumn":21},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"983","severity":1,"message":"984","line":33,"column":21,"nodeType":"985","messageId":"986","endLine":33,"endColumn":23},{"ruleId":"987","severity":1,"message":"988","line":34,"column":5,"nodeType":"989","messageId":"990","endLine":36,"endColumn":6},{"ruleId":"955","severity":1,"message":"991","line":3,"column":8,"nodeType":"957","messageId":"958","endLine":3,"endColumn":14},{"ruleId":"987","severity":1,"message":"988","line":40,"column":5,"nodeType":"989","messageId":"990","endLine":42,"endColumn":6},{"ruleId":"955","severity":1,"message":"982","line":16,"column":11,"nodeType":"957","messageId":"958","endLine":16,"endColumn":15},{"ruleId":"992","severity":1,"message":"993","line":45,"column":59,"nodeType":"971","messageId":"994","endLine":45,"endColumn":61},{"ruleId":"995","severity":1,"message":"996","line":78,"column":10,"nodeType":"997","messageId":"998","endLine":78,"endColumn":35},{"ruleId":"999","severity":1,"message":"1000","line":226,"column":5,"nodeType":"1001","endLine":226,"endColumn":15,"suggestions":"1002"},{"ruleId":"999","severity":1,"message":"1003","line":236,"column":5,"nodeType":"1001","endLine":236,"endColumn":14,"suggestions":"1004"},{"ruleId":"999","severity":1,"message":"1005","line":269,"column":5,"nodeType":"1001","endLine":269,"endColumn":30,"suggestions":"1006"},{"ruleId":"983","severity":1,"message":"984","line":274,"column":16,"nodeType":"985","messageId":"986","endLine":274,"endColumn":18},{"ruleId":"999","severity":1,"message":"1007","line":291,"column":5,"nodeType":"1001","endLine":291,"endColumn":24,"suggestions":"1008"},{"ruleId":"955","severity":1,"message":"1009","line":2,"column":22,"nodeType":"957","messageId":"958","endLine":2,"endColumn":31},{"ruleId":"995","severity":1,"message":"996","line":83,"column":10,"nodeType":"997","messageId":"998","endLine":83,"endColumn":35},{"ruleId":"955","severity":1,"message":"1010","line":205,"column":10,"nodeType":"957","messageId":"958","endLine":205,"endColumn":19},{"ruleId":"999","severity":1,"message":"1011","line":246,"column":5,"nodeType":"1001","endLine":246,"endColumn":21,"suggestions":"1012"},{"ruleId":"999","severity":1,"message":"1003","line":257,"column":5,"nodeType":"1001","endLine":257,"endColumn":14,"suggestions":"1013"},{"ruleId":"999","severity":1,"message":"1014","line":298,"column":5,"nodeType":"1001","endLine":298,"endColumn":30,"suggestions":"1015"},{"ruleId":"983","severity":1,"message":"984","line":303,"column":16,"nodeType":"985","messageId":"986","endLine":303,"endColumn":18},{"ruleId":"999","severity":1,"message":"1007","line":320,"column":5,"nodeType":"1001","endLine":320,"endColumn":24,"suggestions":"1016"},{"ruleId":"955","severity":1,"message":"1009","line":2,"column":22,"nodeType":"957","messageId":"958","endLine":2,"endColumn":31},{"ruleId":"955","severity":1,"message":"1017","line":4,"column":182,"nodeType":"957","messageId":"958","endLine":4,"endColumn":191},{"ruleId":"995","severity":1,"message":"996","line":83,"column":12,"nodeType":"997","messageId":"998","endLine":83,"endColumn":37},{"ruleId":"999","severity":1,"message":"1011","line":238,"column":6,"nodeType":"1001","endLine":238,"endColumn":22,"suggestions":"1018"},{"ruleId":"999","severity":1,"message":"1003","line":248,"column":6,"nodeType":"1001","endLine":248,"endColumn":15,"suggestions":"1019"},{"ruleId":"955","severity":1,"message":"1020","line":284,"column":9,"nodeType":"957","messageId":"958","endLine":284,"endColumn":15},{"ruleId":"999","severity":1,"message":"1005","line":289,"column":6,"nodeType":"1001","endLine":289,"endColumn":31,"suggestions":"1021"},{"ruleId":"999","severity":1,"message":"1007","line":311,"column":6,"nodeType":"1001","endLine":311,"endColumn":25,"suggestions":"1022"},{"ruleId":"992","severity":1,"message":"993","line":45,"column":55,"nodeType":"971","messageId":"994","endLine":45,"endColumn":57},{"ruleId":"955","severity":1,"message":"1009","line":2,"column":22,"nodeType":"957","messageId":"958","endLine":2,"endColumn":31},{"ruleId":"995","severity":1,"message":"996","line":77,"column":12,"nodeType":"997","messageId":"998","endLine":77,"endColumn":37},{"ruleId":"999","severity":1,"message":"1000","line":224,"column":6,"nodeType":"1001","endLine":224,"endColumn":16,"suggestions":"1023"},{"ruleId":"999","severity":1,"message":"1003","line":234,"column":6,"nodeType":"1001","endLine":234,"endColumn":15,"suggestions":"1024"},{"ruleId":"999","severity":1,"message":"1005","line":267,"column":6,"nodeType":"1001","endLine":267,"endColumn":31,"suggestions":"1025"},{"ruleId":"999","severity":1,"message":"1007","line":289,"column":6,"nodeType":"1001","endLine":289,"endColumn":25,"suggestions":"1026"},{"ruleId":"955","severity":1,"message":"1027","line":10,"column":8,"nodeType":"957","messageId":"958","endLine":10,"endColumn":19},{"ruleId":"955","severity":1,"message":"1028","line":27,"column":79,"nodeType":"957","messageId":"958","endLine":27,"endColumn":90},{"ruleId":"955","severity":1,"message":"1029","line":27,"column":104,"nodeType":"957","messageId":"958","endLine":27,"endColumn":111},{"ruleId":"955","severity":1,"message":"1030","line":27,"column":113,"nodeType":"957","messageId":"958","endLine":27,"endColumn":120},{"ruleId":"955","severity":1,"message":"1027","line":10,"column":8,"nodeType":"957","messageId":"958","endLine":10,"endColumn":19},{"ruleId":"955","severity":1,"message":"1028","line":27,"column":79,"nodeType":"957","messageId":"958","endLine":27,"endColumn":90},{"ruleId":"955","severity":1,"message":"1029","line":27,"column":104,"nodeType":"957","messageId":"958","endLine":27,"endColumn":111},{"ruleId":"955","severity":1,"message":"1030","line":27,"column":113,"nodeType":"957","messageId":"958","endLine":27,"endColumn":120},{"ruleId":"995","severity":1,"message":"996","line":51,"column":12,"nodeType":"997","messageId":"998","endLine":51,"endColumn":37},{"ruleId":"1031","severity":1,"message":"1032","line":104,"column":3,"nodeType":"1033","messageId":"986","endLine":104,"endColumn":9},{"ruleId":"955","severity":1,"message":"1029","line":178,"column":92,"nodeType":"957","messageId":"958","endLine":178,"endColumn":99},{"ruleId":"999","severity":1,"message":"1034","line":204,"column":6,"nodeType":"1001","endLine":204,"endColumn":25,"suggestions":"1035"},{"ruleId":"1036","severity":1,"message":"1037","line":337,"column":31,"nodeType":"1038","endLine":337,"endColumn":84},{"ruleId":"955","severity":1,"message":"1039","line":27,"column":10,"nodeType":"957","messageId":"958","endLine":27,"endColumn":18},{"ruleId":"955","severity":1,"message":"1040","line":28,"column":8,"nodeType":"957","messageId":"958","endLine":28,"endColumn":21},{"ruleId":"955","severity":1,"message":"1041","line":39,"column":10,"nodeType":"957","messageId":"958","endLine":39,"endColumn":23},{"ruleId":"995","severity":1,"message":"996","line":48,"column":12,"nodeType":"997","messageId":"998","endLine":48,"endColumn":37},{"ruleId":"955","severity":1,"message":"1029","line":133,"column":92,"nodeType":"957","messageId":"958","endLine":133,"endColumn":99},{"ruleId":"999","severity":1,"message":"1042","line":152,"column":6,"nodeType":"1001","endLine":152,"endColumn":25,"suggestions":"1043"},{"ruleId":"1036","severity":1,"message":"1037","line":229,"column":31,"nodeType":"1038","endLine":229,"endColumn":84},{"ruleId":"1031","severity":1,"message":"1032","line":107,"column":3,"nodeType":"1033","messageId":"986","endLine":107,"endColumn":9},{"ruleId":"955","severity":1,"message":"1029","line":154,"column":92,"nodeType":"957","messageId":"958","endLine":154,"endColumn":99},{"ruleId":"999","severity":1,"message":"1034","line":179,"column":6,"nodeType":"1001","endLine":179,"endColumn":25,"suggestions":"1044"},{"ruleId":"955","severity":1,"message":"1029","line":121,"column":92,"nodeType":"957","messageId":"958","endLine":121,"endColumn":99},{"ruleId":"999","severity":1,"message":"1042","line":139,"column":6,"nodeType":"1001","endLine":139,"endColumn":25,"suggestions":"1045"},{"ruleId":"987","severity":1,"message":"988","line":26,"column":3,"nodeType":"989","messageId":"990","endLine":28,"endColumn":4},{"ruleId":"987","severity":1,"message":"988","line":45,"column":5,"nodeType":"989","messageId":"990","endLine":47,"endColumn":6},{"ruleId":"955","severity":1,"message":"1046","line":5,"column":10,"nodeType":"957","messageId":"958","endLine":5,"endColumn":22},{"ruleId":"995","severity":1,"message":"996","line":74,"column":12,"nodeType":"997","messageId":"998","endLine":74,"endColumn":37},{"ruleId":"999","severity":1,"message":"1000","line":214,"column":6,"nodeType":"1001","endLine":214,"endColumn":16,"suggestions":"1047"},{"ruleId":"999","severity":1,"message":"1003","line":224,"column":6,"nodeType":"1001","endLine":224,"endColumn":15,"suggestions":"1048"},{"ruleId":"999","severity":1,"message":"1005","line":257,"column":6,"nodeType":"1001","endLine":257,"endColumn":31,"suggestions":"1049"},{"ruleId":"983","severity":1,"message":"984","line":262,"column":20,"nodeType":"985","messageId":"986","endLine":262,"endColumn":22},{"ruleId":"999","severity":1,"message":"1007","line":279,"column":6,"nodeType":"1001","endLine":279,"endColumn":25,"suggestions":"1050"},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"955","severity":1,"message":"1051","line":13,"column":8,"nodeType":"957","messageId":"958","endLine":13,"endColumn":18},{"ruleId":"955","severity":1,"message":"1027","line":16,"column":8,"nodeType":"957","messageId":"958","endLine":16,"endColumn":19},{"ruleId":"955","severity":1,"message":"1052","line":17,"column":8,"nodeType":"957","messageId":"958","endLine":17,"endColumn":21},{"ruleId":"955","severity":1,"message":"1053","line":18,"column":8,"nodeType":"957","messageId":"958","endLine":18,"endColumn":18},{"ruleId":"955","severity":1,"message":"978","line":19,"column":8,"nodeType":"957","messageId":"958","endLine":19,"endColumn":22},{"ruleId":"955","severity":1,"message":"1054","line":24,"column":8,"nodeType":"957","messageId":"958","endLine":24,"endColumn":18},{"ruleId":"1031","severity":1,"message":"1032","line":69,"column":3,"nodeType":"1033","messageId":"986","endLine":69,"endColumn":9},{"ruleId":"955","severity":1,"message":"1029","line":99,"column":104,"nodeType":"957","messageId":"958","endLine":99,"endColumn":111},{"ruleId":"955","severity":1,"message":"1030","line":99,"column":113,"nodeType":"957","messageId":"958","endLine":99,"endColumn":120},{"ruleId":"999","severity":1,"message":"1042","line":118,"column":6,"nodeType":"1001","endLine":118,"endColumn":25,"suggestions":"1055"},{"ruleId":"983","severity":1,"message":"984","line":241,"column":71,"nodeType":"985","messageId":"986","endLine":241,"endColumn":73},{"ruleId":"955","severity":1,"message":"1051","line":16,"column":8,"nodeType":"957","messageId":"958","endLine":16,"endColumn":18},{"ruleId":"955","severity":1,"message":"1027","line":19,"column":8,"nodeType":"957","messageId":"958","endLine":19,"endColumn":19},{"ruleId":"955","severity":1,"message":"1052","line":20,"column":8,"nodeType":"957","messageId":"958","endLine":20,"endColumn":21},{"ruleId":"955","severity":1,"message":"1053","line":21,"column":8,"nodeType":"957","messageId":"958","endLine":21,"endColumn":18},{"ruleId":"955","severity":1,"message":"978","line":22,"column":8,"nodeType":"957","messageId":"958","endLine":22,"endColumn":22},{"ruleId":"995","severity":1,"message":"996","line":40,"column":12,"nodeType":"997","messageId":"998","endLine":40,"endColumn":37},{"ruleId":"1031","severity":1,"message":"1032","line":89,"column":3,"nodeType":"1033","messageId":"986","endLine":89,"endColumn":9},{"ruleId":"955","severity":1,"message":"1056","line":100,"column":9,"nodeType":"957","messageId":"958","endLine":100,"endColumn":16},{"ruleId":"955","severity":1,"message":"1029","line":124,"column":104,"nodeType":"957","messageId":"958","endLine":124,"endColumn":111},{"ruleId":"955","severity":1,"message":"1030","line":124,"column":113,"nodeType":"957","messageId":"958","endLine":124,"endColumn":120},{"ruleId":"983","severity":1,"message":"984","line":133,"column":20,"nodeType":"985","messageId":"986","endLine":133,"endColumn":22},{"ruleId":"983","severity":1,"message":"984","line":137,"column":27,"nodeType":"985","messageId":"986","endLine":137,"endColumn":29},{"ruleId":"999","severity":1,"message":"1034","line":149,"column":6,"nodeType":"1001","endLine":149,"endColumn":25,"suggestions":"1057"},{"ruleId":"955","severity":1,"message":"1058","line":236,"column":11,"nodeType":"957","messageId":"958","endLine":236,"endColumn":20},{"ruleId":"992","severity":1,"message":"993","line":45,"column":56,"nodeType":"971","messageId":"994","endLine":45,"endColumn":58},{"ruleId":"955","severity":1,"message":"1017","line":4,"column":182,"nodeType":"957","messageId":"958","endLine":4,"endColumn":191},{"ruleId":"995","severity":1,"message":"996","line":82,"column":12,"nodeType":"997","messageId":"998","endLine":82,"endColumn":37},{"ruleId":"955","severity":1,"message":"1059","line":220,"column":18,"nodeType":"957","messageId":"958","endLine":220,"endColumn":27},{"ruleId":"999","severity":1,"message":"1060","line":248,"column":6,"nodeType":"1001","endLine":248,"endColumn":22,"suggestions":"1061"},{"ruleId":"999","severity":1,"message":"1003","line":258,"column":6,"nodeType":"1001","endLine":258,"endColumn":15,"suggestions":"1062"},{"ruleId":"955","severity":1,"message":"1020","line":294,"column":9,"nodeType":"957","messageId":"958","endLine":294,"endColumn":15},{"ruleId":"999","severity":1,"message":"1005","line":299,"column":6,"nodeType":"1001","endLine":299,"endColumn":31,"suggestions":"1063"},{"ruleId":"983","severity":1,"message":"984","line":304,"column":20,"nodeType":"985","messageId":"986","endLine":304,"endColumn":22},{"ruleId":"999","severity":1,"message":"1007","line":321,"column":6,"nodeType":"1001","endLine":321,"endColumn":25,"suggestions":"1064"},{"ruleId":"992","severity":1,"message":"993","line":45,"column":56,"nodeType":"971","messageId":"994","endLine":45,"endColumn":58},{"ruleId":"955","severity":1,"message":"1017","line":4,"column":176,"nodeType":"957","messageId":"958","endLine":4,"endColumn":185},{"ruleId":"995","severity":1,"message":"996","line":87,"column":12,"nodeType":"997","messageId":"998","endLine":87,"endColumn":37},{"ruleId":"999","severity":1,"message":"1011","line":246,"column":6,"nodeType":"1001","endLine":246,"endColumn":22,"suggestions":"1065"},{"ruleId":"999","severity":1,"message":"1003","line":256,"column":6,"nodeType":"1001","endLine":256,"endColumn":15,"suggestions":"1066"},{"ruleId":"955","severity":1,"message":"1020","line":292,"column":9,"nodeType":"957","messageId":"958","endLine":292,"endColumn":15},{"ruleId":"999","severity":1,"message":"1005","line":297,"column":6,"nodeType":"1001","endLine":297,"endColumn":31,"suggestions":"1067"},{"ruleId":"983","severity":1,"message":"984","line":302,"column":20,"nodeType":"985","messageId":"986","endLine":302,"endColumn":22},{"ruleId":"999","severity":1,"message":"1007","line":319,"column":6,"nodeType":"1001","endLine":319,"endColumn":25,"suggestions":"1068"},{"ruleId":"955","severity":1,"message":"1069","line":49,"column":10,"nodeType":"957","messageId":"958","endLine":49,"endColumn":20},{"ruleId":"955","severity":1,"message":"1070","line":49,"column":22,"nodeType":"957","messageId":"958","endLine":49,"endColumn":35},{"ruleId":"955","severity":1,"message":"1028","line":62,"column":79,"nodeType":"957","messageId":"958","endLine":62,"endColumn":90},{"ruleId":"955","severity":1,"message":"1029","line":62,"column":104,"nodeType":"957","messageId":"958","endLine":62,"endColumn":111},{"ruleId":"955","severity":1,"message":"1030","line":62,"column":113,"nodeType":"957","messageId":"958","endLine":62,"endColumn":120},{"ruleId":"983","severity":1,"message":"984","line":91,"column":14,"nodeType":"985","messageId":"986","endLine":91,"endColumn":16},{"ruleId":"955","severity":1,"message":"1071","line":3,"column":22,"nodeType":"957","messageId":"958","endLine":3,"endColumn":41},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"999","severity":1,"message":"1072","line":78,"column":6,"nodeType":"1001","endLine":78,"endColumn":12,"suggestions":"1073"},{"ruleId":"955","severity":1,"message":"1028","line":80,"column":79,"nodeType":"957","messageId":"958","endLine":80,"endColumn":90},{"ruleId":"955","severity":1,"message":"1029","line":80,"column":104,"nodeType":"957","messageId":"958","endLine":80,"endColumn":111},{"ruleId":"955","severity":1,"message":"1030","line":80,"column":113,"nodeType":"957","messageId":"958","endLine":80,"endColumn":120},{"ruleId":"955","severity":1,"message":"1074","line":26,"column":8,"nodeType":"957","messageId":"958","endLine":26,"endColumn":19},{"ruleId":"955","severity":1,"message":"1041","line":35,"column":10,"nodeType":"957","messageId":"958","endLine":35,"endColumn":23},{"ruleId":"995","severity":1,"message":"996","line":44,"column":12,"nodeType":"997","messageId":"998","endLine":44,"endColumn":37},{"ruleId":"1031","severity":1,"message":"1032","line":94,"column":3,"nodeType":"1033","messageId":"986","endLine":94,"endColumn":9},{"ruleId":"955","severity":1,"message":"1075","line":158,"column":59,"nodeType":"957","messageId":"958","endLine":158,"endColumn":65},{"ruleId":"955","severity":1,"message":"1028","line":158,"column":67,"nodeType":"957","messageId":"958","endLine":158,"endColumn":78},{"ruleId":"955","severity":1,"message":"1029","line":158,"column":92,"nodeType":"957","messageId":"958","endLine":158,"endColumn":99},{"ruleId":"955","severity":1,"message":"1030","line":158,"column":101,"nodeType":"957","messageId":"958","endLine":158,"endColumn":108},{"ruleId":"983","severity":1,"message":"984","line":167,"column":20,"nodeType":"985","messageId":"986","endLine":167,"endColumn":22},{"ruleId":"983","severity":1,"message":"984","line":171,"column":27,"nodeType":"985","messageId":"986","endLine":171,"endColumn":29},{"ruleId":"999","severity":1,"message":"1034","line":183,"column":6,"nodeType":"1001","endLine":183,"endColumn":25,"suggestions":"1076"},{"ruleId":"992","severity":1,"message":"993","line":45,"column":59,"nodeType":"971","messageId":"994","endLine":45,"endColumn":61},{"ruleId":"992","severity":1,"message":"993","line":45,"column":54,"nodeType":"971","messageId":"994","endLine":45,"endColumn":56},{"ruleId":"955","severity":1,"message":"978","line":19,"column":8,"nodeType":"957","messageId":"958","endLine":19,"endColumn":22},{"ruleId":"955","severity":1,"message":"1054","line":24,"column":8,"nodeType":"957","messageId":"958","endLine":24,"endColumn":18},{"ruleId":"955","severity":1,"message":"1041","line":32,"column":10,"nodeType":"957","messageId":"958","endLine":32,"endColumn":23},{"ruleId":"995","severity":1,"message":"996","line":41,"column":12,"nodeType":"997","messageId":"998","endLine":41,"endColumn":37},{"ruleId":"955","severity":1,"message":"1028","line":105,"column":67,"nodeType":"957","messageId":"958","endLine":105,"endColumn":78},{"ruleId":"955","severity":1,"message":"1029","line":105,"column":92,"nodeType":"957","messageId":"958","endLine":105,"endColumn":99},{"ruleId":"955","severity":1,"message":"1030","line":105,"column":101,"nodeType":"957","messageId":"958","endLine":105,"endColumn":108},{"ruleId":"999","severity":1,"message":"1042","line":123,"column":6,"nodeType":"1001","endLine":123,"endColumn":25,"suggestions":"1077"},{"ruleId":"1036","severity":1,"message":"1037","line":176,"column":31,"nodeType":"1038","endLine":176,"endColumn":84},{"ruleId":"1036","severity":1,"message":"1037","line":259,"column":21,"nodeType":"1038","endLine":259,"endColumn":49},{"ruleId":"955","severity":1,"message":"1009","line":2,"column":22,"nodeType":"957","messageId":"958","endLine":2,"endColumn":31},{"ruleId":"955","severity":1,"message":"1017","line":4,"column":182,"nodeType":"957","messageId":"958","endLine":4,"endColumn":191},{"ruleId":"995","severity":1,"message":"996","line":82,"column":12,"nodeType":"997","messageId":"998","endLine":82,"endColumn":37},{"ruleId":"999","severity":1,"message":"1011","line":244,"column":6,"nodeType":"1001","endLine":244,"endColumn":22,"suggestions":"1078"},{"ruleId":"999","severity":1,"message":"1003","line":254,"column":6,"nodeType":"1001","endLine":254,"endColumn":15,"suggestions":"1079"},{"ruleId":"955","severity":1,"message":"1020","line":290,"column":9,"nodeType":"957","messageId":"958","endLine":290,"endColumn":15},{"ruleId":"999","severity":1,"message":"1005","line":295,"column":6,"nodeType":"1001","endLine":295,"endColumn":31,"suggestions":"1080"},{"ruleId":"983","severity":1,"message":"984","line":300,"column":20,"nodeType":"985","messageId":"986","endLine":300,"endColumn":22},{"ruleId":"999","severity":1,"message":"1007","line":317,"column":6,"nodeType":"1001","endLine":317,"endColumn":25,"suggestions":"1081"},{"ruleId":"983","severity":1,"message":"984","line":508,"column":64,"nodeType":"985","messageId":"986","endLine":508,"endColumn":66},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"955","severity":1,"message":"978","line":22,"column":8,"nodeType":"957","messageId":"958","endLine":22,"endColumn":22},{"ruleId":"995","severity":1,"message":"996","line":44,"column":12,"nodeType":"997","messageId":"998","endLine":44,"endColumn":37},{"ruleId":"1031","severity":1,"message":"1032","line":101,"column":3,"nodeType":"1033","messageId":"986","endLine":101,"endColumn":9},{"ruleId":"955","severity":1,"message":"1028","line":146,"column":67,"nodeType":"957","messageId":"958","endLine":146,"endColumn":78},{"ruleId":"955","severity":1,"message":"1029","line":146,"column":92,"nodeType":"957","messageId":"958","endLine":146,"endColumn":99},{"ruleId":"955","severity":1,"message":"1030","line":146,"column":101,"nodeType":"957","messageId":"958","endLine":146,"endColumn":108},{"ruleId":"999","severity":1,"message":"1034","line":171,"column":6,"nodeType":"1001","endLine":171,"endColumn":25,"suggestions":"1082"},{"ruleId":"1036","severity":1,"message":"1037","line":276,"column":31,"nodeType":"1038","endLine":276,"endColumn":84},{"ruleId":"1036","severity":1,"message":"1037","line":363,"column":21,"nodeType":"1038","endLine":363,"endColumn":49},{"ruleId":"955","severity":1,"message":"1009","line":2,"column":22,"nodeType":"957","messageId":"958","endLine":2,"endColumn":31},{"ruleId":"955","severity":1,"message":"1017","line":4,"column":172,"nodeType":"957","messageId":"958","endLine":4,"endColumn":181},{"ruleId":"955","severity":1,"message":"1083","line":25,"column":8,"nodeType":"957","messageId":"958","endLine":25,"endColumn":12},{"ruleId":"955","severity":1,"message":"1084","line":30,"column":8,"nodeType":"957","messageId":"958","endLine":30,"endColumn":15},{"ruleId":"995","severity":1,"message":"996","line":86,"column":12,"nodeType":"997","messageId":"998","endLine":86,"endColumn":37},{"ruleId":"999","severity":1,"message":"1011","line":258,"column":6,"nodeType":"1001","endLine":258,"endColumn":22,"suggestions":"1085"},{"ruleId":"999","severity":1,"message":"1003","line":268,"column":6,"nodeType":"1001","endLine":268,"endColumn":15,"suggestions":"1086"},{"ruleId":"983","severity":1,"message":"984","line":284,"column":25,"nodeType":"985","messageId":"986","endLine":284,"endColumn":27},{"ruleId":"955","severity":1,"message":"1020","line":304,"column":9,"nodeType":"957","messageId":"958","endLine":304,"endColumn":15},{"ruleId":"999","severity":1,"message":"1005","line":309,"column":6,"nodeType":"1001","endLine":309,"endColumn":31,"suggestions":"1087"},{"ruleId":"983","severity":1,"message":"984","line":314,"column":20,"nodeType":"985","messageId":"986","endLine":314,"endColumn":22},{"ruleId":"999","severity":1,"message":"1007","line":331,"column":6,"nodeType":"1001","endLine":331,"endColumn":25,"suggestions":"1088"},{"ruleId":"983","severity":1,"message":"984","line":35,"column":29,"nodeType":"985","messageId":"986","endLine":35,"endColumn":31},{"ruleId":"992","severity":1,"message":"993","line":46,"column":54,"nodeType":"971","messageId":"994","endLine":46,"endColumn":56},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"955","severity":1,"message":"1071","line":3,"column":22,"nodeType":"957","messageId":"958","endLine":3,"endColumn":41},{"ruleId":"955","severity":1,"message":"1089","line":20,"column":8,"nodeType":"957","messageId":"958","endLine":20,"endColumn":14},{"ruleId":"955","severity":1,"message":"1051","line":21,"column":8,"nodeType":"957","messageId":"958","endLine":21,"endColumn":18},{"ruleId":"955","severity":1,"message":"1052","line":25,"column":8,"nodeType":"957","messageId":"958","endLine":25,"endColumn":21},{"ruleId":"955","severity":1,"message":"1053","line":26,"column":8,"nodeType":"957","messageId":"958","endLine":26,"endColumn":18},{"ruleId":"955","severity":1,"message":"1074","line":32,"column":8,"nodeType":"957","messageId":"958","endLine":32,"endColumn":19},{"ruleId":"995","severity":1,"message":"996","line":50,"column":12,"nodeType":"997","messageId":"998","endLine":50,"endColumn":37},{"ruleId":"1031","severity":1,"message":"1032","line":116,"column":3,"nodeType":"1033","messageId":"986","endLine":116,"endColumn":9},{"ruleId":"1031","severity":1,"message":"1090","line":122,"column":3,"nodeType":"1033","messageId":"986","endLine":122,"endColumn":18},{"ruleId":"955","severity":1,"message":"1028","line":182,"column":67,"nodeType":"957","messageId":"958","endLine":182,"endColumn":78},{"ruleId":"955","severity":1,"message":"1029","line":182,"column":92,"nodeType":"957","messageId":"958","endLine":182,"endColumn":99},{"ruleId":"955","severity":1,"message":"1030","line":182,"column":101,"nodeType":"957","messageId":"958","endLine":182,"endColumn":108},{"ruleId":"999","severity":1,"message":"1034","line":207,"column":6,"nodeType":"1001","endLine":207,"endColumn":25,"suggestions":"1091"},{"ruleId":"955","severity":1,"message":"1009","line":2,"column":22,"nodeType":"957","messageId":"958","endLine":2,"endColumn":31},{"ruleId":"955","severity":1,"message":"1017","line":4,"column":172,"nodeType":"957","messageId":"958","endLine":4,"endColumn":181},{"ruleId":"955","severity":1,"message":"1089","line":21,"column":8,"nodeType":"957","messageId":"958","endLine":21,"endColumn":14},{"ruleId":"955","severity":1,"message":"1083","line":27,"column":8,"nodeType":"957","messageId":"958","endLine":27,"endColumn":12},{"ruleId":"955","severity":1,"message":"1084","line":29,"column":8,"nodeType":"957","messageId":"958","endLine":29,"endColumn":15},{"ruleId":"995","severity":1,"message":"996","line":85,"column":12,"nodeType":"997","messageId":"998","endLine":85,"endColumn":37},{"ruleId":"999","severity":1,"message":"1011","line":256,"column":6,"nodeType":"1001","endLine":256,"endColumn":22,"suggestions":"1092"},{"ruleId":"999","severity":1,"message":"1003","line":266,"column":6,"nodeType":"1001","endLine":266,"endColumn":15,"suggestions":"1093"},{"ruleId":"983","severity":1,"message":"984","line":282,"column":25,"nodeType":"985","messageId":"986","endLine":282,"endColumn":27},{"ruleId":"955","severity":1,"message":"1020","line":302,"column":9,"nodeType":"957","messageId":"958","endLine":302,"endColumn":15},{"ruleId":"999","severity":1,"message":"1005","line":307,"column":6,"nodeType":"1001","endLine":307,"endColumn":31,"suggestions":"1094"},{"ruleId":"983","severity":1,"message":"984","line":312,"column":20,"nodeType":"985","messageId":"986","endLine":312,"endColumn":22},{"ruleId":"999","severity":1,"message":"1007","line":329,"column":6,"nodeType":"1001","endLine":329,"endColumn":25,"suggestions":"1095"},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"955","severity":1,"message":"1051","line":17,"column":8,"nodeType":"957","messageId":"958","endLine":17,"endColumn":18},{"ruleId":"955","severity":1,"message":"1027","line":20,"column":8,"nodeType":"957","messageId":"958","endLine":20,"endColumn":19},{"ruleId":"955","severity":1,"message":"1052","line":21,"column":8,"nodeType":"957","messageId":"958","endLine":21,"endColumn":21},{"ruleId":"955","severity":1,"message":"1053","line":22,"column":8,"nodeType":"957","messageId":"958","endLine":22,"endColumn":18},{"ruleId":"955","severity":1,"message":"978","line":23,"column":8,"nodeType":"957","messageId":"958","endLine":23,"endColumn":22},{"ruleId":"955","severity":1,"message":"1096","line":26,"column":8,"nodeType":"957","messageId":"958","endLine":26,"endColumn":13},{"ruleId":"955","severity":1,"message":"1074","line":29,"column":8,"nodeType":"957","messageId":"958","endLine":29,"endColumn":19},{"ruleId":"995","severity":1,"message":"996","line":47,"column":12,"nodeType":"997","messageId":"998","endLine":47,"endColumn":37},{"ruleId":"1031","severity":1,"message":"1032","line":102,"column":3,"nodeType":"1033","messageId":"986","endLine":102,"endColumn":9},{"ruleId":"1031","severity":1,"message":"1097","line":105,"column":3,"nodeType":"1033","messageId":"986","endLine":105,"endColumn":14},{"ruleId":"955","severity":1,"message":"1028","line":143,"column":67,"nodeType":"957","messageId":"958","endLine":143,"endColumn":78},{"ruleId":"955","severity":1,"message":"1029","line":143,"column":92,"nodeType":"957","messageId":"958","endLine":143,"endColumn":99},{"ruleId":"955","severity":1,"message":"1030","line":143,"column":101,"nodeType":"957","messageId":"958","endLine":143,"endColumn":108},{"ruleId":"983","severity":1,"message":"984","line":152,"column":20,"nodeType":"985","messageId":"986","endLine":152,"endColumn":22},{"ruleId":"983","severity":1,"message":"984","line":156,"column":27,"nodeType":"985","messageId":"986","endLine":156,"endColumn":29},{"ruleId":"999","severity":1,"message":"1034","line":168,"column":6,"nodeType":"1001","endLine":168,"endColumn":25,"suggestions":"1098"},{"ruleId":"955","severity":1,"message":"982","line":11,"column":11,"nodeType":"957","messageId":"958","endLine":11,"endColumn":15},{"ruleId":"955","severity":1,"message":"1027","line":10,"column":8,"nodeType":"957","messageId":"958","endLine":10,"endColumn":19},{"ruleId":"955","severity":1,"message":"1028","line":34,"column":79,"nodeType":"957","messageId":"958","endLine":34,"endColumn":90},{"ruleId":"955","severity":1,"message":"1029","line":34,"column":104,"nodeType":"957","messageId":"958","endLine":34,"endColumn":111},{"ruleId":"955","severity":1,"message":"1030","line":34,"column":113,"nodeType":"957","messageId":"958","endLine":34,"endColumn":120},{"ruleId":"955","severity":1,"message":"1027","line":10,"column":8,"nodeType":"957","messageId":"958","endLine":10,"endColumn":19},{"ruleId":"955","severity":1,"message":"1028","line":34,"column":79,"nodeType":"957","messageId":"958","endLine":34,"endColumn":90},{"ruleId":"955","severity":1,"message":"1029","line":34,"column":104,"nodeType":"957","messageId":"958","endLine":34,"endColumn":111},{"ruleId":"955","severity":1,"message":"1030","line":34,"column":113,"nodeType":"957","messageId":"958","endLine":34,"endColumn":120},{"ruleId":"951","replacedBy":"1099"},{"ruleId":"953","replacedBy":"1100"},{"ruleId":"955","severity":1,"message":"956","line":3,"column":50,"nodeType":"957","messageId":"958","endLine":3,"endColumn":54},{"ruleId":"955","severity":1,"message":"1101","line":21,"column":8,"nodeType":"957","messageId":"958","endLine":21,"endColumn":16},{"ruleId":"955","severity":1,"message":"959","line":30,"column":7,"nodeType":"957","messageId":"958","endLine":30,"endColumn":8},{"ruleId":"955","severity":1,"message":"962","line":1,"column":8,"nodeType":"957","messageId":"958","endLine":1,"endColumn":13},{"ruleId":"955","severity":1,"message":"1102","line":71,"column":16,"nodeType":"957","messageId":"958","endLine":71,"endColumn":25},{"ruleId":"955","severity":1,"message":"1103","line":83,"column":10,"nodeType":"957","messageId":"958","endLine":83,"endColumn":15},{"ruleId":"955","severity":1,"message":"1104","line":84,"column":10,"nodeType":"957","messageId":"958","endLine":84,"endColumn":18},{"ruleId":"955","severity":1,"message":"960","line":85,"column":10,"nodeType":"957","messageId":"958","endLine":85,"endColumn":19},{"ruleId":"955","severity":1,"message":"961","line":89,"column":7,"nodeType":"957","messageId":"958","endLine":89,"endColumn":12},{"ruleId":"955","severity":1,"message":"964","line":15,"column":8,"nodeType":"957","messageId":"958","endLine":15,"endColumn":18},{"ruleId":"955","severity":1,"message":"965","line":19,"column":8,"nodeType":"957","messageId":"958","endLine":19,"endColumn":13},{"ruleId":"955","severity":1,"message":"966","line":21,"column":8,"nodeType":"957","messageId":"958","endLine":21,"endColumn":16},{"ruleId":"955","severity":1,"message":"967","line":70,"column":22,"nodeType":"957","messageId":"958","endLine":70,"endColumn":37},{"ruleId":"955","severity":1,"message":"968","line":19,"column":5,"nodeType":"957","messageId":"958","endLine":19,"endColumn":12},{"ruleId":"969","severity":1,"message":"970","line":37,"column":33,"nodeType":"971","messageId":"972","endLine":39,"endColumn":4},{"ruleId":"955","severity":1,"message":"1105","line":105,"column":16,"nodeType":"957","messageId":"958","endLine":105,"endColumn":20},{"ruleId":"955","severity":1,"message":"1106","line":184,"column":7,"nodeType":"957","messageId":"958","endLine":184,"endColumn":23},{"ruleId":"955","severity":1,"message":"1107","line":187,"column":7,"nodeType":"957","messageId":"958","endLine":187,"endColumn":18},{"ruleId":"955","severity":1,"message":"1108","line":188,"column":7,"nodeType":"957","messageId":"958","endLine":188,"endColumn":15},{"ruleId":"955","severity":1,"message":"1109","line":329,"column":31,"nodeType":"957","messageId":"958","endLine":329,"endColumn":38},{"ruleId":"955","severity":1,"message":"1109","line":389,"column":49,"nodeType":"957","messageId":"958","endLine":389,"endColumn":56},{"ruleId":"973","severity":1,"message":"974","line":6,"column":1,"nodeType":"975","endLine":17,"endColumn":2},{"ruleId":"951","replacedBy":"1110"},{"ruleId":"953","replacedBy":"1111"},{"ruleId":"983","severity":1,"message":"984","line":33,"column":21,"nodeType":"985","messageId":"986","endLine":33,"endColumn":23},{"ruleId":"955","severity":1,"message":"991","line":3,"column":8,"nodeType":"957","messageId":"958","endLine":3,"endColumn":14},{"ruleId":"987","severity":1,"message":"988","line":40,"column":5,"nodeType":"989","messageId":"990","endLine":42,"endColumn":6},{"ruleId":"955","severity":1,"message":"980","line":1,"column":10,"nodeType":"957","messageId":"958","endLine":1,"endColumn":18},{"ruleId":"955","severity":1,"message":"981","line":2,"column":10,"nodeType":"957","messageId":"958","endLine":2,"endColumn":21},{"ruleId":"973","severity":1,"message":"979","line":22,"column":1,"nodeType":"975","endLine":41,"endColumn":3},{"ruleId":"987","severity":1,"message":"988","line":34,"column":5,"nodeType":"989","messageId":"990","endLine":36,"endColumn":6},{"ruleId":"955","severity":1,"message":"1112","line":57,"column":9,"nodeType":"957","messageId":"958","endLine":57,"endColumn":18},"no-native-reassign",["1113"],"no-negated-in-lhs",["1114"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'i' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'error' is defined but never used.","'React' is defined but never used.","'Container' is defined but never used.","'Typography' is defined but never used.","'Badge' is defined but never used.","'MailIcon' is defined but never used.","'setCurrentTheme' is assigned a value but never used.","'current' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'defaultData'.","ArrowFunctionExpression","unsafeRefs","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["1113"],["1114"],"'FormHelperText' is defined but never used.","Assign array to a variable before exporting as module default","'useState' is defined but never used.","'useDispatch' is defined but never used.","'resp' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Button' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'redirectPage' and 'rows.length'. Either include them or remove the dependency array.","ArrayExpression",["1115"],"React Hook useEffect has a missing dependency: 'redirectPage'. Either include it or remove the dependency array.",["1116"],"React Hook useEffect has missing dependencies: 'history', 'rows.length', and 'rowsPerPage'. Either include them or remove the dependency array.",["1117"],"React Hook useEffect has missing dependencies: 'action', 'dispatch', 'error', and 'selected.length'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMessage' needs the current value of 'selected.length'.",["1118"],"'useParams' is defined but never used.","'histories' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history.location.search' and 'redirectPage'. Either include them or remove the dependency array.",["1119"],["1120"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'rows.length', and 'rowsPerPage'. Either include them or remove the dependency array.",["1121"],["1122"],"'clearList' is defined but never used.",["1123"],["1124"],"'offset' is assigned a value but never used.",["1125"],["1126"],["1127"],["1128"],["1129"],["1130"],"'FormControl' is defined but never used.","'isSubmitted' is assigned a value but never used.","'control' is assigned a value but never used.","'trigger' is assigned a value but never used.","no-dupe-keys","Duplicate key 'spacer'.","ObjectExpression","React Hook useEffect has missing dependencies: 'action', 'dispatch', 'error', and 'history'. Either include them or remove the dependency array.",["1131"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useTheme' is defined but never used.","'useMediaQuery' is defined but never used.","'getParamValue' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'error', 'history', and 'rows'. Either include them or remove the dependency array.",["1132"],["1133"],["1134"],"'createReason' is defined but never used.",["1135"],["1136"],["1137"],["1138"],"'IconButton' is defined but never used.","'OutlinedInput' is defined but never used.","'InputLabel' is defined but never used.","'DeleteIcon' is defined but never used.",["1139"],"'loading' is assigned a value but never used.",["1140"],"'fieldName' is assigned a value but never used.","'setStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history.location.search', 'redirectPage', and 'status'. Either include them or remove the dependency array.",["1141"],["1142"],["1143"],["1144"],["1145"],["1146"],["1147"],["1148"],"'dialogOpen' is assigned a value but never used.","'setDialogOpen' is assigned a value but never used.","'handleErrorResponse' is defined but never used.","React Hook useEffect has missing dependencies: 'data.value' and 'setValue'. Either include them or remove the dependency array. If 'setFileName' needs the current value of 'data.value', you can also switch to useReducer instead of useState and read 'data.value' in the reducer.",["1149"],"'PhotoCamera' is defined but never used.","'errors' is assigned a value but never used.",["1150"],["1151"],["1152"],["1153"],["1154"],["1155"],["1156"],"'Grid' is defined but never used.","'AddIcon' is defined but never used.",["1157"],["1158"],["1159"],["1160"],"'Avatar' is defined but never used.","Duplicate key 'uploadContainer'.",["1161"],["1162"],["1163"],["1164"],["1165"],"'Input' is defined but never used.","Duplicate key 'actionGroup'.",["1166"],["1113"],["1114"],"'Settings' is defined but never used.","'loginUser' is defined but never used.","'email' is assigned a value but never used.","'password' is assigned a value but never used.","'item' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'labelId' is assigned a value but never used.",["1113"],["1114"],"'chartData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1167","fix":"1168"},{"desc":"1169","fix":"1170"},{"desc":"1171","fix":"1172"},{"desc":"1173","fix":"1174"},{"desc":"1175","fix":"1176"},{"desc":"1169","fix":"1177"},{"desc":"1178","fix":"1179"},{"desc":"1173","fix":"1180"},{"desc":"1175","fix":"1181"},{"desc":"1169","fix":"1182"},{"desc":"1171","fix":"1183"},{"desc":"1173","fix":"1184"},{"desc":"1167","fix":"1185"},{"desc":"1169","fix":"1186"},{"desc":"1171","fix":"1187"},{"desc":"1173","fix":"1188"},{"desc":"1189","fix":"1190"},{"desc":"1191","fix":"1192"},{"desc":"1189","fix":"1193"},{"desc":"1191","fix":"1194"},{"desc":"1167","fix":"1195"},{"desc":"1169","fix":"1196"},{"desc":"1171","fix":"1197"},{"desc":"1173","fix":"1198"},{"desc":"1191","fix":"1199"},{"desc":"1189","fix":"1200"},{"desc":"1201","fix":"1202"},{"desc":"1169","fix":"1203"},{"desc":"1171","fix":"1204"},{"desc":"1173","fix":"1205"},{"desc":"1175","fix":"1206"},{"desc":"1169","fix":"1207"},{"desc":"1171","fix":"1208"},{"desc":"1173","fix":"1209"},{"desc":"1210","fix":"1211"},{"desc":"1189","fix":"1212"},{"desc":"1191","fix":"1213"},{"desc":"1175","fix":"1214"},{"desc":"1169","fix":"1215"},{"desc":"1171","fix":"1216"},{"desc":"1173","fix":"1217"},{"desc":"1189","fix":"1218"},{"desc":"1175","fix":"1219"},{"desc":"1169","fix":"1220"},{"desc":"1171","fix":"1221"},{"desc":"1173","fix":"1222"},{"desc":"1189","fix":"1223"},{"desc":"1175","fix":"1224"},{"desc":"1169","fix":"1225"},{"desc":"1171","fix":"1226"},{"desc":"1173","fix":"1227"},{"desc":"1189","fix":"1228"},"Update the dependencies array to be: [dispatch, redirectPage, rows.length]",{"range":"1229","text":"1230"},"Update the dependencies array to be: [history, redirectPage]",{"range":"1231","text":"1232"},"Update the dependencies array to be: [history, history.location.search, rows.length, rowsPerPage]",{"range":"1233","text":"1234"},"Update the dependencies array to be: [updating, updated, action, dispatch, selected.length, error]",{"range":"1235","text":"1236"},"Update the dependencies array to be: [dispatch, history.location.search, redirectPage, rows]",{"range":"1237","text":"1238"},{"range":"1239","text":"1232"},"Update the dependencies array to be: [dispatch, history, history.location.search, rows.length, rowsPerPage]",{"range":"1240","text":"1241"},{"range":"1242","text":"1236"},{"range":"1243","text":"1238"},{"range":"1244","text":"1232"},{"range":"1245","text":"1234"},{"range":"1246","text":"1236"},{"range":"1247","text":"1230"},{"range":"1248","text":"1232"},{"range":"1249","text":"1234"},{"range":"1250","text":"1236"},"Update the dependencies array to be: [updating, updated, action, dispatch, history, error]",{"range":"1251","text":"1252"},"Update the dependencies array to be: [updating, updated, dispatch, history, rows, error]",{"range":"1253","text":"1254"},{"range":"1255","text":"1252"},{"range":"1256","text":"1254"},{"range":"1257","text":"1230"},{"range":"1258","text":"1232"},{"range":"1259","text":"1234"},{"range":"1260","text":"1236"},{"range":"1261","text":"1254"},{"range":"1262","text":"1252"},"Update the dependencies array to be: [dispatch, history.location.search, redirectPage, rows, status]",{"range":"1263","text":"1264"},{"range":"1265","text":"1232"},{"range":"1266","text":"1234"},{"range":"1267","text":"1236"},{"range":"1268","text":"1238"},{"range":"1269","text":"1232"},{"range":"1270","text":"1234"},{"range":"1271","text":"1236"},"Update the dependencies array to be: [data.value, open, setValue]",{"range":"1272","text":"1273"},{"range":"1274","text":"1252"},{"range":"1275","text":"1254"},{"range":"1276","text":"1238"},{"range":"1277","text":"1232"},{"range":"1278","text":"1234"},{"range":"1279","text":"1236"},{"range":"1280","text":"1252"},{"range":"1281","text":"1238"},{"range":"1282","text":"1232"},{"range":"1283","text":"1234"},{"range":"1284","text":"1236"},{"range":"1285","text":"1252"},{"range":"1286","text":"1238"},{"range":"1287","text":"1232"},{"range":"1288","text":"1234"},{"range":"1289","text":"1236"},{"range":"1290","text":"1252"},[6256,6266],"[dispatch, redirectPage, rows.length]",[6468,6477],"[history, redirectPage]",[7207,7232],"[history, history.location.search, rows.length, rowsPerPage]",[7644,7663],"[updating, updated, action, dispatch, selected.length, error]",[6729,6745],"[dispatch, history.location.search, redirectPage, rows]",[6961,6970],[7860,7885],"[dispatch, history, history.location.search, rows.length, rowsPerPage]",[8291,8310],[7020,7036],[7262,7271],[8284,8309],[8795,8814],[6434,6444],[6665,6674],[7488,7513],[7994,8013],[6459,6478],"[updating, updated, action, dispatch, history, error]",[4655,4674],"[updating, updated, dispatch, history, rows, error]",[5390,5409],[3967,3986],[6163,6173],[6395,6404],[7219,7244],[7725,7744],[3520,3539],[4563,4582],[7050,7066],"[dispatch, history.location.search, redirectPage, rows, status]",[7291,7300],[8312,8337],[8821,8840],[7165,7181],[7403,7412],[8418,8443],[8924,8943],[2063,2069],"[data.value, open, setValue]",[5212,5231],[3591,3610],[7070,7086],[7311,7320],[8332,8357],[8841,8860],[5174,5193],[7495,7511],[7732,7741],[8744,8769],[9249,9268],[5878,5897],[7399,7415],[7635,7644],[8645,8670],[9149,9168],[4857,4876]]